window.Desmos = Ember.Application.create({
    customEvents: {
        tap: "tap"
    }
});;
Desmos.Offline = function () {
    this.url = "", this.isSupported() && (this.url = "{offline_test_url}", this.url.indexOf("http") === -1 && (this.url = "https://www.desmos.com"))
}, Desmos.Offline.didResponseReachServer = function (a) {
    return !!a && (!a.error || a.status !== 0)
}, Desmos.Offline.prototype.isSupported = function () {
    return window.localStorage && document.location.protocol === "file:"
}, Desmos.Offline.prototype.getLoggedInUser = function () {
    var a, b, c;
    return this.isSupported() ? (a = localStorage.logged_in, a ? (b = localStorage["account_" + a], b ? (c = JSON.parse(b), c ? Desmos.User.create(c) : null) : null) : null) : null
}, Desmos.Offline.prototype.setLoggedInUser = function (a, b) {
    var c;
    if (!this.isSupported()) return;
    a ? (localStorage.logged_in = a.email, c = {
        email: a.email,
        name: a.name,
        isDriveUser: a.isDriveUser,
        isEdmodoUser: a.isEdmodoUser,
        seed: a.seed
    }, localStorage["account_" + a.email] = JSON.stringify(c)) : localStorage.logged_in = "", b ? delete localStorage.logout_failed : localStorage.logout_failed = !0
}, Desmos.Offline.prototype.didLogoutFail = function () {
    return !!localStorage.logout_failed
}, Desmos.Offline.prototype.getSavedGraphs = function (a) {
    var b, c, d;
    if (!this.isSupported()) return [];
    if (!a) return [];
    b = localStorage["graphs_" + a.email], c = JSON.parse(b ? b : "[]"), c || (c = []);
    for (d = 0; d < c.length; d++) c[d] = Desmos.Graph.create(c[d]);
    return c
}, Desmos.Offline.prototype.saveGraphs = function (a) {
    var b;
    if (!this.isSupported()) return;
    if (!a) return;
    b = a.getPath("graphs.content"), localStorage["graphs_" + a.email] = JSON.stringify(b)
}, Desmos.Offline.prototype.isOutOfSync = function (a) {
    return this.didLogoutFail() || !this.isQueueEmpty(a)
}, Desmos.Offline.prototype.isQueueEmpty = function (a) {
    var b;
    return this.isSupported() ? a ? (b = localStorage["ajax_" + a.email], b = b ? b : "[]", b.length <= 2) : !0 : !0
}, Desmos.Offline.prototype.getQueuedAjax = function (a) {
    var b;
    return this.isSupported() ? a ? (b = localStorage["ajax_" + a.email], JSON.parse(b ? b : "[]")) : [] : []
}, Desmos.Offline.prototype.setQueuedAjax = function (a, b) {
    if (!this.isSupported()) return;
    if (!a) return "";
    localStorage["ajax_" + a.email] = JSON.stringify(b)
}, Desmos.Offline.prototype.peekFirstQueuedAjax = function (a) {
    var b = this.getQueuedAjax(a);
    return b[0]
}, Desmos.Offline.prototype.shiftFirstQueuedAjax = function (a) {
    var b = this.getQueuedAjax(a),
        c = b.shift();
    return this.setQueuedAjax(a, b), c
}, Desmos.Offline.prototype.addAjaxToQueue = function (a, b, c) {
    var d;
    if (!this.isSupported()) return;
    if (!a) return;
    d = this.getQueuedAjax(a), d.push({
        url: b,
        data: c
    }), this.setQueuedAjax(a, d)
};;
window.LOAD_DATA = $("body").data("load-data");;
var IS_IE8 = navigator.userAgent.match(/MSIE 8.0/i) !== null,
    IS_IE9 = navigator.userAgent.match(/MSIE 9.0/i) !== null,
    IS_IE = navigator.userAgent.match(/MSIE/i) !== null,
    IS_IPAD = navigator.userAgent.match(/iPad/i) !== null,
    IS_OPERA_LT_12 = function () {
        if (!navigator.userAgent.match(/OPERA/i)) return !1;
        var a = navigator.userAgent.match(/Version\/(\d+)/);
        if (!a || !a[1]) return !1;
        var b = parseInt(a[1], 10);
        return b < 12
    }(),
    CAPABLE_BROWSER = function () {
        var a = navigator.userAgent.match(/Android/i) !== null,
            b = navigator.userAgent.match(/Kindle/i) !== null || navigator.userAgent.match(/Silk/i) !== null,
            c = IS_IE8,
            d = !1;
        window.matchMedia ? (mq = window.matchMedia("(max-device-width:480px)"), mq.matches && (d = !0)) : a && (d = !0);
        var e = document.createElement("canvas"),
            f = !! e.getContext && !! e.getContext("2d");
        return f && !d && !b
    }(),
    Browser = {};
Browser.hasWebWorkers = function () {
    return "worker" in window
}, Browser.isTouch = function () {
    return "ontouchstart" in window
}, Browser.mousedown = function () {
    return Browser.isTouch() ? "touchstart" : "mousedown"
}, Browser.mouseup = function () {
    return Browser.isTouch() ? "touchend" : "mouseup"
}, Browser.mousemove = function () {
    return Browser.isTouch() ? "touchmove" : "mousemove"
}, Browser.click = function () {
    return Browser.isTouch() ? "tap" : "click"
}, Browser.getEventCoords = function (a) {
    return a ? "pageX" in a && "pageY" in a ? [{
        pageX: a.pageX,
        pageY: a.pageY
    }] : a.originalEvent && a.originalEvent.touches && a.originalEvent.touches.length ? a.originalEvent.touches : [{
        pageX: NaN,
        pageY: NaN
    }] : [{
        pageX: NaN,
        pageY: NaN
    }]
};;
Browser.isTouch() && ($.fn.tipsy = function () {
    return !1
});;
Desmos.Transforms = {}, Desmos.Transforms.asFloat = {
    from: function (a) {
        return parseFloat(a)
    },
    to: function (a) {
        return String(a)
    }
};;
(function () {
    var a, b = {},
        c = {},
        d = {};
    Desmos.TimerModules = {}, Desmos.TimerModules.add = function (a, c) {
        b[a] = c
    }, Desmos.TimerModules.load = function (a) {
        b[a] && (c[a] = b[a].apply(this, Array.prototype.slice.call(arguments, 1)), c[a] && (d[a] = c[a]))
    }, a = function () {
        for (var b in d) d.hasOwnProperty(b) && d[b]();
        setTimeout(a, 100)
    }, a()
})();;
(function () {
    var a = $("<div style='overflow-y:scroll'></div>").appendTo("body"),
        b = $("<div></div>").appendTo(a),
        c = a.width() - b.width(),
        d = 354 - c;
    a.remove(), $("<style>.exppanel-overflows-y.exppanel-overflows-x .expressionlist{width:" + d + "px;}</style>").appendTo("body")
})(), Desmos.TimerModules.add("expressions.overflows", function (a) {
    var b = null,
        c = 0,
        d = !1,
        e = function () {
            var a = $("#exppanel .expressionitem.selected"),
                e = a.length ? a[0] : null;
            e && e != b ? (c = (new Date).getTime(), d && (a = $())) : e && (new Date).getTime() - 500 < c && d && (a = $()), b = e, a.length && (d = !1);
            var f = a.find(".main"),
                g = $("body"),
                h = !1,
                g;
            if (f.length && a.length) {
                var i = f.position().left + f.innerWidth(),
                    j = a.position().left + a.width();
                h = i > j
            }
            typeof grapher != "undefined" && grapher && grapher.tracing && (h = !1);
            if (h && !g.hasClass("exppanel-overflows-x")) {
                var k = $("#exppanel"),
                    l = $("#exppanel .expressionlist"),
                    m = k.height() < l.height();
                g.toggleClass("exppanel-overflows-y", m), g.addClass("exppanel-overflows-x"), $("#exppanel-ember").addClass("jump-to-top")
            } else if (!h && g.hasClass("exppanel-overflows-x")) {
                var k = $("#exppanel"),
                    n = k.scrollTop();
                g.removeClass("exppanel-overflows-x"), $("#exppanel-ember").removeClass("jump-to-top"), $.browser.msie || k.scrollTop(0), k.scrollTop(n)
            }
        };
    return a.addObserver("list.@each.selected", function () {
        b = null, e()
    }), a.addObserver("delayNextExpansion", function () {
        d = !0
    }), e
});;
Desmos.TimerModules.add("expressions.ensurevisible", function (a) {
    var b = function () {
            $("#exppanel").scrollVisible($("#exppanel .expressionitem.selected"), 0, -50)
        };
    $(document).on("keypress", "#exppanel", b), a.addObserver("list.@each.selected", function () {
        Ember.run.schedule("destroy", b)
    })
});;
Desmos.TimerModules.add("expressions.renderviewport", function () {
    var a = 0,
        b = 0,
        c = 0,
        d = 0,
        e = null,
        f = null,
        g = function (a, b) {
            var c = Desmos.expressions.expressionAtPoint(5, e),
                d = Desmos.expressions.expressionAbovePoint(5, e + b);
            return c && d ? (c = c.get("index"), d = d.get("index"), Desmos.expressions.getItemsByIndexRange(c, d)) : []
        },
        h = function () {
            var a = $("#exppanel");
            if (!a.length) return;
            var h = a.scrollTop(),
                i = a.height();
            e == null && (e = a.offset().top), f == null && (f = a.offset().left);
            if (h == d && i == c) {
                var j = (new Date).getTime();
                if (b == 0) b = (new Date).getTime();
                else if (!(j - b <= 300)) {
                    var k = g(a, i);
                    for (var l = 0; l < k.length; l++) {
                        var m = k[l];
                        if (m.get("renderShell")) {
                            m.set("renderShell", !1);
                            break
                        }
                    }
                }
            } else d = h, c = i, b = 0
        };
    return h
});;
Desmos.TimerModules.add("expressions.dragdrop", function (a) {
    var b = null,
        c = null,
        d = null,
        e = null,
        f = function () {
            if (b) return;
            b = c, d = null, e = parseInt(c.attr("index")), $("#exppanel").addClass("dragging")
        },
        g = function (c) {
            if (!b) return;
            $("#exppanel").removeClass("dragging");
            var f = b.emberView();
            f && f.setPath("expression.dragging", !1), c && isNumber(d) && isNumber(e) && (d < e ? (a.moveItemTo(e, d), a.setSelected(d)) : e < d ? (a.moveItemTo(e, d - 1), a.setSelected(d - 1)) : a.setSelected(e)), b = null, d = null
        },
        h = [],
        i = function () {
            var b = $("#exppanel");
            if (!b) return;
            var c = $.mouse.pageX,
                e = $.mouse.pageY,
                f = 0,
                g = b.offset().top,
                i = b.innerHeight() + g,
                j = 0,
                k = null,
                l = !0,
                m, n = null;
            $.mouse.pageY < g ? j = $.mouse.pageY - g : $.mouse.pageY > i && (j = $.mouse.pageY - i), j = a.getPath("list.length") * j / 30;
            var o = j,
                p = b.scrollTop();
            j && (b.scrollTop(p + j), b.scrollTop() == p && (j = 0)), j < 0 ? (k = Desmos.expressions.expressionAbovePoint(f + 5, g, !0), l = !1) : j > 0 ? k = Desmos.expressions.expressionAbovePoint(f + 5, i, !0) : o < 0 ? k = $("#exppanel .expressionitem[index=0]") : o > 0 ? (k = $("#exppanel .expressionitem[index=" + (a.getPath("list.length") - 1) + "]"), l = !1) : (k = Desmos.expressions.expressionAbovePoint(f + 5, e, !0), k.length && (n = {
                top: k.offset().top,
                height: k.innerHeight()
            }, Math.abs(e - n.top) > Math.abs(e - (n.top + n.height)) && (l = !1))), k.length ? (d = parseInt(k.attr("index")), m = k.position().top, l || (m += 1 + (n ? n.height : k.innerHeight()), d++)) : d = null, d !== null ? $("#expressionDropLine").css("top", m + "px") : $("#expressionDropLine").css("top", "-50px");
            var q = (new Date).getTime();
            h.push(q);
            if (h.length > 1) {
                var r = h.length - 2,
                    s = h[r];
                h[r] = q - s
            }
            h.length > 30 && (h = [])
        },
        j = function () {
            c = $("#exppanel .expressionitem.dragging"), c.length ? b ? $.mouse.down ? i() : g(!0) : (f(), i()) : g(!1)
        };
    return j
});;
(function () {
    Desmos.ExpressionErrorView = Ember.View.extend({
        templateName: "expression_error",
        onSelectedChange: function () {
            this.getPath("expression.selected") || this.setPath("expression.userRequestedError", !1)
        }.observes("expression.selected")
    })
})();;
(function () {
    Desmos.ExpressionIconView = Ember.View.extend({
        templateName: "expression_icon",
        tagName: "span",
        init: function () {
            this._super(), this.colorThumb = new ColorThumbnail(28, 26)
        },
        didInsertElement: function () {
            this.colorThumb.instantiate(this.$(".thumb .graphic"))
        },
        waitingShown: function () {
            return this.getPath("expression.status") === "waiting"
        }.property("expression.status"),
        busyShown: function () {
            return this.getPath("expression.status") === "busy"
        }.property("expression.status"),
        errorShown: function () {
            return this.get("error") && this.get("errorStable")
        }.property("error", "errorStable"),
        unGraphable: function () {
            return !this.getPath("expression.isGraphable")
        }.property("expression.isGraphable"),
        graphDisabled: function () {
            return this.getPath("expression.isGraphable") && !this.getPath("expression.shouldGraph")
        }.property("expression.shouldGraph", "expression.isGraphable"),
        onToggleGraphed: function (a) {
            var b, c = !this.getPath("expression.shouldGraph");
            if (this.getPath("expression.error")) {
                b = !this.getPath("expression.userRequestedError"), this.setPath("expression.userRequestedError", b);
                return
            }
            a.handle(), a.preventDefault(), this.setPath("expression.userRequestedGraphing", c ? "always" : "never")
        },
        tooltip: function () {
            var a = this.getPath("expression.isGraphable"),
                b = this.getPath("expression.shouldGraph"),
                c = this.getPath("expression.showError"),
                d = this.getPath("expression.error"),
                e = this.getPath("expression.showSlider");
            return d && c ? "click to hide error" : d && !c ? "click to show error" : a && b ? "click to turn off this line" : a && !b ? "click to turn on this line" : e ? "You've made a slider! Try: y = " + this.getPath("expression.dependent") + "*x" : ""
        }.property("expression.error", "expression.shouldGraph", "expression.isGraphable", "expression.showError", "expression.showSlider"),
        onDisplayChange: function () {
            var a, b, c, d, e;
            if (!this.get("expression")) return;
            a = !1, b = !1, c = this.getPath("expression.formula"), c ? c.expression && c.isPointList() ? (a = !0, b = !0) : b = c.get_operator() : b = "=", d = this.getPath("expression.error") ? !0 : !1, this.getPath("expression.isEmpty") && (d = !1), d !== this.get("error") ? (this.set("errorStable", !1), this.__errorTime = (new Date).getTime(), e = this, setTimeout(function () {
                e.onDisplayChange()
            }, 100)) : this.__errorTime + 500 < (new Date).getTime() ? this.set("errorStable", !0) : this.get("errorStable") || (e = this, setTimeout(function () {
                e.onDisplayChange()
            }, 100)), this.set("error", d), d || (!c || !b ? (this.colorThumb.pointplot = !1, this.colorThumb.dotted = !1, this.colorThumb.fill = !1) : a ? (this.colorThumb.pointplot = !0, this.colorThumb.dotted = !1, this.colorThumb.fill = !1) : (this.colorThumb.pointplot = !1, this.colorThumb.fill = b != "=", this.colorThumb.dotted = b.indexOf("=") == -1)), this.colorThumb.color = this.getPath("expression.color"), this.colorThumb.redraw()
        }.observes("expression.color", "expression.formula")
    })
})();;
(function () {
    Desmos.ExpressionColorsView = Ember.View.extend({
        templateName: "expression_colors",
        _colors: ["#C0504D", "#8064A2", "#F79646", "#000000", "#4F81BD", "#9BBB59"],
        colors: function () {
            var a, b, c, d = [];
            for (a = 0; a < this._colors.length; a++) b = this.getPath("expression.color"), c = this._colors[a], d.push({
                color: c,
                style: "background:" + c,
                selected: c === b
            });
            return d
        }.property("expression.color"),
        onSelectedChange: function () {
            this.getPath("expression.selected") || this.setPath("expression.showColors", !1)
        }.observes("expression.selected"),
        onSelectColor: function (a) {
            var b = $(a.target).attr("color");
            this.setPath("expression.color", b)
        }
    })
})();;
Desmos.TimerModules.add("expressions.togglekeypad", function (a, b) {
    var c = function () {
            b.setIsBlurred(!a.getSelected())
        };
    c(), a.addObserver("list.@each.selected", c)
});;
(function (a) {
    Desmos.Transaction = function () {
        this.undo = Desmos.Transaction.noop, this.redo = Desmos.Transaction.noop
    }, Desmos.Transaction.create = function (a) {
        var b, c = new Desmos.Transaction;
        for (b in a) {
            if (!a.hasOwnProperty(b)) continue;
            c[b] = a[b]
        }
        return c
    }, Desmos.Transaction.noop = function () {}, Desmos.Transaction.CAUSE_OF_CHANGE = 1, Desmos.Transaction.RESPONSE_TO_CHANGE = 2, Desmos.Transaction.BATCHED_CHANGE = 3, Desmos.UndoRedoView = a.View.extend({
        tagName: "span",
        undos: a.ArrayController.create({
            content: []
        }),
        redos: a.ArrayController.create({
            content: []
        }),
        undoDisabled: function () {
            return this.getPath("undos.length") == 0
        }.property("undos.length"),
        redoDisabled: function () {
            return this.getPath("redos.length") == 0
        }.property("redos.length"),
        clear: function () {
            this.undos.clear(), this.redos.clear(), this.__batchableTransaction = null
        },
        undo: function () {
            var a;
            if (this.get("undoDisabled")) return;
            this.__batchableTransaction = null, a = this.undos.popObject(), this.applyTransaction(a, !0), this.redos.pushObject(a)
        },
        redo: function () {
            var a;
            if (this.get("redoDisabled")) return;
            this.__batchableTransaction = null, a = this.redos.popObject(), this.applyTransaction(a), this.undos.pushObject(a)
        },
        __timeOfLastChange: -1,
        markAsChanged: function () {
            this.__timeOfLastChange = (new Date).getTime()
        },
        timeSinceChange: function () {
            return this.__timeOfLastChange === -1 ? -1 : (new Date).getTime() - this.__timeOfLastChange
        },
        __isApplyingTransaction: 0,
        isApplyingTransaction: function () {
            return !!this.__isApplyingTransaction
        },
        applyTransaction: function (b, c) {
            var d, e;
            this.__isApplyingTransaction++, d = b.__batched__ ? b.__batched__ : [];
            if (c) {
                b.undo();
                for (e = 0; e < d.length; e++) d[e].undo()
            } else {
                b.redo();
                for (e = 0; e < d.length; e++) d[e].redo()
            }
            a.run.sync(), this.__isApplyingTransaction--, this.markAsChanged()
        },
        addTransaction: function (a) {
            var b, c, d;
            if (a.type === Desmos.Transaction.BATCHED_CHANGE) {
                if (!this.__batchableTransaction) return;
                b = this.__batchableTransaction.__batched__, b || (b = this.__batchableTransaction.__batched__ = []), b.push(a), this.applyTransaction(a);
                return
            }
            if (this.isApplyingTransaction()) return;
            a.type === Desmos.Transaction.CAUSE_OF_CHANGE && this.applyTransaction(a);
            if (a.ensureChangeOccured && a.ensureChangeOccured()) return;
            this.markAsChanged(), this.redos.clear(), c = a.compressWith, d = this.__batchableTransaction ? this.__batchableTransaction.compressWith : null, !c || c != d ? (this.undos.pushObject(a), this.__batchableTransaction = a) : this.__batchableTransaction.redo = a.redo
        }
    }), Desmos.undoRedo = Desmos.UndoRedoView.create(), $(function () {
        Desmos.undoRedo.appendTo("#header")
    })
})(Ember);;

function Evaluator(a, b) {
    var c, d, e = this;
    this.degreeMode = !1, this.expressions = {}, this.queue = {}, this.pool = [], this.env = new Environment, this.env_version = 1, this.env_expressions = {}, this.env_options = {}, this.add = function (a) {
        this.expressions[a.id] = Ember.copy(a, !0)
    }, this.setCompleteState = function (a) {
        var b;
        this.clear();
        for (b = 0; b < a.length; b++) this.add(a[b]);
        this.update()
    }, this.updateJobStatus = function (a) {
        var b, c, d = {};
        d.waiting = a in this.queue;
        for (b = 0; b < this.pool.length; b++) {
            c = this.pool[b].job;
            if (c && c.id == a) {
                d.busy = !0;
                break
            }
        }
        $(this).trigger("status", [a, d])
    }, this.remove = function (a) {
        delete this.queue[a], delete this.expressions[a], this.cancelGraph(a)
    }, this.clear = function () {
        this.cancelAllGraphs(), this.queue = {}, this.expressions = {}, this.env = new Environment, this.env_version++, this.env_expressions = {}, this.env_options = {}
    }, this.cancelAllGraphs = function () {
        var a, b, c, d;
        this.queue = {}, a = [];
        for (b = 0; b < this.pool.length; b++) {
            c = this.pool[b];
            if (!c) continue;
            d = c.job;
            if (!d) continue;
            d.id && a.push(d.id)
        }
        for (b = 0; b < a.length; b++) this.cancelGraph(a[b])
    }, this.graph = function (a, b, c, d) {
        return this.expressions.hasOwnProperty(a) ? (this.queue[a] = {
            id: a,
            window: b,
            priority: c,
            poi: d
        }, this.updateJobStatus(a), this.allocateJob(), !0) : !1
    }, this.cancelGraph = function (a, b) {
        var c;
        for (c = 0; c < this.pool.length; c++) {
            worker = this.pool[c], job = worker.job;
            if (job && job.id == a) {
                worker.terminate(), $(this).trigger("cancelled", a), this.pool[c] = worker = this.createWorker(), b ? (this.queue[a] && (this.queue[a].priority += 10), this.allocateJob()) : delete this.queue[a], this.updateJobStatus(a);
                return
            }
        }
    }, this.getDependents = function (a) {
        try {
            return this.env.getDependents(a)
        } catch (b) {
            return null
        }
    }, c = function (a, b, c) {
        var d = b[a];
        return d.formula.isPointList() ?
        function () {
            var a = c.evaluate(d.formula, []);
            return a && a.length && Object.prototype.toString.call(a[0]) != "[object Array]" ? [a] : a
        } : d.formula.is_parametric() ?
        function (a) {
            return d.expr(a, !0)
        } : function (a) {
            return d.expr(a)
        }
    }, this.subExpressions = function (a) {
        var b, d, e = [],
            f = this.env.getGraphInfo(a);
        if (!f) return null;
        for (b = 0, d = f.length; b < d; b++) e[b] = c(b, f, this.env);
        return e
    }, this.restartStaleJobs = function () {
        var a, b, c, d = (new Date).getTime();
        for (a = 0; a < this.pool.length; a++) b = this.pool[a], b.job && d - b.startTime > 1e3 && (c = b.job.id, this.queue[c] && this.cancelGraph(c, !0))
    }, this.allocateJob = function () {
        var a, b, c, d, e = {},
            f = null,
            g = null;
        for (a = 0; a < this.pool.length; a++) f = this.pool[a].job, f ? e[f.id] = !0 : g = this.pool[a];
        f = null;
        if (!g) return;
        b = 0;
        for (c in this.queue) {
            d = this.queue[c];
            if (d.id in e) continue;
            f ? d.priority < b && (f = d, b = f.priority) : (f = d, b = f.priority)
        }
        if (!f) return;
        delete this.queue[f.id], g.job = f, g.startTime = (new Date).getTime(), g.env_version != this.env_version && (g.postMessage({
            cmd: "environment",
            expressions: this.env_expressions,
            options: this.env_options
        }), g.env_version = this.env_version), this.updateJobStatus(f.id), g.postMessage({
            cmd: "graph",
            id: f.id,
            window: f.window,
            poi: f.poi
        })
    }, this.setDegreeMode = function (a) {
        this.degreeMode = a, this.update()
    }, this.update = function () {
        var a, b, c;
        this.env_expressions = Ember.copy(this.expressions), this.env_options = {
            degree_mode: this.degreeMode
        }, this.env_version++, a = this.env, b = this.env = Environment.build(this.env_expressions, this.env_options), c = Environment.compare(a, b), $(this).trigger("change", c)
    }, this.onGraphResponse = function (a, b) {
        var c, d, e, f;
        a == window && (a = this.pool[0]), c = a.job.id, a.job = null, this.updateJobStatus(c), this.allocateJob();
        if (b && b.length > 0) {
            d = this.env.getGraphInfo(c);
            for (e = 0; e < b.length; e++) b[e].expr = d[b[e].expr_i].expr
        }
        f = 0;
        for (e in this.queue) f++;
        $(this).trigger("alldone"), $(this).trigger("graph", [c, b])
    }, this.onEnvironmentResponse = function () {}, this.createWorker = function () {
        var a;
        if (this.useWorkers) a = new Worker(b);
        else {
            if (this.pool.length) return this.pool[0];
            a = new EvalWorker
        }
        return a.onmessage = function (a) {
            switch (a.data.cmd) {
            case "graph":
                e.onGraphResponse(this, a.data.result);
                break;
            case "environment":
                e.onEnvironmentResponse(this, a.data.result)
            }
        }, a
    }, this.useWorkers = a > 0 && window.Worker, this.useWorkers ? a = Math.max(1, a) : a = 1;
    for (d = 0; d < a; d++) this.pool.push(this.createWorker());
    setInterval(function () {
        e.restartStaleJobs()
    }, 333), setInterval(function () {
        e.allocateJob()
    }, 50)
};;

function Grapher(a) {
    var b, c, d, e = this;
    this.div = a, this.inner = new GraphManager(a, Desmos.graphSettings, function () {
        $(e).callLater(e.recomputeAll, 250)
    }), this.__redrawEnabled = !0, this.settings = this.inner.settings, this.screen = this.inner.screen, this.viewport = this.inner.viewport, this.list = {}, this.colors = {}, this.d_colors = {}, this.updates = {}, this.processing = {}, this.valids = {}, this.graphed = {}, this.finished_before = {}, this.opened_poi = {}, this.__allowProcessingGraphic = !0, setInterval(function () {
        e.updateProcessingGraphic()
    }, 100), this.__showExtrema = !1, this.__showZeros = !1, this.__showJumps = !1, this.__showIntercepts = !1, this.__showIntersections = !1, this.inner.baseLayer.redraw(), $(document).bind(Browser.mousedown(), function (a) {
        var b, c, d, f, g, h, i, j, k;
        if ($(a.target).attr("id") !== "exppanel") return;
        b = e.inner.traceLayer, c = b.offset(), d = c.left, f = c.top, g = d + b.width(), h = f + b.height(), i = Browser.getEventCoords(a)[0], j = i.pageX, k = i.pageY;
        if (j < d || j > g || k < f || k > h) return;
        a.target = b[0], b.trigger(a)
    }), this.inner.traceLayer.bind(Browser.mousedown(), function (a) {
        e.onTraceDown(a)
    }), Browser.isTouch() || $(document).mousemove(function (a) {
        e.updateHoveredPOI(a)
    }), this.inner._dragStateUpdate = function () {
        $(e).trigger("dragStateUpdate"), e.redrawPOI()
    }, this.inner.traceLayer.append("<div class='processinglayer'></div>"), this.dot = this.inner.poiLayer.append("<div class='tracept temp'><div class='pt'></div><div class='label'></div></div>").find(".tracept.temp"), this.dot.remove(), b = this.inner, c = function () {
        b.baseLayer.redraw()
    }, d = function () {
        b.redrawAll()
    }, this.settings.addObserver("showLabels", c), this.settings.addObserver("showAxes", c), this.settings.addObserver("showGrid", c), this.settings.addObserver("xAxisPiLabels", c), this.settings.addObserver("yAxisPiLabels", c), this.settings.addObserver("connectedMode", d)
}
Grapher.prototype.updateHoveredPOI = function (a) {
    var b, c = $(a.target),
        d = [];
    this.inner.poiLayer.find(".tracept.hovered").removeClass("hovered"), this.inner.traceLayer.removeClass("mouse-over-poi"), !this.tracing && !this.viewport.get("isTransient") && c.closest(this.div).length && (b = this.getPOIUnderMouse(a, 8, !1), b.length && (b[0].addClass("hovered"), this.inner.traceLayer.addClass("mouse-over-poi")))
}, Grapher.prototype.getPOIUnderMouse = function (a, b, c) {
    var d = Browser.getEventCoords(a)[0],
        e = [];
    return b = b || 8, b *= b, this.inner.poiLayer.find(".tracept.poi").each(function () {
        var a = $(this),
            f = a.offset(),
            g = (f.left - d.pageX) * (f.left - d.pageX) + (f.top - d.pageY) * (f.top - d.pageY);
        g < b ? (b = g, e = [a]) : g == b && c && e.push(a)
    }), e
}, Grapher.prototype.openPOI = function (a) {
    var b, c, d, e, f, g, h;
    a.addClass("opened"), b = a.attr("gid"), c = a.data("pt"), d = c.type, d == POI_INTERSECTION ? (g = a.attr("gid2"), e = this.opened_poi[b], e || (e = this.opened_poi[b] = {}), f = e[d], f || (f = e[d] = {}), h = f[g], h || (h = f[g] = []), h.push(c), e = this.opened_poi[g], e || (e = this.opened_poi[g] = {}), f = e[d], f || (f = e[d] = {}), h = f[b], h || (h = f[b] = []), h.push(c)) : (e = this.opened_poi[b], e || (e = this.opened_poi[b] = {}), f = e[d], f || (f = e[d] = []), f.push(c))
}, Grapher.prototype.closePOI = function (a) {
    var b, c, d, e, f, g, h, i, j;
    a.removeClass("opened"), b = a.attr("gid"), c = a.data("pt"), d = c.type;
    if (d == POI_INTERSECTION) {
        j = a.attr("gid2"), e = this.opened_poi[b];
        if (e) {
            f = e[d];
            if (f) {
                g = f[j];
                if (g) {
                    h = [];
                    for (i = 0; i < g.length; i++) g[i] != c && h.push(g[i]);
                    f[j] = h
                }
            }
        }
        e = this.opened_poi[j];
        if (e) {
            f = e[d];
            if (f) {
                g = f[b];
                if (g) {
                    h = [];
                    for (i = 0; i < g.length; i++) g[i] != c && h.push(g[i]);
                    f[b] = h
                }
            }
        }
    } else {
        e = this.opened_poi[b];
        if (!e) return;
        f = e[d];
        if (!f) return;
        h = [];
        for (i = 0; i < f.length; i++) f[i] != c && h.push(f[i]);
        e[d] = h
    }
}, Grapher.prototype.closeAllPOI = function (a) {
    var b;
    poiLayer.find("[gid=" + a + "],[gid2=" + a + "]").removeClass("opened"), b = this.opened_poi[a];
    if (!b) return;
    t_poi = b[POI_INTERSECTION], !t_poi, delete this.opened_poi[a]
}, Grapher.prototype.closeAllPOIType = function (a) {
    var b, c;
    this.inner.poiLayer.find("[poi_type=" + a + "]").removeClass("opened");
    for (c in this.opened_poi) b = this.opened_poi[c], delete b[a]
}, Grapher.prototype.onTraceDown = function (a) {
    var b, c, d, e, f = null,
        g = this.getPOIUnderMouse(a, Browser.isTouch() ? 20 : 8, !0);
    if (g.length) {
        c = !0;
        for (b = 0; b < g.length; b++) c = c && !g[b].hasClass("opened");
        for (b = 0; b < g.length; b++) c ? this.openPOI(g[b]) : this.closePOI(g[b]), c || g[b].removeClass("hovered");
        a.stopPropagation(), this.stopTracing();
        return
    }
    if (this.tracing) {
        this.stopTracing();
        return
    }
    f = this.findClosestGraph(a);
    if (!f) return;
    a.stopPropagation(), a.preventDefault(), d = this.snapCleanPoint(a, f.graph), this.plotTracedPoint(d, this.colors[f.graphId]), this.tracing = {
        graphId: f.graphId,
        evt: a
    }, $(this).trigger("traceDown", f.graphId), e = this, $(document).on(Browser.mousemove() + ".tracing", function (a) {
        e.onTraceMove(a)
    }), $(document).on(Browser.mouseup() + ".tracing", function () {
        e.stopTracing()
    })
}, Grapher.prototype.stopTracing = function () {
    this.tracing = null, this.plotTracedPoint(null), $(document).off(Browser.mousemove() + ".tracing"), $(document).off(Browser.mouseup() + ".tracing")
}, Grapher.prototype.updateTrace = function () {
    var a, b, c, d, e, f, g;
    if (!this.tracing) return;
    a = null, b = Infinity, c = this.tracing.evt, d = this.tracing.graphId, e = this.list[d];
    if (!e || !c) {
        this.stopTracing();
        return
    }
    for (f = 0; f < e.length; f++) g = this.snapCleanPoint(c, e[f]), g && g.distance < b && (a = g, b = g.distance);
    this.plotTracedPoint(a)
}, Grapher.prototype.onTraceMove = function (a) {
    this.tracing.evt = a, $(this).trigger("traceMove", [this.tracing.graphId, this.pointUnderMouse(a)]), this.updateTrace()
}, Grapher.prototype.getSegments = function (a) {
    return this.inner.getSegments(a)
}, Grapher.prototype.snapCleanPoint = function (a, b) {
    var c, d, e = this.pointUnderMouse(a),
        f = this.screen.width / (this.viewport.maxx - this.viewport.minx),
        g = this.screen.height / (this.viewport.maxy - this.viewport.miny),
        h = Infinity,
        i = Grapher.getClosestPt(b, e.x, e.y, f, g, h);
    return !i || isNaN(i.x) || isNaN(i.y) ? null : (c = f * f, d = g * g, i = this.getPointLabel(i, b), i && (i.distance = Math.sqrt((e.x - i.x) * (e.x - i.x) * c + (e.y - i.y) * (e.y - i.y) * d)), i)
}, Grapher.prototype.getPointLabel = function (a, b) {
    var c, d, e, f = b.expr,
        g = {},
        h = this.screen.width / (this.viewport.maxx - this.viewport.minx),
        i = this.screen.height / (this.viewport.maxy - this.viewport.miny),
        j = {
            x: h,
            y: i
        },
        k = {
            x: Math.max(0, Math.floor(4.5 - Math.log(this.viewport.maxx - this.viewport.minx) / Math.LN10)),
            y: Math.max(0, Math.floor(4.5 - Math.log(this.viewport.maxy - this.viewport.miny) / Math.LN10))
        };
    switch (b.graphMode) {
    case GRAPHMODE_Y:
        c = "x", d = "y";
        break;
    case GRAPHMODE_XYPOINT:
        c = "x", d = "y";
        break;
    case GRAPHMODE_X:
        c = "y", d = "x";
        break;
    default:
        return null
    }
    return e = EvalWorker.isSpecialNumber(a[c], 1e-7), e ? (g[c] = e.num, g[c + "_label"] = e.str) : (g[c] = Number(a[c].toFixed(k[c])), g[c + "_label"] = g[c].toString()), e = EvalWorker.isSpecialNumber(a[d], 1e-7), e ? (g[d] = e.num, g[d + "_label"] = e.str) : (g[d] = Number(a[d].toFixed(k[d])), g[d + "_label"] = g[d].toString()), isNaN(f(g[c])) && b.graphMode !== GRAPHMODE_XYPOINT && (g.classes = ["hole"], g[d + "_label"] = "undefined"), g
}, Grapher.debug_colors = !1, Grapher.COLORS = ["rgba(0, 0, 0, 0.7)", "rgba(255, 0, 0, 0.7)", "rgba(0, 255, 0, 0.7)", "rgba(0, 0, 255, 0.7)"], Grapher.prototype.onGraph = function (a, b) {
    var c;
    this.finished_before[a] = !0, this.list[a] = b, this.d_colors[a] = (this.d_colors[a] + 1) % Grapher.COLORS.length, Grapher.debug_colors ? c = Grapher.COLORS[this.d_colors[a]] : this.colors[a] ? c = this.colors[a] : c = "#000", this.inner.setColor(a, c, c), this.inner.setSegments(a, b), this.inner.show(a), this.inner.redraw(a), this.showPOI(a), this.updateTrace()
}, Grapher.prototype.screenshot = function (a, b, c, d, e) {
    return d = !! d, this.inner.screenshot(a, b, c, d, e)
}, Grapher.prototype.getSize = function () {
    return {
        width: this.screen.width,
        height: this.screen.height
    }
}, Grapher.prototype.getViewport = function () {
    return {
        xmin: this.viewport.minx,
        xmax: this.viewport.maxx,
        ymin: this.viewport.miny,
        ymax: this.viewport.maxy
    }
}, Grapher.prototype.setViewport = function (a) {
    if (a.xmin == this.viewport.minx && a.ymin == this.viewport.miny && a.xmax == this.viewport.maxx && a.ymax == this.viewport.maxy) return;
    a.xmin < a.xmax && a.ymin < a.ymax && (Ember.beginPropertyChanges(), this.viewport.set("minx", a.xmin), this.viewport.notifyPropertyChange("minx"), this.viewport.set("miny", a.ymin), this.viewport.notifyPropertyChange("miny"), this.viewport.set("maxx", a.xmax), this.viewport.notifyPropertyChange("maxx"), this.viewport.set("maxy", a.ymax), this.viewport.notifyPropertyChange("maxy"), Ember.endPropertyChanges(), this.recomputeAll(), this.render())
}, Grapher.REDRAW = 1, Grapher.VALID = 2, Grapher.prototype.invalidate = function (a) {
    delete this.valids[a]
}, Grapher.prototype.add = function (a, b) {
    this.graphed[a] = !0, this.list[a] || (this.list[a] = null, this.d_colors[a] = 1), this.colors[a] != b && (this.colors[a] = b, this.valids[a] == Grapher.VALID && (this.valids[a] = Grapher.REDRAW)), this.inner.allocate(a), this.valids[a] != Grapher.VALID ? (this.updates[a] = !0, $(this).callLater(this.update, 1)) : (this.inner.show(a), this.showPOI(a))
}, Grapher.prototype.clear = function () {
    this.graphed = {}, this.finished_before = {}, this.updates = {}, this.valids = {}, this.list = {}, this.processing = {}, this.tracing && this.stopTracing(), this.inner.poiLayer.find(".poi").remove(), this.inner.clear()
}, Grapher.prototype.remove = function (a) {
    delete this.graphed[a], delete this.finished_before[a], delete this.updates[a];
    if (!this.inner.getGraphCanvas(a) || this.inner.isHidden(a)) return;
    this.tracing && this.tracing.graphId == a && this.stopTracing(), this.valids[a] = Grapher.VALID, this.inner.hide(a, !this.__redrawEnabled), this.hidePOI(a)
}, Grapher.prototype.recomputeAll = function () {
    var a;
    if (!this.__allowRecompute) return;
    this.valids = {};
    for (a in this.graphed) this.updates[a] = !0;
    this.update()
}, Grapher.prototype.update = function () {
    var a, b, c, d = {
        screen: this.screen,
        viewport: {
            x: [this.viewport.minx, this.viewport.maxx],
            y: [this.viewport.miny, this.viewport.maxy]
        }
    };
    for (a in this.updates) {
        b = this.valids[a], c = this.finished_before[a] ? 1 : 0;
        if (b == Grapher.VALID) continue;
        b == Grapher.REDRAW ? (this.valids[a] = Grapher.VALID, this.onGraph(a, this.list[a])) : (this.valids[a] = Grapher.VALID, $(this).trigger("graph", [a, d, c]))
    }
    this.updates = {}
}, Grapher.prototype.redrawEnabled = function (a) {
    this.__redrawEnabled = a, a && this.render()
}, Grapher.prototype.updateNow = function () {
    $(this).callNow(this.update)
}, Grapher.prototype.render = function () {
    this.inner.redrawAll()
}, Grapher.prototype.onStatus = function (a, b) {
    b.busy ? this.processing[a] = (new Date).getTime() : delete this.processing[a]
}, Grapher.prototype.updateProcessingGraphic = function () {
    var a, b, c;
    if (this.__allowProcessingGraphic) {
        a = 250, b = (new Date).getTime();
        for (c in this.processing) if (this.processing[c] + a < b) {
            this.div.addClass("processing", !0);
            return
        }
    }
    this.div.removeClass("processing")
}, Grapher.prototype.poiSettings = function () {
    var a = {};
    return a.settings = (this.__showExtrema && PLOT_EXTREMA) | (this.__showZeros && PLOT_ZEROS) | (this.__showIntersections && PLOT_INTERSECTIONS) | (this.__showJumps && PLOT_JUMPS) | (this.__showIntercepts && PLOT_INTERCEPTS), this.__showIntersections && (a.graphed = this.graphed), a
}, Grapher.prototype.showAllPOI = function (a) {
    var b, c = ["showExtrema", "showZeros", "showIntersections", "showIntercepts"];
    if (a === undefined) {
        for (b = 0; b < c.length; b++) if (this[c[b]]()) return !0;
        return !1
    }
    for (b = 0; b < c.length; b++) this[c[b]](a);
    this.recomputeAll()
}, Grapher.prototype.showExtrema = function (a) {
    if (a === undefined) return this.__showExtrema;
    this.__showExtrema != a && (this.__showExtrema = a, a || this.closeAllPOIType(POI_MIN))
}, Grapher.prototype.showZeros = function (a) {
    if (a === undefined) return this.__showZeros;
    this.__showZeros != a && (this.__showZeros = a, a || this.closeAllPOIType(POI_ZERO))
}, Grapher.prototype.showJumps = function (a) {
    if (a === undefined) return this.__showJumps;
    this.__showJumps != a && (this.__showJumps = a, a || this.closeAllPOIType(POI_JUMP))
}, Grapher.prototype.showIntercepts = function (a) {
    if (a === undefined) return this.__showIntercepts;
    this.__showIntercepts != a && (this.__showIntercepts = a, a || this.closeAllPOIType(POI_INTERCEPT))
}, Grapher.prototype.showIntersections = function (a) {
    if (a === undefined) return this.__showIntersections;
    this.__showIntersections != a && (this.__showIntersections = a, a || this.closeAllPOIType(POI_INTERSECTION))
}, Grapher.prototype.getState = function () {
    return {
        viewport: this.getViewport(),
        showLabels: this.settings.get("showLabels"),
        degreeMode: this.settings.get("degreeMode"),
        connectedMode: this.settings.get("connectedMode"),
        showGrid: this.settings.get("showGrid"),
        showAxes: this.settings.get("showAxes"),
        squareAxes: this.viewport.get("squareAxes"),
        labelXMode: this.settings.get("xAxisPiLabels") ? "pi" : "",
        labelYMode: this.settings.get("yAxisPiLabels") ? "pi" : ""
    }
}, Grapher.prototype.setState = function (a) {
    var b = function (a, b) {
            return a === undefined ? b : a
        };
    this.settings.set("showLabels", b(a.showLabels, !0)), this.settings.set("showGrid", b(a.showGrid, !0)), this.settings.set("showAxes", b(a.showAxes, !0)), this.viewport.set("squareAxes", b(a.squareAxes, !0)), this.settings.set("xAxisPiLabels", b(a.labelXMode, "") === "pi"), this.settings.set("yAxisPiLabels", b(a.labelYMode, "") === "pi"), this.settings.set("degreeMode", b(a.degreeMode, !1)), this.settings.set("connectedMode", b(a.connectedMode, !1)), "viewport" in a && this.setViewport(a.viewport)
}, Grapher.prototype.pointUnderMouse = function (a) {
    var b = Browser.getEventCoords(a)[0],
        c = b.pageX,
        d = b.pageY,
        e = this.div.offset(),
        f = this.viewport,
        g = this.screen;
    return c = (c - e.left) / g.width, d = (d - e.top) / g.height, {
        x: f.minx * (1 - c) + f.maxx * c,
        y: f.miny * d + f.maxy * (1 - d)
    }
}, Grapher.prototype.findClosestGraph = function (a) {
    var b, c, d, e, f = null,
        g = 18,
        h = null,
        i = this.pointUnderMouse(a);
    for (b in this.list) {
        if (this.inner.isHidden(b)) continue;
        c = this.list[b];
        if (!c || c.length <= 0) continue;
        for (d = 0; d < c.length; d++) e = this.snapCleanPoint(a, c[d]), e && e.distance < g && (g = e.distance, f = e, h = {
            graphId: b,
            subgraphIndex: d,
            graph: c[d]
        })
    }
    if (g < 18) return h
}, Grapher.prototype.createSinglePOI = function (a, b, c, d, e) {
    var f, g, h, i = "",
        j = this.getPointLabel({
            x: b,
            y: c
        }, e);
    j.type = a;
    switch (a) {
    case POI_ZERO:
        i = "zero";
        break;
    case POI_MIN:
        i = "min";
        break;
    case POI_MAX:
        i = "max";
        break;
    case POI_INTERCEPT:
        i = "intercept";
        break;
    case POI_JUMP:
        e.graphMode == GRAPHMODE_X ? (f = e.expr(j.y), isNaN(f) || Math.abs((j.x - f) / (j.y - c)) > 1e3 ? i = "jump hole" : i = "jump") : (g = e.expr(j.x), isNaN(g) || Math.abs((g - c) / (j.x - b)) > 1e3 ? i = "jump hole" : i = "jump")
    }
    return h = $("<div class='tracept poi " + i + "'><div class='pt'></div><div class='label'>" + j.x_label + ", " + j.y_label + "</div><div class='arrow'></div></div>"), h.css({
        left: this.inner.tmapx(b) + "px",
        top: this.inner.tmapy(c) + "px"
    }), h.data("pt", j), h.find(".pt").css({
        "border-color": d,
        "background-color": d
    }), h
}, Grapher.prototype.redrawPOI = function (a, b) {
    var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A = this.inner,
        B = A.poiLayer;
    if (a === undefined) B.find(".tracept.poi").each(function () {
        var a = $(this),
            b = a.data("pt");
        a.css({
            left: A.tmapx(b.x) + "px",
            top: A.tmapy(b.y) + "px"
        })
    });
    else if (b) {
        B.find("[gid=" + a + "],[gid2=" + a + "]").remove(), q = {}, q[POI_INTERSECTION] = {}, r = this.colors[a], s = this.list[a];
        if (!s || !s.length) return;
        for (n = 0; n < s.length; n++) {
            c = s[n].poi;
            for (o = 0; o < c.length; o += 3) t = c[o] == POI_MAX ? POI_MIN : c[o], d = this.createSinglePOI(c[o], c[o + 1], c[o + 2], r, s[n]).attr("gid", a).attr("poi_type", t), e = d.data("pt"), e.dom = d, e.type = t, B.append(d), q[t] ? q[t].push(e) : q[t] = [e];
            u = s[n].intersections;
            for (p in u) {
                c = u[p];
                for (o = 0; o < c.length; o += 2) d = this.createSinglePOI(POI_INTERSECTION, c[o], c[o + 1], "#AAA", s[n]).attr("gid", a).attr("gid2", p).attr("poi_type", POI_INTERSECTION), e = d.data("pt"), e.dom = d, e.type = POI_INTERSECTION, B.append(d), q[POI_INTERSECTION][p] ? q[POI_INTERSECTION][p].push(e) : q[POI_INTERSECTION][p] = [e]
            }
        }
        l = this.opened_poi[a], l || (l = {});
        for (v in l) {
            m = l[v];
            if (v == POI_INTERSECTION) for (p in m) {
                k = m[p], f = q[POI_INTERSECTION][p];
                if (!f) continue;
                for (n = k.length - 1; n >= 0; n--) {
                    i = k[n], g = Infinity, h = -1;
                    for (o = f.length - 1; o >= 0; o--) {
                        j = f[o];
                        if (!j) continue;
                        dis = (i.x - j.x) * (i.x - j.x) + (i.y - j.y) * (i.y - j.y), dis < g && (h = o, g = dis)
                    }
                    if (h != -1) {
                        f[h].dom.addClass("opened"), k[n] = f[h], w = this.opened_poi[p];
                        if (w) {
                            x = w[POI_INTERSECTION];
                            if (x) {
                                y = x[a];
                                if (y) for (z = y.length - 1; z >= 0; z--) y[z] == i && (y[z] = f[h])
                            }
                        }
                        f[h] = null
                    }
                }
            } else {
                f = q[v];
                if (!f) continue;
                for (n = m.length - 1; n >= 0; n--) {
                    i = m[n], g = Infinity, h = -1;
                    for (o = f.length - 1; o >= 0; o--) {
                        j = f[o];
                        if (!j) continue;
                        dis = (i.x - j.x) * (i.x - j.x) + (i.y - j.y) * (i.y - j.y), dis < g && (h = o, g = dis)
                    }
                    h != -1 && (f[h].dom.addClass("opened"), m[n] = f[h], f[h] = null)
                }
            }
        }
    } else B.find("[gid=" + a + "]").each(function () {
        var a = $(this),
            b = a.data("pt");
        a.css({
            left: A.tmapx(b.x) + "px",
            top: A.tmapy(b.y) + "px"
        })
    })
}, Grapher.prototype.showPOI = function (a) {
    this.redrawPOI(a, !0)
}, Grapher.prototype.hidePOI = function (a) {
    this.inner.poiLayer.find("[gid=" + a + "],[gid2=" + a + "]").remove()
}, Grapher.prototype.plotTracedPoint = function (a, b) {
    this.dot.removeClass(), this.dot.addClass("tracept temp"), !a || isNaN(a.x) ? this.dot.remove() : (this.inner.poiLayer.append(this.dot), this.dot.css({
        left: this.inner.mapx(a.x) + "px",
        top: this.inner.mapy(a.y) + "px"
    }), a.classes && this.dot.addClass(a.classes.join(" ")), b && this.dot.find(".pt").css({
        "border-color": b,
        "background-color": b
    }), this.dot.find(".label").html(a.x_label + ", " + a.y_label))
}, Grapher.getClosestPt = function (a, b, c, d, e, f) {
    var g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w;
    switch (a.graphMode) {
    case GRAPHMODE_Y:
        break;
    case GRAPHMODE_X:
        g = b, b = c, c = g, g = d, d = e, e = g;
        break;
    case GRAPHMODE_XYPOINT:
        return {
            x: a.segments[0][0],
            y: a.segments[0][1]
        };
    default:
        return null
    }
    h = a.expr, i = b, j = i - 3 / d, k = i + 3 / d, l = c, m = h(j), n = h(k), isNaN(m) || isNaN(n) ? o = i : (p = (n - m) / (k - j), o = p <= 1e-5 && p >= -0.00001 ? i : (l - m + p * j + i / p) / (p + 1 / p)), q = Grapher.fillHole(h, o, d, e, i, l), r = 10, s = 20, t = Math.sqrt(Math.pow((o - i) * d, 2) + Math.pow((q - l) * e, 2)), t > r ? (t -= r, u = Math.min(1, t / (s - r)), o = Grapher.getBetterX(i * u + o * (1 - u), 1 / d)) : o = Grapher.getBetterX(o, 1 / d), q = Grapher.fillHole(h, o, d, e, i, l), v = (o - i) * d, w = (q - l) * e, t = v * v + w * w, isNaN(t) && (t = Infinity), f || (f = 18);
    if (t > f * f) return null;
    switch (a.graphMode) {
    case GRAPHMODE_Y:
        return {
            x: o,
            y: q
        };
    case GRAPHMODE_X:
        return {
            y: o,
            x: q
        }
    }
}, Grapher.getBetterX = function (a, b) {
    var c = 2,
        d = -Math.floor(Math.log(b) / Math.LN10),
        e = Grapher.smartRound(a, d),
        f = Grapher.smartRound(a, d - 2);
    return Math.abs(f - a) < c * b && (e = f), e
}, Grapher.fillHole = function (a, b, c, d, e, f) {
    var g = b - 1e-11,
        h = b + 1e-11,
        i = a(g),
        j = a(h);
    return isNaN(i) && isNaN(j) ? NaN : isNaN(i) ? j : isNaN(j) ? i : Math.pow((e - g) * c, 2) + Math.pow((f - i) * d, 2) < Math.pow((e - h) * c, 2) + Math.pow((f - j) * d, 2) ? i : j
}, Grapher.smartRound = function (a, b) {
    var c = Math.pow(10, b);
    return Math.round(a * c) / c
};;

function Screen(a, b) {
    return this.width = a, this.height = b, this
}
function DragState() {
    return this.originx = 0, this.originy = 0, this.secondaryx = 0, this.secondaryy = 0, this.xOffset = 0, this.yOffset = 0, this.scaleFactor = 1, this.scaleModX = 1, this.scaleModY = 1, this
}
function EventIntercepts() {
    var a = this;
    return this._donothing = function () {
        return !0
    }, this.mousedown = this._donothing, this.singletouchstart = this._donothing, this.screenchange = this._donothing, this
}
function GraphManager(a, b, c) {
    var d = this;
    return this.container = a, this.$ = $(a), this.intercepts = new EventIntercepts, this.onRecompute = c, this.viewport = new Viewport, this.screen = new Screen(this.$.width(), this.$.height()), this.dragstate = new DragState, this.settings = b, this.renderLayer = new GraphCanvas(-2, this, !1), this.renderLayer.attach(this.container), this.renderLayer.outer_node.css("z-index", "9995"), this.baseLayer = new GraphCanvas(-1, this, !0), this.baseLayer.attach(this.container), this.baseLayer.outer_node.css("z-index", "9996"), this.poiLayer = this.container.append('<div id="gc_outer_poi_layer" class="poilayer"></div>').find("#gc_outer_poi_layer"), this.poiLayer.css("position", "absolute").css("overflow", "hidden").css("width", this.screen.width.toString() + "px").css("height", this.screen.height.toString() + "px").css("z-index", "9997").disableTextSelection(IS_IE), IS_IE9 && this.poiLayer.addClass("bg_trans"), this.traceLayer = this.container.append('<div id="gc_outer_trace_layer" class="tracelayer"></div>').find("#gc_outer_trace_layer"), this.traceLayer.css("position", "absolute").css("overflow", "hidden").css("width", this.screen.width.toString() + "px").css("height", this.screen.height.toString() + "px").css("z-index", "9997").disableTextSelection(IS_IE), IS_IE9 && this.traceLayer.addClass("bg_trans"), this.graphs = {}, this._mouseDragged = function (a) {
        if (a.wasHandled()) return;
        d.doPan(a)
    }, this._touchMoved_ipad = function (a) {
        if (a.wasHandled()) return;
        d.touchMoved_ipad(a)
    }, this._endPan = function (a) {
        if (a.wasHandled()) return;
        d.endPan(a)
    }, this._touchEnd_ipad = function (a) {
        if (a.wasHandled()) return;
        d.touchEnd_ipad(a)
    }, this._dragStateUpdate = null, this.$.resize(function () {
        d.updateScreenSize()
    }), this.$.mousedown(function (a) {
        if (a.wasHandled()) return;
        d.beginPan(a)
    }), this.$.dblclick(function (a) {
        a.preventDefault()
    }), this.doubletapCounter = null, this.cancelDoubleTapCounter = function () {
        d.doubletapCounter = null
    }, this.touchStartHandler = function (a) {
        if (a.wasHandled()) return;
        d.beginTouch_ipad(a)
    }, this.$.bind("touchstart", this.touchStartHandler), this.$.mousewheel(function (a, b) {
        d.mousewheel(a, b)
    }), this.mousewheel_counter = 0, this.zoomQueue = [], this.zoomDelay = null, this.ptouches = 0, this.touchRedrawLimiter = !1, this
}
function GraphCanvas(a, b, c, d) {
    return this.layerId = a, this.manager = b, this.segments = [], this.viewport = b.viewport, this.dragstate = b.dragstate, this.screen = b.screen, this.hidden = !1, this.settings = b.settings, this.strokeAlpha = .7, this.fillAlpha = .4, this.pointAlpha = .9, this.strokeColor = "rgba(0,0,0," + this.strokeAlpha.toString() + ")", this.fillColor = "rgba(100,100,100," + this.fillAlpha.toString() + ")", this.lineWidth = 2, this.drawGridlines = c, this.hasCanvas = d == null, this.hasCanvas ? (this.outer_node = $("<div class='graph-outer'></div>"), this.outer_node.attr("id", "gc_outer_" + a.toString()).css("position", "absolute").css("overflow", "hidden").css("width", this.screen.width.toString() + "px").css("height", this.screen.height.toString() + "px").disableTextSelection(IS_IE), this.outer_node.html(""), this.inner_node = $("<canvas class='graph-inner'></canvas>"), this.inner_node.attr("id", "gc_inner_" + a.toString()).attr("width", this.screen.width).attr("height", this.screen.height).css("position", "relative").css("display", "block").css("width", this.screen.width.toString() + "px").css("height", this.screen.height.toString() + "px").disableTextSelection(IS_IE), this.outer_node.append(this.inner_node), $(b.container).append(this.outer_node), this.ctx = this.inner_node.get(0).getContext("2d"), this) : (this.ctx = d, this)
}
function DashedDrawer(a, b) {
    return this.pattern = [11, 7], this.replen = this.pattern[0] + this.pattern[1], b != null && b / this.replen > MAX_DOTTED_SEGMENTS && (this.pattern[0] = b * this.pattern[0] / this.replen / MAX_DOTTED_SEGMENTS, this.pattern[1] = b * this.pattern[1] / this.replen / MAX_DOTTED_SEGMENTS), this.pstate = 0, this.dstaccum = 0, this.px = null, this.py = null, this.ctx = a, this
}
var MAX_DOTTED_SEGMENTS, MAX_VIEWPORT_DIM = 1e6,
    MIN_VIEWPORT_DIM = 1e-4,
    ANIMATE_ZOOM_DURATION = 500,
    DOUBLETAP_DELAY = 500,
    DOUBLETAP_ZOOM = 2,
    WHEELZOOM_TO_CURSOR = !1,
    Viewport = Ember.Object.extend({
        minx: -10,
        maxx: 10,
        miny: -10,
        maxy: 10,
        squareAxes: !0,
        isPanning: !1,
        isZooming: !1,
        isTouched: !1,
        isAnimating: !1,
        isTransient: function () {
            return this.get("isPanning") ? !0 : this.get("isZooming") ? !0 : this.get("isTouched") ? !0 : this.get("isAnimated") ? !0 : !1
        }.property("isPanning", "isZooming", "isTouched", "isAnimated"),
        isValid: function () {
            return this.maxx <= this.minx ? !1 : this.maxy <= this.miny ? !1 : isFinite(this.minx) ? isFinite(this.maxx) ? isFinite(this.miny) ? isFinite(this.maxy) ? !0 : !1 : !1 : !1 : !1
        }.property("minx", "maxx", "miny", "maxy"),
        enforceSquareY: function () {
            if (this.get("isTransient")) return;
            if (!this.get("isValid")) return;
            if (this.squareAxes) {
                var a = this.maxx - this.minx,
                    b = this.maxy - this.miny,
                    c = this.miny + b / 2,
                    d = grapher.getSize(),
                    e = a / d.width * d.height;
                Math.abs(e - b) > 1e-4 * Math.abs(e) && this.setProperties({
                    miny: c - e / 2,
                    maxy: c + e / 2
                })
            }
        }.observes("minx", "maxx", "squareAxes"),
        enforceSquareX: function () {
            if (this.get("isTransient")) return;
            if (!this.get("isValid")) return;
            if (this.squareAxes) {
                var a = this.maxx - this.minx,
                    b = this.maxy - this.miny,
                    c = this.minx + a / 2,
                    d = grapher.getSize(),
                    e = b / d.height * d.width;
                Math.abs(e - a) > 1e-4 * Math.abs(e) && this.setProperties({
                    minx: c - e / 2,
                    maxx: c + e / 2
                })
            }
        }.observes("miny", "maxy", "squareAxes"),
        onViewportDidChange: function () {
            if (!this.get("isValid")) return;
            Ember.run.once(this, this.onViewportDidChangeOnce)
        }.observes("minx", "maxx", "miny", "maxy"),
        onViewportDidChangeOnce: function () {
            grapher.inner.redrawAll(), grapher.inner.queueRecompute()
        }
    });
Viewport.ZOOM_FACTOR = 1.125, Viewport.prototype.toObject = function () {
    return {
        xmin: this.minx,
        xmax: this.maxx,
        ymin: this.miny,
        ymax: this.maxy
    }
}, Viewport.prototype.width = function () {
    return this.maxx - this.minx
}, Viewport.prototype.height = function () {
    return this.maxy - this.miny
}, Viewport.prototype.polar_diameter = function () {
    return Math.sqrt(Math.pow(Math.max(Math.abs(this.maxy), Math.abs(this.miny)), 2) + Math.pow(Math.max(Math.abs(this.maxx), Math.abs(this.minx)), 2)) * 2
}, Viewport.prototype.offset = function (a, b) {
    this.setProperties({
        minx: this.get("minx") + a,
        maxx: this.get("maxx") + a,
        miny: this.get("miny") + b,
        maxy: this.get("maxy") + b
    })
}, Viewport.prototype.zoom = function (a) {
    var b = Math.pow(Viewport.ZOOM_FACTOR, a);
    this.setProperties({
        minx: this.get("minx") * b,
        maxx: this.get("maxx") * b,
        miny: this.get("miny") * b,
        maxy: this.get("maxy") * b
    })
}, Viewport.prototype.copyFrom = function (a) {
    this.setProperties(a.getProperties(["minx", "maxx", "miny", "maxy", "squareAxes"]))
}, Viewport.prototype.clone = function () {
    return Viewport.create(this.getProperties(["minx", "maxx", "miny", "maxy", "squareAxes"]))
}, Screen.prototype.toObject = function () {
    return {
        width: this.width,
        height: this.height
    }
}, Screen.prototype.toClippingViewport = function () {
    return {
        xmin: -1,
        ymin: -1,
        xmax: this.width + 2,
        ymax: this.height + 2
    }
}, DragState.prototype.copyFrom = function (a) {
    this.originx = a.originx, this.originy = a.originy, this.secondaryx = a.secondaryx, this.secondaryy = a.secondaryy, this.xOffset = a.xOffset, this.yOffset = a.yOffset, this.scaleFactor = a.scaleFactor, this.scaleModX = a.scaleModX, this.scaleModY = a.scaleModY
}, DragState.prototype.clone = function () {
    var a = new DragState;
    return a.copyFrom(this), a
}, DragState.prototype.reset = function () {
    this.xOffset = 0, this.yOffset = 0, this.scaleFactor = 1, this.scaleModX = 1, this.scaleModY = 1
}, DragState.prototype.isDragged = function () {
    return this.scaleFactor !== 1 || this.xOffset !== 0 || this.yOffset !== 0
}, DragState.prototype.toString = function () {
    return "x:" + this.xOffset.toString() + ", y:" + this.yOffset.toString() + ", zoom:" + this.scaleFactor.toString()
}, GraphManager.prototype.zoomToPoint = function (a, b, c) {
    var d, e, f, g, h, i;
    b != null && c != null ? (d = b - this.screen.width / 2, e = c - this.screen.height / 2, f = (d - this.dragstate.xOffset) / (this.dragstate.scaleFactor * this.dragstate.scaleModX), g = (e - this.dragstate.yOffset) / (this.dragstate.scaleFactor * this.dragstate.scaleModY), this.dragstate.scaleFactor *= a, this.dragstate.xOffset *= a, this.dragstate.yOffset *= a, h = f * this.dragstate.scaleFactor * this.dragstate.scaleModX + this.dragstate.xOffset, i = g * this.dragstate.scaleFactor * this.dragstate.scaleModY + this.dragstate.yOffset, this.dragstate.xOffset += d - h, this.dragstate.yOffset += e - i) : (this.dragstate.scaleFactor *= a, this.dragstate.offsetX *= a, this.dragstate.offsetY *= a)
}, GraphManager.prototype.animateZoom = function (a) {
    var b;
    a && this.zoomQueue.push(a), this.doubletapCounter == null, b = this, this.viewport.get("isAnimated") ? setTimeout(function () {
        b.animateZoom()
    }, 1) : this.zoomQueue.length > 0 && (a = this.zoomQueue[0], this.zoomQueue.splice(0, 1), this.zoomToPoint(a), this.animateDragState())
}, GraphManager.prototype.screenshot = function (a, b, c, d, e) {
    var f, g, h, i, j, k, l, m, n, o, p, q, r = document.createElement("canvas"),
        s = !! r.getContext && !! r.getContext("2d"),
        t = 1,
        u = 1,
        v = a,
        w = b,
        x = $("<canvas style='display:none'></canvas>");
    x.attr("id", "graph_manager_print_node").attr("width", v).attr("height", w).css("width", v + "px").css("height", w + "px").css("position", "absolute").css("display", "block").css("top", "200").css("left", "200"), this.$.append(x), f = x.get(0).getContext("2d"), g = this.viewport.clone(), c && (h = a / b, i = this.screen.width / this.screen.height, this.viewport.set("squareAxes", !1), Ember.run.sync(), h > i ? (j = this.viewport.height() * (i / h), k = (this.viewport.height() - j) / 2, this.viewport.incrementProperty("miny", k), this.viewport.decrementProperty("maxy", k)) : h < i && (l = this.viewport.width() * (h / i), k = (this.viewport.width() - l) / 2, this.viewport.incrementProperty("minx", k), this.viewport.decrementProperty("maxx", k))), f.fillStyle = "white", f.fillRect(0, 0, v, w);
    for (m in this.graphs) {
        n = this.graphs[m];
        if (n.hidden) continue;
        o = n.lineWidth, n.lineWidth = 2, n.redraw(f, v, w), n.lineWidth = o
    }
    p = this.settings.get("showLabels"), this.settings.set("showLabels", d && p), Ember.run.sync(), this.baseLayer.redraw(f, v, w), this.settings.set("showLabels", p), Ember.run.sync(), c && this.viewport.copyFrom(g), q = null;
    try {
        q = x.get(0).toDataURL("image/png");
        try {
            x.remove(), e != null && e(q)
        } catch (y) {
            window.console && console.log("Capture auxiliary failed.")
        }
    } catch (y) {
        window.console && console.log("Capture failed.")
    }
}, GraphManager.prototype.decrement_mousewheel = function () {
    this.mousewheel_counter -= 1
}, GraphManager.prototype.mousewheel = function (a, b) {
    var c, d, e, f, g;
    if (this.mousewheel_counter > 0) return;
    c = this, this.mousewheel_counter += 1, setTimeout(function () {
        c.decrement_mousewheel()
    }, 50), b = b > 0 ? 1 : -1, d = Math.pow(Viewport.ZOOM_FACTOR, b), WHEELZOOM_TO_CURSOR ? (e = this.$.offset(), f = a.originalEvent.pageX - e.left, g = a.originalEvent.pageY - e.top, this.zoomToPoint(d, f, g)) : this.zoomToPoint(d), this.viewport.set("isZooming", !0), this.updateDragState(), this.queueRecompute()
}, GraphManager.prototype.singleTapped = function (a, b) {
    var c, d, e, f;
    return this.doubletapCounter == null ? (this.doubletapCounter = setTimeout(this.cancelDoubleTapCounter, DOUBLETAP_DELAY), !1) : (c = this.$.offset(), d = a - c.left, e = b - c.top, this.zoomToPoint(DOUBLETAP_ZOOM, d, e), f = this, this.animateDragState(), this.doubletapCounter = null, !0)
}, GraphManager.prototype.beginTouch_ipad = function (a) {
    var b;
    a.preventDefault();
    try {
        this.viewport.set("isTouched", !0);
        if (this.ptouches == 0) {
            b = this.$.offset();
            if (!this.intercepts.singletouchstart(a.originalEvent.touches[0].pageX - b.left, a.originalEvent.touches[0].pageY - b.top)) return;
            $(document).bind("touchend", this._touchEnd_ipad).bind("touchmove", this._touchMoved_ipad), this.singleTapped(a.originalEvent.touches[0].pageX, a.originalEvent.touches[0].pageY)
        } else this.doubletapCounter = null;
        this.ptouches = a.originalEvent.touches.length, this.dragstate.originx = a.originalEvent.touches[0].pageX, this.dragstate.originy = a.originalEvent.touches[0].pageY, a.originalEvent.touches.length > 1 ? (this.dragstate.secondaryx = a.originalEvent.touches[1].pageX, this.dragstate.secondaryy = a.originalEvent.touches[1].pageY) : (this.dragstate.secondaryx = null, this.dragstate.secondaryy = null)
    } catch (c) {}
}, GraphManager.prototype.touchMoved_ipad = function (a) {
    var b, c, d, e, f, g, h, i, j, k, l, m;
    a.preventDefault();
    try {
        if (a.originalEvent.touches[0].pageX - this.dragstate.originx != 0 || a.originalEvent.touches[0].pageY - this.dragstate.originy != 0) {
            if (a.originalEvent.touches.length < 2) this.dragstate.xOffset += a.originalEvent.touches[0].pageX - this.dragstate.originx, this.dragstate.yOffset += a.originalEvent.touches[0].pageY - this.dragstate.originy;
            else {
                if (this.dragstate.secondaryx == null || this.dragstate.secondaryy == null) this.dragstate.secondaryx = a.originalEvent.touches[1].pageX, this.dragstate.secondaryy = a.originalEvent.touches[1].pageY;
                this.doubletapCounter = null, b = this.$.offset(), c = Math.sqrt(Math.pow(this.dragstate.secondaryx - this.dragstate.originx, 2) + Math.pow(this.dragstate.secondaryy - this.dragstate.originy, 2)), d = Math.sqrt(Math.pow(a.originalEvent.touches[1].pageX - a.originalEvent.touches[0].pageX, 2) + Math.pow(a.originalEvent.touches[1].pageY - a.originalEvent.touches[0].pageY, 2)), e = d / c, f = .5 * (this.dragstate.secondaryx + this.dragstate.originx) - b.left - this.screen.width / 2, g = .5 * (this.dragstate.secondaryy + this.dragstate.originy) - b.top - this.screen.height / 2, h = .5 * (a.originalEvent.touches[1].pageX + a.originalEvent.touches[0].pageX) - b.left - this.screen.width / 2, i = .5 * (a.originalEvent.touches[1].pageY + a.originalEvent.touches[0].pageY) - b.top - this.screen.height / 2, j = (f - this.dragstate.xOffset) / (this.dragstate.scaleFactor * this.dragstate.scaleModX), k = (g - this.dragstate.yOffset) / (this.dragstate.scaleFactor * this.dragstate.scaleModY), this.dragstate.scaleFactor *= e, this.dragstate.xOffset *= e, this.dragstate.yOffset *= e, l = j * this.dragstate.scaleFactor * this.dragstate.scaleModX + this.dragstate.xOffset, m = k * this.dragstate.scaleFactor * this.dragstate.scaleModY + this.dragstate.yOffset, this.dragstate.xOffset += h - l, this.dragstate.yOffset += i - m
            }
            this.dragstate.originx = a.originalEvent.touches[0].pageX, this.dragstate.originy = a.originalEvent.touches[0].pageY, a.originalEvent.touches.length > 1 ? (this.dragstate.secondaryx = a.originalEvent.touches[1].pageX, this.dragstate.secondaryy = a.originalEvent.touches[1].pageY) : (this.dragstate.secondaryx = null, this.dragstate.secondaryy = null), this.updateDragState(), this.queueRecompute()
        }
    } catch (n) {
        alert(n)
    }
}, GraphManager.prototype.touchEnd_ipad = function (a) {
    var b;
    this.ptouches = a.originalEvent.touches.length, this.viewport.set("isTouched", this.ptouches > 0), this.ptouches == 0 ? ($(document).unbind("touchend", this._touchEnd_ipad).unbind("touchmove", this._touchMoved_ipad), b = this.dragstate, (b.xOffset != 0 || b.yOffset != 0 || b.scaleFactor != 1 || b.scaleModX != 1 || b.scaleModY != 1) && this.requestRecompute()) : this.ptouches == 1 && (this.doubletapCounter = null, this.dragstate.originx = a.originalEvent.touches[0].pageX, this.dragstate.originy = a.originalEvent.touches[0].pageY)
}, GraphManager.prototype.beginPan = function (a) {
    var b = this.$.offset();
    if (!this.intercepts.mousedown(a.originalEvent.pageX - b.left, a.originalEvent.pageY - b.top)) return;
    this.viewport.set("isPanning", !0), this.dragstate.originx = a.pageX, this.dragstate.originy = a.pageY, $(document).one("mouseup", this._endPan).mousemove(this._mouseDragged)
}, GraphManager.prototype.doPan = function (a) {
    if (a.pageX - this.dragstate.originx != 0 || a.pageY - this.dragstate.originy != 0) this.dragstate.xOffset += a.pageX - this.dragstate.originx, this.dragstate.yOffset += a.pageY - this.dragstate.originy, this.dragstate.originx = a.pageX, this.dragstate.originy = a.pageY, this.updateDragState(), this.queueRecompute();
    this.doubletapCounter = null
}, GraphManager.prototype.endPan = function (a) {
    var b;
    $(document).unbind("mousemove", this._mouseDragged), b = this.dragstate, b.xOffset != 0 || b.yOffset != 0 || b.scaleFactor != 1 || b.scaleModX != 1 || b.scaleModY != 1 ? this.singleTapped(a.pageX, a.pageY) || this.queueRecompute() : this.singleTapped(a.pageX, a.pageY), this.viewport.set("isPanning", !1)
}, GraphManager.prototype.updateScreenSize = function () {
    var a, b, c = this.$.width(),
        d = this.$.height();
    if (c <= 0 || d <= 0) return;
    if (this.screen.width === c && this.screen.height === d) return;
    this.screen.width = c, this.screen.height = d, this.renderLayer.resize(this.screen);
    for (a in this.graphs) b = this.graphs[a], b.ctx = this.renderLayer.ctx, b.resize(this.screen);
    this.baseLayer.resize(this.screen), this.poiLayer.css("width", this.screen.width.toString() + "px").css("height", this.screen.height.toString() + "px"), this.traceLayer.css("width", this.screen.width.toString() + "px").css("height", this.screen.height.toString() + "px"), this.queueRecompute()
}, GraphManager.prototype.limitDragState = function () {
    this.viewport.width() / (this.dragstate.scaleFactor * this.dragstate.scaleModX) > MAX_VIEWPORT_DIM ? this.dragstate.scaleModX = this.viewport.width() / (this.dragstate.scaleFactor * MAX_VIEWPORT_DIM) : this.viewport.width() / (this.dragstate.scaleFactor * this.dragstate.scaleModX) < MIN_VIEWPORT_DIM && (this.dragstate.scaleModX = this.viewport.width() / (this.dragstate.scaleFactor * MIN_VIEWPORT_DIM)), this.dragstate.scaleModY = this.dragstate.scaleModX
}, GraphManager.prototype.updateDragState = function () {
    var a, b = this._dragStateUpdate;
    b != null && b(), this.limitDragState(), this.renderLayer.redrawDragState(), this.baseLayer.redrawDragState(), a = this.intercepts.screenchange()
}, GraphManager.prototype.animateDragState = function () {
    var a, b;
    return this.viewport.set("isAnimating", !0), this.limitDragState(), a = this.dragstate.clone(), this.dragstate.oldScaleFactor = 1, b = this, b.$.animate({
        __ox: b.dragstate.xOffset,
        __oy: b.dragstate.yOffset,
        __sf: b.dragstate.scaleFactor - 1,
        __smx: b.dragstate.scaleModX - 1,
        __smy: b.dragstate.scaleModY - 1
    }, {
        duration: ANIMATE_ZOOM_DURATION,
        complete: function () {
            b.$.animate({
                __ox: 0,
                __oy: 0,
                __sf: 0,
                __smx: 0,
                __smy: 0
            }, {
                duration: 1,
                complete: function () {
                    b.flattenDragState(), b.updateDragState(), b.redrawAll(), b.queueRecompute(2), b.viewport.set("isAnimating", !1)
                }
            })
        },
        step: function (a, c) {
            c.prop == "__ox" ? b.dragstate.xOffset = a : c.prop == "__oy" ? b.dragstate.yOffset = a : c.prop == "__smx" ? b.dragstate.scaleModX = a + 1 : c.prop == "__smy" ? b.dragstate.scaleModY = a + 1 : c.prop == "__sf" && (b.dragstate.scaleFactor = a + 1, b.updateDragState())
        }
    })
}, GraphManager.prototype.flattenDragState = function () {
    var a, b, c = this.viewport,
        d = (c.minx + c.maxx) * .5,
        e = (c.miny + c.maxy) * .5,
        f = c.minx,
        g = c.miny,
        h = c.maxy,
        i = c.maxx,
        j = this.dragstate;
    (j.scaleFactor !== 1 || j.scaleModX !== 1 || j.scaleModY !== 1) && c.setProperties({
        minx: d + (c.minx - d) / (this.dragstate.scaleFactor * this.dragstate.scaleModX),
        maxx: d + (c.maxx - d) / (this.dragstate.scaleFactor * this.dragstate.scaleModX),
        miny: e + (c.miny - e) / (this.dragstate.scaleFactor * this.dragstate.scaleModY),
        maxy: e + (c.maxy - e) / (this.dragstate.scaleFactor * this.dragstate.scaleModY)
    }), a = this.dragstate.xOffset * c.width() / this.screen.width, b = -this.dragstate.yOffset * c.height() / this.screen.height, (a !== 0 || b !== 0) && c.offset(-a, -b), this.dragstate.reset(), this.renderLayer.releaseUnscaledCanvas(), this.viewport.set("isZooming", !1)
}, GraphManager.prototype.queueRecompute = function (a) {
    var b;
    a == null && (a = 1), this.zoomDelay != null && clearTimeout(this.zoomDelay), b = this, this.zoomDelay = setTimeout(function () {
        b.requestRecompute(), this.zoomDelay = null
    }, 250 * a)
}, GraphManager.prototype.updateViewport = function () {
    var a, b = this.renderLayer.ctx,
        c = this.viewport;
    this.renderLayer.updateViewport(this.viewport), this.eachGraph(function (a, d) {
        d.updateViewport(c, b)
    }), this.baseLayer.updateViewport(this.viewport), a = this.intercepts.screenchange()
}, GraphManager.prototype.requestRecompute = function () {
    this.onRecompute != null ? (this.onRecompute(), this.flattenDragState(), this.updateDragState(), this.updateViewport(), $(this).trigger("viewportChange")) : window.console && console.log("Error: onRecompute handler not specified.")
}, GraphManager.prototype.getGraphCanvas = function (a) {
    return a in this.graphs ? this.graphs[a] : null
}, GraphManager.prototype.setSegments = function (a, b) {
    var c = this.getGraphCanvas(a);
    return c != null && (c.segments = b), c
}, GraphManager.prototype.getSegments = function (a) {
    var b = this.getGraphCanvas(a);
    return b != null ? b.segments : null
}, GraphManager.prototype.setColor = function (a, b, c) {
    var d = this.getGraphCanvas(a);
    return d != null && (d.strokeColor = b, d.fillColor = c), d
}, GraphManager.prototype.redrawAll = function () {
    this.flattenDragState(), this.updateViewport(!1)
}, GraphManager.prototype.redraw = function () {
    this.redrawAll(!1)
}, GraphManager.layerSortFunc = function (a, b) {
    return a.layerId > b.layerId ? 1 : a.layerId < b.layerId ? -1 : 0
}, GraphManager.prototype.eachGraph = function (a) {
    var b, c, d = [];
    for (b in this.graphs) d.push(this.graphs[b]);
    d.sort(GraphManager.layerSortFunc);
    for (c = 0; c < d.length; c++) a(c, d[c])
}, GraphManager.prototype.allocate = function (a) {
    var b;
    if (a in this.graphs) return !1;
    b = new GraphCanvas(a, this, !1, this.renderLayer.ctx), this.graphs[a] = b
}, GraphManager.prototype.deallocate = function (a) {
    a in this.graphs && (this.graphs[a].detach(), delete this.graphs[a])
}, GraphManager.prototype.isHidden = function (a) {
    if (a in this.graphs) return this.graphs[a].isHidden()
}, GraphManager.prototype.show = function (a) {
    a in this.graphs && (this.graphs[a].show(), this.redrawAll())
}, GraphManager.prototype.hide = function (a, b) {
    a in this.graphs && this.graphs[a].hide(), b || this.redrawAll()
}, GraphManager.prototype.clear = function () {
    this.graphs = {}, this.redrawAll()
}, GraphManager.prototype.mapx = function (a) {
    return (a - this.viewport.minx) * this.screen.width / (this.viewport.maxx - this.viewport.minx)
}, GraphManager.prototype.mapy = function (a) {
    return this.screen.height - (a - this.viewport.miny) * this.screen.height / (this.viewport.maxy - this.viewport.miny)
}, function (a) {
    a.fn.disableTextSelection = function (b) {
        return b && this.each(function () {
            a(this).bind("mousedown touchstart", function () {
                a(document.activeElement).focusout()
            })
        }), this.each(function () {
            a(this).attr("unselectable", "on").css({
                "-moz-user-select": "none",
                "-webkit-user-select": "none",
                "user-select": "none"
            }).each(function () {
                this.onselectstart = function () {
                    return !1
                }
            })
        })
    }
}(jQuery), GraphCanvas.prototype.redraw = function (a, b, c) {
    var d, e;
    !this.hasCanvas && a == null && (a = this.alt_ctx), a && !this.hidden ? (d = this.ctx, this.ctx = a, e = this.screen, this.screen = new Screen(b, c), this.drawGridlines ? this.drawGrid(!1) : this.drawSegments(!1), this.screen = e, this.ctx = d) : this.hidden || (this.drawGridlines ? this.drawGrid(!0) : this.drawSegments(!0))
}, GraphCanvas.prototype.mapx = GraphManager.prototype.mapx, GraphCanvas.prototype.mapy = GraphManager.prototype.mapy, GraphCanvas.prototype.tmapx = function (a) {
    var b = (this.viewport.minx + this.viewport.maxx) * .5,
        c = b + (this.viewport.minx - b) / (this.dragstate.scaleFactor * this.dragstate.scaleModX),
        d = b + (this.viewport.maxx - b) / (this.dragstate.scaleFactor * this.dragstate.scaleModX),
        e = this.dragstate.xOffset * (d - c) / this.screen.width;
    return c -= e, d -= e, (a - c) * this.screen.width / (d - c)
}, GraphCanvas.prototype.tmapy = function (a) {
    var b = (this.viewport.miny + this.viewport.maxy) * .5,
        c = b + (this.viewport.miny - b) / (this.dragstate.scaleFactor * this.dragstate.scaleModY),
        d = b + (this.viewport.maxy - b) / (this.dragstate.scaleFactor * this.dragstate.scaleModY),
        e = -this.dragstate.yOffset * (d - c) / this.screen.height;
    return c -= e, d -= e, this.screen.height - (a - c) * this.screen.height / (d - c)
}, GraphManager.prototype.tmapx = GraphCanvas.prototype.tmapx, GraphManager.prototype.tmapy = GraphCanvas.prototype.tmapy, GraphCanvas.prototype.temporaryFlatten = function () {
    var a = (this.viewport.minx + this.viewport.maxx) * .5,
        b = (this.viewport.miny + this.viewport.maxy) * .5,
        c = a + (this.viewport.minx - a) / (this.dragstate.scaleFactor * this.dragstate.scaleModX),
        d = a + (this.viewport.maxx - a) / (this.dragstate.scaleFactor * this.dragstate.scaleModX),
        e = b + (this.viewport.miny - b) / (this.dragstate.scaleFactor * this.dragstate.scaleModY),
        f = b + (this.viewport.maxy - b) / (this.dragstate.scaleFactor * this.dragstate.scaleModY),
        g = this.dragstate.xOffset * (d - c) / this.screen.width,
        h = -this.dragstate.yOffset * (f - e) / this.screen.height;
    return Viewport.create({
        minx: c - g,
        maxx: d - g,
        miny: e - h,
        maxy: f - h
    })
}, GraphCanvas.prototype.drawGrid = function (a) {
    var b = this.temporaryFlatten();
    a && this.hasCanvas && this.ctx.clearRect(0, 0, this.screen.width, this.screen.height), this.settings.get("showGrid") && this.drawGridLines(b), this.settings.get("showAxes") && this.drawAxes(b), this.settings.get("showLabels") && this.drawLabels(b)
}, GraphCanvas.prototype.drawSegments = function (a) {
    var b, c, d, e, f, g, h, i, j, k, l, m, n, o;
    a && this.hasCanvas && this.ctx.clearRect(0, 0, this.screen.width, this.screen.height), b = this.ctx, b.lineWidth = this.settings.get("graphLineWidth"), b.strokeStyle = this.strokeColor, b.fillStyle = this.fillColor, b.lineJoin = "round", b.lineCap = "round", c = 0;
    if (!this.segments) return;
    d = this.settings.get("connectedMode"), g = !1;
    for (h = 0; h < this.segments.length; h++) {
        i = this.segments[h], g = !1;
        for (j = 0; j < i.segments.length; j++) k = i.segments[j], c += k.length, l = GRAPHMODE_Y, i.flip && (l = GRAPHMODE_X), i.graphMode && (l = i.graphMode), !d || l != GRAPHMODE_X && l != GRAPHMODE_Y ? g = !1 : (g && (m = k[0], n = k[1], l == GRAPHMODE_Y ? o = this.mapx(e) - this.mapx(m) : o = this.mapy(e) - this.mapy(m), Math.abs(o) < .001 && this.drawGraphStroke([e, f, m, n], !0, l, null)), g = !0, e = k[k.length - 2], f = k[k.length - 1]), this.drawSegment(k, i.operator, l)
    }
}, GraphCanvas.prototype.drawSegment = function (a, b, c) {
    var d = b == "<" || b == ">",
        e = b == "<" || b == ">" || b == "<=" || b == ">=" || b == "\\leq" || b == "\\le" || b == "\\geq" || b == "\\ge",
        f = b == "<=" || b == "<" || b == "\\leq" || b == "\\le";
    if (a.length < 2) return;
    e && this.fillGraphStroke(a, f, c), c == GRAPHMODE_XYPOINT ? this.drawPoints(a) : this.drawGraphStroke(a, d, c, b)
}, GraphCanvas.prototype.drawPoint = function (a, b) {
    var c, d, e = 20,
        f = this.mapx(a) - .5;
    if (f < -e || f > this.screen.width + e) return;
    c = this.mapy(b) - .5;
    if (c < -e || c > this.screen.height + e) return;
    d = this.ctx, d.globalAlpha = this.pointAlpha, d.beginPath(), d.moveTo(f - .1, c - .1), d.lineTo(f - .1, c + .1), d.lineTo(f + .1, c + .1), d.lineTo(f + .1, c - .1), d.closePath(), d.stroke(), d.globalAlpha = 1
}, GraphCanvas.prototype.drawPoints = function (a) {
    var b, c = this.lineWidth,
        d = this.ctx;
    d.lineWidth = this.settings.get("pointLineWidth");
    if (a.length != 2 || a[0] instanceof Array || a[1] instanceof Array) for (b = 0; b < a.length; b++) this.drawPoint(a[b][0], a[b][1]);
    else this.drawPoint(a[0], a[1]);
    d.lineWidth = c
}, GraphCanvas.prototype.fillGraphStroke = function (a, b, c) {
    var d, e, f, g, h, i, j, k, l, m, n, o, p, q;
    this.ctx.globalAlpha = c === GRAPHMODE_POLAR ? .2 : this.fillAlpha, d = [].push, e = null, f = null, c === GRAPHMODE_POLAR ? (f = Clipping.ALL, g = b ? 0 : this.viewport.polar_diameter(), h = this.settings.get("degreeMode") ? 180 : 2 * Math.PI, e = Clipping.computePolarFill(a, g, h)) : c === GRAPHMODE_Y ? (f = Clipping.Y, i = b ? this.viewport.miny : this.viewport.maxy, e = Clipping.computeCartesianFill(a, i)) : c === GRAPHMODE_X && (f = Clipping.X, i = b ? this.viewport.minx : this.viewport.maxx, e = Clipping.computeCartesianFill(a, i)), j = this.screen.toClippingViewport(), k = this.viewport.toObject(), l = this.screen.toObject();
    for (m = 0; m < e.length; m++) {
        n = this.getClippingGraphType(c, !0), o = Clipping.mapSegmentToCanvas(e[m], k, l, n), p = Clipping.clipFillEdges(o, j, f);
        if (p.length >= 6) {
            this.ctx.beginPath(), this.ctx.moveTo(p[0], p[1]);
            for (q = 2; q < p.length; q += 2) this.ctx.lineTo(p[q], p[q + 1]);
            this.ctx.closePath(), this.ctx.fill()
        }
    }
    this.ctx.globalAlpha = 1
}, GraphCanvas.prototype.getTotalSegmentLength = function (a) {
    var b, c, d, e, f, g;
    if (a.length < 4) return 0;
    b = 0, c = a[0], d = a[1];
    for (e = 2; e < a.length; e += 2) f = a[e], g = a[e + 1], b += Distance.hypot(f - c, g - d), c = f, d = g;
    return b
}, GraphCanvas.prototype.drawGraphStroke = function (a, b, c, d) {
    var e, f, g, h, i, j, k;
    this.ctx.globalAlpha = this.strokeAlpha;
    if (c === GRAPHMODE_PARAMETRIC && a.length === 2) this.drawPoints(a);
    else {
        e = this.viewport.toObject(), f = this.screen.toObject(), g = this.getClippingGraphType(c, d !== "="), h = Clipping.mapSegmentToCanvas(a, e, f, g), i = Clipping.clipStrokeEdges(h, this.screen.toClippingViewport());
        if (!b) {
            this.ctx.beginPath(), this.ctx.moveTo(i[0], i[1]);
            for (j = 0; j < i.length; j += 2) this.ctx.lineTo(i[j], i[j + 1]);
            this.ctx.stroke()
        } else {
            k = new DashedDrawer(this.ctx, this.getTotalSegmentLength(i)), k.start(i[0], i[1]);
            for (j = 2; j < i.length; j += 2) k.next(i[j], i[j + 1]);
            k.close()
        }
    }
    this.ctx.globalAlpha = 1
}, GraphCanvas.prototype.getClippingGraphType = function (a, b) {
    switch (a) {
    case GRAPHMODE_X:
        return Clipping.X_EQUALS;
    case GRAPHMODE_PARAMETRIC:
    case GRAPHMODE_Y:
        return Clipping.Y_EQUALS;
    case GRAPHMODE_POLAR:
        return this.settings.get("degreeMode") ? b ? Clipping.POLAR_DEGREE_INEQUALITY : Clipping.POLAR_DEGREE_EQUALITY : b ? Clipping.POLAR_RADIAN_INEQUALITY : Clipping.POLAR_RADIAN_EQUALITY
    }
}, GraphCanvas.prototype.resize = function (a) {
    this.screen = a, this.outer_node && this.outer_node.css("width", a.width.toString() + "px").css("height", a.height.toString() + "px"), this.hidden || (this.inner_node && this.inner_node.css("width", this.screen.width.toString() + "px").css("height", this.screen.height.toString() + "px"), this.hasCanvas && this.inner_node.attr({
        width: this.screen.width
    }).attr({
        height: this.screen.height
    }))
}, GraphCanvas.prototype.redrawDragState = function () {
    if (this.drawGridlines) {
        this.inner_node.css("width", this.screen.width).css("height", this.screen.height), this.redraw();
        return
    }!this.hidden && this.inner_node && (this.saveUnscaledCanvas(), this.paintScaledCanvas())
}, GraphCanvas.prototype.updateViewport = function (a) {
    this.viewport = a, this.redraw()
}, GraphCanvas.prototype.saveUnscaledCanvas = function () {
    var a;
    if (this.unscaledCanvas) return;
    if (!this.inner_node || !this.inner_node.length) return;
    if (!this.dragstate.isDragged()) return;
    this.unscaledCanvas = document.createElement("canvas"), this.unscaledCanvas.width = this.screen.width, this.unscaledCanvas.height = this.screen.height, a = this.unscaledCanvas.getContext("2d"), a.drawImage(this.inner_node[0], 0, 0)
}, GraphCanvas.prototype.releaseUnscaledCanvas = function () {
    this.unscaledCanvas = null
}, GraphCanvas.prototype.paintScaledCanvas = function () {
    var a, b, c;
    if (!this.unscaledCanvas) return;
    a = this.dragstate.scaleFactor * this.dragstate.scaleModY, b = Math.round(this.dragstate.xOffset + this.screen.width / 2 - this.screen.width * a / 2), c = Math.round(this.dragstate.yOffset + this.screen.height / 2 - this.screen.height * a / 2), this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.clearRect(0, 0, this.screen.width, this.screen.height), this.ctx.translate(b, c), this.ctx.scale(a, a), this.ctx.drawImage(this.unscaledCanvas, 0, 0), this.ctx.setTransform(1, 0, 0, 1, 0, 0)
}, GraphCanvas.prototype.attach = function (a) {
    $(a).append(this.outer_node)
}, GraphCanvas.prototype.detach = function () {
    this.outer_node.remove()
}, GraphCanvas.prototype.drawAxes = function (a) {
    var b = this.screen,
        c = a,
        d = this.settings.get("axisLineOffset");
    this.ctx.lineWidth = this.settings.get("axisLineWidth"), this.ctx.strokeStyle = "rgba(0,0,0," + this.settings.get("axisOpacity").toString() + ")", this.ctx.beginPath(), this.ctx.moveTo(Math.round(this.tmapx(0)) - d, -d), this.ctx.lineTo(Math.round(this.tmapx(0)) - d, Math.round(this.screen.height) - d), this.ctx.moveTo(-d, Math.round(this.tmapy(0)) - d), this.ctx.lineTo(Math.round(this.screen.width) - d, Math.round(this.tmapy(0)) - d), this.ctx.stroke()
}, GraphCanvas.prototype.drawGridLines = function (a) {
    var b, c, d, e, f, g, h, i = this.screen,
        j = a,
        k = [],
        l = [],
        m = this.getIdealWindow(i, j),
        n = m.resX,
        o = m.resY,
        p = j.minx,
        q = j.miny,
        r = j.maxx,
        s = j.maxy,
        t = n * Math.floor(p / n),
        u = o * Math.floor(q / o),
        v = this.tmapy(q),
        w = this.tmapy(s);
    this.ctx.lineWidth = 1;
    for (b = t; b <= r; b += n) c = this.tmapx(b), d = GraphCanvas.isNearInteger(b / m.labX), this.ctx.beginPath(), this.ctx.moveTo(Math.round(c) - .5, Math.round(v) - .5), this.ctx.lineTo(Math.round(c) - .5, Math.round(w) - .5), d ? this.ctx.strokeStyle = "rgba(0,0,0," + this.settings.get("majorAxisOpacity").toString() + ")" : this.ctx.strokeStyle = "rgba(0,0,0," + this.settings.get("minorAxisOpacity").toString() + ")", this.ctx.stroke();
    e = this.tmapx(p), f = this.tmapx(r), this.ctx.lineWidth = 1;
    for (g = u; g <= s; g += o) h = this.tmapy(g), d = GraphCanvas.isNearInteger(g / m.labY), this.ctx.beginPath(), this.ctx.moveTo(Math.round(e) - .5, Math.round(h) - .5), this.ctx.lineTo(Math.round(f) - .5, Math.round(h) - .5), d ? this.ctx.strokeStyle = "rgba(0,0,0," + this.settings.get("majorAxisOpacity").toString() + ")" : this.ctx.strokeStyle = "rgba(0,0,0," + this.settings.get("minorAxisOpacity").toString() + ")", this.ctx.stroke()
}, GraphCanvas.prototype.drawLabels = function (a) {
    var b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v = this.screen,
        w = a,
        x = this.getIdealWindow(v, w),
        y = x.labX,
        z = x.labY,
        A = w.minx,
        B = w.miny,
        C = w.maxx,
        D = w.maxy,
        E = y * Math.floor(A / y),
        F = z * Math.floor(B / z),
        G = this.tmapx(A) + 3,
        H = this.tmapy(D) + 3,
        I = this.tmapx(C) - 3,
        J = this.tmapy(B) - 3,
        K = this.settings.get("labelHangingColor"),
        L = this.settings.get("labelNormalColor"),
        M = {};
    for (h in this.cachedXLabels) M[h] = !0;
    i = {};
    for (h in this.cachedYLabels) i[h] = !0;
    j = !1, k = this.tmapx(0), l = this.tmapy(0), o = x.labX10, p = x.labY10, q = this.settings.get("xAxisPiLabels") ? "pi" : "", r = this.settings.get("yAxisPiLabels") ? "pi" : "", s = this.settings.get("labelSize"), this.ctx.textAlign = "center", this.ctx.textBaseline = "middle", this.ctx.font = s.toString() + "px Arial";
    for (t = E; t <= C; t += y) d = t, c = GraphCanvas.roundLabelString(d, q, o), this.ctx.measureText ? m = this.ctx.measureText(c).width / 2 : m = c.length * 8, n = s, b = this.tmapx(t) - (d < 0 ? 3 : 0), e = l + s * .6 + 3, c == "0" ? (b = k - 5 - m, this.ctx.fillStyle = L, this.ctx.fillText(c, b, e)) : (e - n < H ? (e = H + n, this.ctx.fillStyle = K) : e + n > J ? (e = J - n, this.ctx.fillStyle = K) : this.ctx.fillStyle = L, d >= A && d <= C && (b - m < G ? b = G + m : b + m > I && (b = I - m), this.ctx.fillText(c, b, e)));
    for (u = F; u <= D; u += z) {
        g = u, f = GraphCanvas.roundLabelString(g, r, p);
        if (f == "0") continue;
        m = this.ctx.measureText(f).width / 2, n = s, e = this.tmapy(u), b = k - 5 - m, b - m < G ? (b = G + m, this.ctx.fillStyle = K) : b + m > I ? (b = I - m, this.ctx.fillStyle = K) : this.ctx.fillStyle = L, g >= B && g <= D && (e - n < H && e + n > H ? e = H + n : e - n < J && e + n > J && (e = J - n), this.ctx.fillText(f, b, e))
    }
}, GraphCanvas.roundForLabel = function (a) {
    return Math.round(a * 1e8) / 1e8
}, GraphCanvas.roundLabelString = function (a, b, c) {
    var d;
    if (b == "pi") {
        d = EvalWorker.isSpecialNumber(a, .1, c, !0);
        if (d) return d.str
    }
    return String(Math.round(a * 1e9) / 1e9)
}, GraphCanvas.GRID_ARRAY = [4, 4, 5], GraphCanvas.MULTIPLES_ARRAY = [1, 2, 5], GraphCanvas.GRID_ARRAY_PI = [4, 4, 5], GraphCanvas.MULTIPLES_ARRAY_PI = [Math.PI, 2 * Math.PI, 5 * Math.PI], GraphCanvas.GRID_ARRAY_FRAC_PI = [3], GraphCanvas.MULTIPLES_ARRAY_FRAC_PI = [Math.PI / 3], GraphCanvas.prototype.getIdealWindow = function (a, b) {
    var c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v = a.width,
        w = a.height,
        x = v / this.settings.get("pixelsPerLabel") + 1,
        y = w / this.settings.get("pixelsPerLabel") + 1,
        z = b.width(),
        A = b.height(),
        B = z / (x - 1),
        C = A / (y - 1),
        D = 1,
        E = 1,
        F = Infinity,
        G = Infinity,
        H = 10,
        I = 10;
    this.settings.get("xAxisPiLabels") ? B < 1 ? (H = 2, e = GraphCanvas.MULTIPLES_ARRAY_FRAC_PI, c = GraphCanvas.GRID_ARRAY_FRAC_PI) : (c = GraphCanvas.GRID_ARRAY_PI, e = GraphCanvas.MULTIPLES_ARRAY_PI) : (c = GraphCanvas.GRID_ARRAY, e = GraphCanvas.MULTIPLES_ARRAY), this.settings.get("yAxisPiLabels") ? C < 1 ? (I = 2, f = GraphCanvas.MULTIPLES_ARRAY_FRAC_PI, d = GraphCanvas.GRID_ARRAY_FRAC_PI) : (d = GraphCanvas.GRID_ARRAY_PI, f = GraphCanvas.MULTIPLES_ARRAY_PI) : (d = GraphCanvas.GRID_ARRAY, f = GraphCanvas.MULTIPLES_ARRAY);
    for (h = 0; h < c.length; h++) i = e[h], j = Math.ceil(Math.log(B / i) / Math.log(H)), k = i * Math.pow(H, j), k < F && (F = k, g = h);
    D = c[g];
    for (h = 0; h < d.length; h++) i = f[h], j = Math.ceil(Math.log(C / i) / Math.log(I)), k = i * Math.pow(I, j), k < G && (G = k, l = h);
    return E = d[l], e == f && (m = 2, n = v / z / (w / A), n >= 1 && n <= m ? (F = G, D = E) : n <= 1 && n >= 1 / m && (G = F, E = D)), o = Math.ceil(Math.log(F) / Math.log(10)), p = Math.ceil(Math.log(G) / Math.log(10)), q = GraphCanvas.roundForLabel(F), r = GraphCanvas.roundForLabel(G), s = q / D, t = r / E, u = Math.max(s, t), {
        labX10: 1 / o,
        labY10: 1 / p,
        labX: q,
        labY: r,
        resX: s,
        resY: t,
        resRadius: u
    }
}, GraphCanvas.isNearInteger = function (a, b) {
    var c;
    return b = b || 1e-4, c = a - Math.floor(a), c <= b || c >= 1 - b
}, GraphCanvas.prototype.isHidden = function () {
    return this.hidden
}, GraphCanvas.prototype.show = function () {
    if (!this.hidden) return;
    this.hidden = !1
}, GraphCanvas.prototype.hide = function () {
    if (this.hidden) return;
    this.hidden = !0
}, MAX_DOTTED_SEGMENTS = 1e3, DashedDrawer.prototype.start = function (a, b) {
    this.px = a, this.py = b, this.ctx.beginPath()
}, DashedDrawer.prototype.next = function (a, b) {
    var c, d, e, f = this.pattern[this.pstate],
        g = Math.sqrt(Math.pow(a - this.px, 2) + Math.pow(b - this.py, 2));
    if (g > 1e-5) {
        while (g + this.dstaccum >= f) c = a - this.px, d = b - this.py, e = f - this.dstaccum, c *= e / g, d *= e / g, this.pstate == 0 && (this.ctx.stroke(), this.ctx.beginPath(), this.ctx.moveTo(this.px, this.py), this.ctx.lineTo(this.px + c, this.py + d)), this.dstaccum = 0, this.px += c, this.py += d, this.pstate = 1 - this.pstate, f = this.pattern[this.pstate], g -= e;
        this.pstate == 0 && (this.ctx.stroke(), this.ctx.beginPath(), this.ctx.moveTo(this.px, this.py), this.ctx.lineTo(a, b))
    }
    this.px = a, this.py = b, this.dstaccum += g
}, DashedDrawer.prototype.skip = function (a, b) {
    this.px = a, this.py = b
}, DashedDrawer.prototype.close = function () {
    this.ctx.stroke(), this.pstate = 0, this.dstaccum = 0, this.px = null, this.py = null
};;
(function () {
    var a;
    Ember.Handlebars.registerHelper("listAttrs", function (a) {
        var b = Ember.getPath(this, a),
            c = "class='key do-not-blur" + (b.aClass ? " " + b.aClass : "") + "'";
        return b.key || b.text ? (b.key ? c += " key='" + b.key + "'" : c += " text='" + b.text + "'", c) : (b.isFunc && (b.paste = "\\" + b.html + " \\left(\\right)", b.leftArrow = 1, b.wrapSelected = !0), b.is2argFunc && (b.paste = "\\" + b.html + " \\left(,\\right)", b.leftArrow = 2, b.wrapLeftArrow = 1, b.wrapSelected = !0), b.wrapSelected && (c += " wrapSelected"), b.leftArrow && (c += " leftArrow='" + b.leftArrow + "'"), b.wrapLeftArrow && (c += " wrapLeftArrow='" + b.wrapLeftArrow + "'"), b.fullExpression && (c += " fullExpression='" + b.fullExpression + "'"), b.paste ? c += " paste='" + b.paste + "'" : c += " text='" + b.html + "'", c)
    }), Ember.Handlebars.registerHelper("tdprops", function (a) {
        var b = Ember.getPath(this, a),
            c = "";
        return b.more && (b.tdClass = b.tdClass ? b.tdClass + " more" : "more"), b.colspan && (c += " colspan='" + b.colspan + "'"), b.tdClass && (c += " class='" + b.tdClass + "'"), c
    }), a = Ember.View.create({
        templateName: "desmos_keypad",
        rows: [{
            keys: [{
                props: {
                    html: "7"
                }
            }, {
                props: {
                    html: "8"
                }
            }, {
                props: {
                    html: "9"
                }
            }, {
                props: {
                    html: "&divide;",
                    text: "/",
                    tdClass: "divider"
                }
            }, {
                props: {
                    html: "a",
                    more: !0,
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "b",
                    more: !0,
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "c",
                    more: !0,
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "d",
                    more: !0,
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "f",
                    more: !0,
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "g",
                    more: !0,
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "r",
                    more: !0,
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "&theta;",
                    text: "theta",
                    more: !0,
                    tooltip: "<b>Theta</b> You can also type <u>t</u><u>h</u><u>e</u><u>t</u><u>a</u><br>Try graphing: r = sin(3&theta;)"
                }
            }, {
                props: {
                    html: "t",
                    more: !0,
                    aClass: "mathy",
                    tdClass: "divider"
                }
            }, {
                props: {
                    html: "(",
                    text: "("
                }
            }, {
                props: {
                    html: ")",
                    text: ")"
                }
            }, {
                props: {
                    html: "<i class='icon-circle-arrow-left'></i> &nbsp;delete",
                    key: "Backspace",
                    colspan: 2,
                    tdClass: "backspace"
                }
            }]
        }, {
            keys: [{
                props: {
                    html: "4"
                }
            }, {
                props: {
                    html: "5"
                }
            }, {
                props: {
                    html: "6"
                }
            }, {
                props: {
                    html: "&times;",
                    text: "*",
                    tdClass: "divider"
                }
            }, {
                props: {
                    html: "sin",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "cos",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "tan",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "csc",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "sec",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "cot",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "arcsin",
                    isFunc: !0,
                    more: !0,
                    aClass: "smallfont"
                }
            }, {
                props: {
                    html: "arccos",
                    isFunc: !0,
                    more: !0,
                    aClass: "smallfont"
                }
            }, {
                props: {
                    html: "arctan",
                    isFunc: !0,
                    more: !0,
                    aClass: "smallfont",
                    tdClass: "divider"
                }
            }, {
                props: {
                    html: "x",
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "y",
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "&radic;",
                    text: "\\sqrt ",
                    wrapSelected: !0,
                    tooltip: "<b>Square Root</b> you can also type <u>s</u><u>q</u><u>r</u><u>t</u>"
                }
            }, {
                props: {
                    html: "a<sup>b</sup>",
                    text: "^",
                    aClass: "mathy",
                    tooltip: "<b>Exponent</b> You can also type <u>^</u>"
                }
            }]
        }, {
            keys: [{
                props: {
                    html: "1"
                }
            }, {
                props: {
                    html: "2"
                }
            }, {
                props: {
                    html: "3"
                }
            }, {
                props: {
                    html: "&ndash;",
                    text: "-",
                    tdClass: "divider"
                }
            }, {
                props: {
                    html: "e",
                    more: !0,
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "ln",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "log<sub><i>a</i></sub>",
                    paste: "\\log_{} \\left(\\right)",
                    leftArrow: 3,
                    wrapLeftArrow: 1,
                    wrapSelected: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "&sum;",
                    text: "sum",
                    more: !0,
                    tooltip: "<b>Sum</b> You can also type <u>s</u><u>u</u><u>m</u>"
                }
            }, {
                props: {
                    html: "&prod;",
                    text: "prod",
                    more: !0,
                    tooltip: "<b>Product</b> You can also type <u>p</u><u>r</u><u>o</u><u>d</u>"
                }
            }, {
                props: {
                    html: "n",
                    more: !0,
                    aClass: "mathy"
                }
            }, {
                props: {
                    html: "a<sub>b</sub>",
                    text: "_",
                    more: !0,
                    aClass: "mathy",
                    tooltip: "<b>Subscript</b> you can also type <u>_</u>"
                }
            }, {
                props: {
                    html: "&le;",
                    text: "<=",
                    more: !0
                }
            }, {
                props: {
                    html: "&ge;",
                    text: ">=",
                    more: !0,
                    tdClass: "divider"
                }
            }, {
                props: {
                    html: "&lt;",
                    text: "<"
                }
            }, {
                props: {
                    html: "&gt;",
                    text: ">"
                }
            }, {
                props: {
                    html: "&uarr;",
                    key: "Up",
                    aClass: "uarr"
                }
            }, {
                props: {
                    html: "&pi;",
                    text: "pi",
                    tooltip: "<b>Pi (3.14159...)</b> you can also type <u>p</u><u>i</u>"
                }
            }]
        }, {
            keys: [{
                props: {
                    html: "0"
                }
            }, {
                props: {
                    html: "."
                }
            }, {
                props: {
                    html: "="
                }
            }, {
                props: {
                    html: "+",
                    tdClass: "divider"
                }
            }, {
                props: {
                    html: "ceil",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "floor",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "round",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "abs",
                    isFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "min",
                    is2argFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "max",
                    is2argFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "lcm",
                    is2argFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "nCr",
                    is2argFunc: !0,
                    more: !0
                }
            }, {
                props: {
                    html: "!",
                    more: !0,
                    tdClass: "divider"
                }
            }, {
                props: {
                    html: "[<i>a</i>, <i>b</i>]",
                    fullExpression: "\\left[1,1\\right] ",
                    tooltip: "<b>Points &amp; parametric</b>Try: [3,5] or [sin(t)+t,&nbsp;cos(t)+1]"
                }
            }, {
                props: {
                    html: "&larr;",
                    key: "Left",
                    aClass: "larr"
                }
            }, {
                props: {
                    html: "&darr;",
                    key: "Down",
                    aClass: "darr"
                }
            }, {
                props: {
                    html: "&rarr;",
                    key: "Right",
                    aClass: "rarr"
                }
            }]
        }],
        minimizedDidChange: function () {
            this.get("minimized") ? this.$().addClass("minimized") : this.$().removeClass("minimized")
        }.observes("minimized"),
        hide: function (a) {
            this.set("minimized", !0), a.preventDefault()
        },
        show: function (a) {
            this.set("minimized", !1), a.preventDefault()
        },
        refocus: function () {
            Desmos.expressions.setSelected(0)
        },
        setIsBlurred: function (a) {
            this.set("isBlurred", a), a ? this.$().addClass("isBlurred") : this.$().removeClass("isBlurred")
        },
        showBlurredMessage: function () {
            return this.get("isBlurred") && !this.get("minimized")
        }.property("isBlurred", "minimized"),
        height: function () {
            return this.get("minimized") ? 0 : this.get("div_height")
        }.property("minimized", "div_height"),
        didInsertElement: function () {
            this.set("div_height", this.$().height()), IS_IE8 && $("#keypad, #keypad *").disableTextSelection(), Browser.isTouch() ? $(".help-tooltip").hide() : this.$().tipsy({
                fade: "fast",
                title: "tooltip",
                wait: 500,
                live: !0,
                delegate: ".help-tooltip",
                gravity: "s",
                html: !0
            })
        },
        resize: function () {
            window.onResize && window.onResize()
        }.observes("height"),
        showExpandedDidChange: function () {
            this.get("showExpanded") ? (this.$().addClass("expanded"), this.$().children("#keypad_interior").removeClass("unexpanded")) : (this.$().removeClass("expanded"), this.$().children("#keypad_interior").addClass("unexpanded"))
        }.observes("showExpanded"),
        showExpanded: function () {
            return this.get("expanded") && !this.get("isBlurred")
        }.property("expanded", "isBlurred"),
        expand: function () {
            this.set("expanded", !0)
        },
        contract: function () {
            this.set("expanded", !1)
        },
        buttonClicked: function (a) {
            var b = $(a.target).closest(".key");
            b.addClass("clicking"), setTimeout(function () {
                b.removeClass("clicking")
            }, 120);
            var c = b.attr("wrapSelected") !== undefined,
                d = parseInt(b.attr("leftArrow")),
                e = b.attr("paste"),
                f = b.attr("key"),
                g = b.attr("text"),
                h = b.attr("fullExpression"),
                i = Desmos.expressions.getActiveMathquill();
            if (!i.length) return;
            var j = c ? i.mathquill("selection") : "";
            j && (j = j.slice(1, -1));
            try {
                if (h) if ($.trim(i.mathquill("latex")) == "") i.trigger("custom_paste", h);
                else {
                    var k = Desmos.expressions.getSelected(),
                        l = k.getPath("index"),
                        m = Desmos.ExpressionObject.create({
                            selected: !0,
                            latex: h
                        });
                    Desmos.expressions.list.insertAt(l + 1, m)
                } else if (e) i.trigger("custom_paste", e);
                else if (f) i.mathquill("onKey", f);
                else for (var n = 0; n < g.length; n++) i.mathquill("onText", g.charAt(n))
            } catch (a) {}
            if (d > 0) for (var n = d - 1; n >= 0; n--) i.mathquill("onKey", "Left");
            else if (d < 0) for (var n = Math.abs(d) - 1; n >= 0; n--) i.mathquill("onKey", "Right");
            if (j) {
                i.mathquill("write", j);
                for (var n = d - parseInt(b.attr("wrapLeftArrow")); n > 0; n--) i.mathquill("onKey", "Right")
            }
        }
    }), $(function () {
        a.appendTo("#keypad")
    }), Desmos.keypadView = a
})(), $(document).ready(function () {
    $(document).on("mousedown", function (a) {
        $(a.target).closest(".do-not-blur").length && !$(a.target).closest(".do-blur").length && a.preventDefault()
    })
});;
(function () {
    function b() {
        var b = a.shift();
        return a.push(b), b
    }
    var a = ["#8064A2", "#F79646", "#000000", "#4F81BD", "#9BBB59", "#C0504D"];
    Desmos.ExpressionObject = Ember.Object.extend({
        nextId: [1],
        index: -1,
        selected: !1,
        onStateWillChange: function (a, b, c) {
            this["__" + b] = c
        }.observesBefore("latex", "domain.min", "domain.max", "color", "userRequestedGraphing"),
        onStateDidChange: function (a, b, c) {
            var d, e, f;
            if (!this.initCalled) return;
            d = this["__" + b], e = this.id, f = Desmos.Transaction.create({
                type: Desmos.Transaction.RESPONSE_TO_CHANGE,
                undo: function () {
                    Desmos.expressions.getItemById(e).setPath(b, d)
                },
                redo: function () {
                    Desmos.expressions.getItemById(e).setPath(b, c)
                }
            }), Desmos.undoRedo.addTransaction(f)
        }.observes("latex", "domain.min", "domain.max", "color", "userRequestedGraphing"),
        onColorDidChange: function () {
            this.initCalled && this.get("isGraphed") && this.requestGraph()
        }.observes("color"),
        onExpressionDidChange: function () {
            this.initCalled && this.get("isDomainValid") && this.requestParse()
        }.observes("latex", "domain.min", "domain.max"),
        getParsableObject: function () {
            var a = this.get("domain");
            return a && (a = {
                min: a.min,
                max: a.max
            }), {
                id: this.get("id"),
                latex: this.get("latex"),
                domain: a
            }
        },
        requestGraph: function () {
            $(Desmos.expressions).trigger("graph", [this.get("id"), this.get("color")])
        },
        requestUngraph: function () {
            $(Desmos.expressions).trigger("ungraph", this.get("id"))
        },
        requestParse: function () {
            $(Desmos.expressions).trigger("addExp", this.getParsableObject())
        },
        requestUnparse: function () {
            $(Desmos.expressions).trigger("removeExp", this.get("id"))
        },
        requestInvalidateGraph: function () {
            $(Desmos.expressions).trigger("invalidate", this.get("id"))
        },
        state: function () {
            return this.getProperties("latex", "id", "domain", "color", "userRequestedGraphing", "sliderMin", "sliderMax", "sliderInterval")
        }.property().volatile(),
        onFormulaChange: function () {
            this.get("showSlider") && this.set("sliderValue", this.get("simpleValue")), this.onUpdateGraph()
        }.observes("formula"),
        onUpdateGraph: function () {
            this.get("isGraphed") ? this.requestGraph() : this.requestUngraph()
        }.observes("isGraphed"),
        isGraphed: function () {
            return this.get("isGraphable") && this.get("shouldGraph")
        }.property("isGraphable", "shouldGraph"),
        shouldGraph: function () {
            return ["default", "always"].contains(this.get("userRequestedGraphing"))
        }.property("userRequestedGraphing"),
        isDomainValid: function () {
            var a = this.getPath("domain.min"),
                b = this.getPath("domain.max");
            return isFinite(a) && isFinite(b) && b > a
        }.property("domain.min", "domain.max"),
        onDomainChange: function () {
            this.get("isDomainValid") && this.get("lastValidDomain").setProperties(this.get("domain"))
        }.observes("domain.min", "domain.max"),
        revertToLastValidDomain: function () {
            this.get("domain").setProperties(this.get("lastValidDomain"))
        },
        showError: function () {
            return this.get("error") && this.get("userRequestedError")
        }.property("error", "userRequestedError"),
        error: function () {
            return this.get("formula") ? this.get("formula").getError() : "no formula set"
        }.property("formula"),
        isGraphable: function () {
            return !this.get("error") && !this.get("isEmpty") && this.get("formula").is_graphable()
        }.property("formula"),
        evaluation: function () {
            var a, b, c, d, e, f;
            if (!this.get("showEvaluation")) return "";
            a = this.get("dependentLabel"), b = this.get("formula").getZeroValues(), c = [];
            for (d = 0; d < b.length; d++) e = b[d], e.val === undefined ? e.val = "false" : isNaN(e.val) ? e.val = "undefined" : e.val === !0 ? e.val = "true" : b.length === 1 ? e.val = Number(e.val.toFixed(8)) : e.val = Number(e.val.toFixed(4)), f = e.operator, f == "<=" && (f = "&leq;"), f == ">=" && (f = "&geq;"), a ? c.push(a + " " + f + " " + e.val) : c.push(e.val);
            return c.length === 0 ? "" : c.join("&nbsp;&nbsp; or &nbsp;&nbsp;")
        }.property("formula"),
        dependent: function () {
            return this.get("formula") && this.get("formula").getAssignment()
        }.property("formula"),
        dependentLabel: function () {
            var a = this.get("dependent");
            return a ? (a = $("<span>" + a + "</span>").mathquill("editable").mathquill("html"), a = "<span class='mathquill-rendered-math'>" + a + "</span>", a) : ""
        }.property("dependent"),
        variables: function () {
            var a = this.get("formula");
            return a ? a.getVariables() : []
        }.property("formula"),
        showSlider: function () {
            return !!this.get("formula") && !! this.get("formula").is_slidable()
        }.property("formula"),
        simpleValue: function () {
            return this.get("formula") ? this.get("formula").getSimpleConstant() : NaN
        }.property("formula"),
        showEvaluation: function () {
            var a;
            return this.get("error") || !isNaN(this.get("simpleValue")) ? !1 : this.get("variables").length || this.get("showSlider") ? !1 : (a = this.get("formula"), a && a.isSequenceOfLists() ? !1 : !0)
        }.property("formula"),
        showDomain: function () {
            return !!this.get("formula") && !! this.get("formula").is_parametric()
        }.property("formula"),
        isEmpty: function () {
            return this.get("latex").split(" ").join("") === ""
        }.property("latex"),
        init: function () {
            this._super(), this.id ? this.nextId[0] <= this.id && (this.nextId[0] = this.id + 1) : this.set("id", this.nextId[0]++), this.get("color") ? typeof this.get("color") == "object" && this.set("color", this.get("color").value) : this.set("color", b()), this.get("userRequestedGraphing") === undefined && this.set("userRequestedGraphing", "default"), this.get("latex") === undefined && this.set("latex", ""), this.get("lastValidDomain") === undefined && this.set("lastValidDomain", Ember.Object.create({
                min: 0,
                max: 10
            })), this.get("domain") === undefined ? this.set("domain", Ember.Object.create({
                min: 0,
                max: 10
            })) : this.set("domain", Ember.Object.create(this.get("domain"))), this.initCalled = !0
        }
    }), Desmos.ArrayController = Ember.ArrayController.extend({
        content: [],
        onTime: 10,
        offTime: 20,
        renderNone: function () {
            var a, b, c, d, e;
            if (IS_IE8) return;
            a = this.get("content").toArray(), b = (new Date).getTime(), c = this, d = [];
            for (e = 10; e < a.length; e++) a[e].set("renderNone", !0), d.push(a[e]);
            d = d.reverse(), this.set("unrendered_content", d), Ember.run.currentRunLoop && Ember.run.currentRunLoop.flush(), setTimeout(function () {
                c.renderSome(d, b)
            }, this.get("offTime"))
        }.observes("content"),
        renderSome: function (a, b) {
            var c, d, e, f = this.get("unrendered_content");
            if (!f || f != a) return;
            c = (new Date).getTime() + this.get("onTime");
            while (f.length && (new Date).getTime() <= c) d = f.pop(), d.set("renderNone", !1), Ember.run.currentRunLoop && Ember.run.currentRunLoop.flush();
            f.length && (e = this, setTimeout(function () {
                e.renderSome(a, b)
            }, this.get("offTime")))
        }
    }), Desmos.ExpressionListView = Ember.View.extend({
        templateName: "expression_list",
        elementId: "exppanel-ember",
        list: Desmos.ArrayController.create({
            arrayContentWillChange: function (a, b, c) {
                this._super(a, b, c), !this.doingMove && b === 1 && c === 0 && this.onRemove(a)
            },
            arrayContentDidChange: function (a, b, c) {
                this._super(a, b, c), !this.doingMove && b === 0 && c === 1 && this.onAdd(a)
            },
            onAdd: function (a) {
                var b, c, d = this,
                    e = this.objectAt(a);
                e.requestParse(), b = e.get("state"), c = Desmos.Transaction.create({
                    type: Desmos.Transaction.RESPONSE_TO_CHANGE,
                    undo: function () {
                        d.removeAt(a)
                    },
                    redo: function () {
                        d.insertAt(a, Desmos.ExpressionObject.create(b))
                    }
                }), Desmos.undoRedo.addTransaction(c)
            },
            onRemove: function (a) {
                var b, c, d = this,
                    e = this.objectAt(a);
                e.requestUnparse(), b = e.get("state"), c = Desmos.Transaction.create({
                    type: Desmos.Transaction.RESPONSE_TO_CHANGE,
                    undo: function () {
                        d.insertAt(a, Desmos.ExpressionObject.create(b))
                    },
                    redo: function () {
                        d.removeAt(a)
                    }
                }), Desmos.undoRedo.addTransaction(c)
            }
        }),
        didInsertElement: function () {
            onResize(), $("#loading_div").fadeOut(), $("#grapher").show(), this.$().tipsy({
                fade: "fast",
                title: "tooltip",
                wait: 500,
                live: !0,
                delegate: ".tooltip",
                gravity: "n"
            }), this.$().tipsy({
                fade: "fast",
                title: "tooltip",
                wait: 500,
                live: !0,
                delegate: ".graph-icon",
                gravity: "nw"
            })
        },
        onAddExpression: function () {
            var a = Desmos.ExpressionObject.create({
                selected: !0
            });
            this.list.pushObject(a)
        },
        reassignIndices: function () {
            var a, b = this.list.get("length");
            for (a = 0; a < b; a++) this.list.objectAt(a).set("index", a)
        }.observes("list.length"),
        getWidth: function () {
            return this.$().children("#exppanel").outerWidth()
        },
        getSelected: function () {
            return this.list.findProperty("selected", !0)
        },
        setSelected: function (a) {
            var b, c = a;
            typeof a == "number" && (c = this.list.objectAt(a)), c ? c.set("selected", !0) : (b = this.getSelected(), b && b.set("selected", !1))
        },
        getItemByIndex: function (a) {
            return this.list.objectAt(a)
        },
        getItemsByIndexRange: function (a, b) {
            var c, d = [];
            for (c = a; c <= b; c++) d.push(this.list.objectAt(c));
            return d
        },
        getItemById: function (a) {
            return this.list.findProperty("id", parseInt(a, 10))
        },
        moveItemTo: function (a, b) {
            var c = function (a, b) {
                    var c = Desmos.expressions.list,
                        d = c.get("length");
                    if (a < 0 || b < 0 || a >= d || b >= d) return;
                    if (a == b) return;
                    var e = c.objectAt(a);
                    c.doingMove = !0, c.removeAt(a), c.insertAt(b, e), c.doingMove = !1, Ember.run.currentRunLoop && Ember.run.currentRunLoop.flush()
                },
                d = Desmos.Transaction.create({
                    type: Desmos.Transaction.CAUSE_OF_CHANGE,
                    undo: function () {
                        c(b, a)
                    },
                    redo: function () {
                        c(a, b)
                    }
                });
            Desmos.undoRedo.addTransaction(d)
        },
        isEmpty: function () {
            return this.list.get("length") === 0 ? !0 : this.list.get("length") > 1 ? !1 : this.list.objectAt(0).get("latex") === ""
        },
        getState: function () {
            var a, b = [],
                c = this.getPath("list.length");
            for (a = 0; a < c; a++) b.push(this.list.objectAt(a).get("state"));
            return {
                list: b
            }
        },
        setState: function (a) {
            var b, c, d, e = [],
                f = [],
                g = ["default", "always", "never"];
            for (b = 0; b < a.list.length; b++) c = a.list[b], c.renderShell = !0, c.hasOwnProperty("userRequestedGraphing") ? g.contains(c.userRequestedGraphing) || (c.userRequestedGraphing = "default") : c.hasOwnProperty("graphed") ? c.userRequestedGraphing = c.graphed ? "always" : "never" : c.userRequestedGraphing = "default", d = Desmos.ExpressionObject.create(c), e.push(d), f.push(d.getParsableObject());
            this.list.set("content", e), $(Desmos.expressions).trigger("completeState", [f])
        },
        modifyState: function () {},
        getAllIds: function () {},
        getAllSliders: function () {},
        expressionAtPoint: function (a, b, c) {
            var d, e, f, g = this.list,
                h = 0,
                i = g.get("length") - 1;
            while (h <= i) {
                d = h + Math.floor((i - h) / 2), e = g.objectAt(d), f = e.getPath("view.bounds");
                if (!f || f.top > b) i = d - 1;
                else {
                    if (!(f.bottom < b)) return c ? e.getPath("view.dom") : e;
                    h = d + 1
                }
            }
            return c ? $() : null
        },
        expressionAbovePoint: function (a, b, c) {
            var d, e, f, g = this.list,
                h = 0,
                i = g.get("length") - 1,
                j = null;
            while (h <= i) d = h + Math.floor((i - h) / 2), e = g.objectAt(d), f = e.getPath("view.bounds"), !f || f.top > b ? i = d - 1 : (h = d + 1, j = e);
            return j ? c ? j.getPath("view.dom") : j : c ? $() : null
        },
        getActiveMathquill: function () {
            return $(document.activeElement).closest(".mathquill-editable")
        },
        onChange: function (a) {
            var b, c, d;
            for (c in a) b = a[c], d = this.getItemById(c), d && b && (d.requestInvalidateGraph(), d.set("formula", b))
        },
        onStatus: function (a, b) {
            var c;
            b.busy && (b = "busy"), b.waiting && (b = "waiting"), c = this.getItemById(a), c && c.set("status", b)
        }
    }), Desmos.ExpressionView = Ember.View.extend({
        list: function () {
            return this.get("parentView")
        }.property().cacheable(),
        didInsertElement: function () {
            this.setPath("expression.view", this)
        },
        dom: function () {
            return this.$(".expressionitem")
        }.property().cacheable(),
        bounds: function () {
            var a, b, c = this.get("dom"),
                d = c.offset();
            return d ? (a = d.top, b = c.height(), {
                top: a,
                bottom: a + b
            }) : null
        }.property().volatile(),
        indexLabel: function () {
            return this.getPath("expression.index") + 1
        }.property("expression.index"),
        onSelectedChange: function () {
            var a, b, c;
            if (this.getPath("expression.selected")) {
                this.setPath("expression.renderShell", !1), a = this.get("expression"), b = this.getPath("list.list").filterProperty("selected", !0);
                for (c = 0; c < b.length; c++) b[c] !== a && b[c].set("selected", !1)
            }
        }.observes("expression.selected"),
        colorTooltip: function () {
            return this.getPath("expression.showColors") ? "hide color picker" : "show color picker"
        }.property("expression.showColors"),
        onClose: function () {
            this.getPath("list.list.length") > 1 ? this.getPath("list.list").removeObject(this.get("expression")) : this.setPath("expression.latex", "")
        },
        onColor: function () {
            var a = !this.getPath("expression.showColors");
            this.setPath("expression.showColors", a)
        },
        onDuplicate: function () {
            var a, b = this.getPath("expression.index"),
                c = this.getPath("expression.state");
            c.selected = !0, delete c.id, a = Desmos.ExpressionObject.create(c), Desmos.expressions.list.insertAt(b + 1, a)
        },
        onMouseSelect: function (a) {
            if (a.wasHandled()) return;
            a.handle(), this.setPath("expression.selected", !0), a.preventDefault(), a.type === "mousedown" && !$(a.target).closest(".mathquill-editable").length && this.$(".mathquill-editable").trigger(a)
        },
        onDragStart: function (a) {
            this.get("list").setSelected(null), this.setPath("expression.dragging", !0), a.preventDefault()
        }
    }), Desmos.MathquillView = Ember.View.extend({
        didInsertElement: function () {
            var a, b, c = this,
                d = this.$().mathquill("editable");
            this.get("expression").set("mathquill", d), this.getPath("expression.selected") && setTimeout(function () {
                d.mathquill("focus")
            }, 1), d.bind("render upPressed downPressed enterPressed upwardDelete downwardDelete keydown blur focusin focus focusout", function (a) {
                c.fire("onEvent", a)
            }), a = this.getPath("expression.latex") || "", b = (new Date).getTime(), d.mathquill("latex", a)
        },
        latexChange: function () {
            var a = this.getPath("expression.latex");
            a !== undefined && this.$().mathquill("latex") != a && this.$().mathquill("latex", a)
        }.observes("expression.latex"),
        selectedChange: function () {
            this.getPath("expression.selected") ? this.$().mathquill("focus") : this.$().mathquill("clearSelection").mathquill("blur")
        }.observes("expression.selected"),
        list: function () {
            return this.getPath("parentView.parentView")
        }.property().cacheable(),
        onEvent: function (a) {
            var b, c, d, e, f;
            switch (a.type) {
            case "render":
                f = this.get("expression"), f && f.set("latex", this.$().mathquill("latex"));
                return;
            case "focus":
            case "focusin":
                this.get("expression").set("selected", !0);
                return;
            case "focusout":
            case "blur":
                this.get("expression").set("selected", !1);
                return;
            case "upPressed":
                b = this.getPath("expression.index"), c = this.getPath("list.list").objectAt(b - 1), c && (this.get("list").notifyPropertyChange("delayNextExpansion"), c.set("selected", !0), b + 1 === this.getPath("list.list.length") && this.getPath("expression.isEmpty") && this.getPath("list.list").removeAt(b));
                return;
            case "downPressed":
                b = this.getPath("expression.index"), d = this.getPath("list.list").objectAt(b + 1), d ? (this.get("list").notifyPropertyChange("delayNextExpansion"), d.set("selected", !0)) : (e = Desmos.ExpressionObject.create({
                    selected: !0
                }), b = this.getPath("expression.index"), this.getPath("list.list").insertAt(b + 1, e));
                return;
            case "enterPressed":
                e = Desmos.ExpressionObject.create({
                    selected: !0
                }), b = this.getPath("expression.index"), this.getPath("list.list").insertAt(b + 1, e);
                return;
            case "upwardDelete":
                b = this.getPath("expression.index"), c = this.getPath("list.list").objectAt(b - 1), c && (this.get("list").notifyPropertyChange("delayNextExpansion"), c.set("selected", !0), this.getPath("list.list").removeAt(b));
                return;
            case "downwardDelete":
                b = this.getPath("expression.index"), d = this.getPath("list.list").objectAt(b + 1), d && (this.get("list").notifyPropertyChange("delayNextExpansion"), d.set("selected", !0), this.getPath("list.list").removeAt(b));
                return;
            case "keydown":
                a.which == 27 && this.get("expression").set("selected", !1);
                return
            }
        }
    }), Desmos.expressions = Desmos.ExpressionListView.create(), Desmos.TimerModules.load("expressions.overflows", Desmos.expressions), Desmos.TimerModules.load("expressions.ensurevisible", Desmos.expressions), Desmos.TimerModules.load("expressions.dragdrop", Desmos.expressions), Desmos.TimerModules.load("expressions.renderviewport", Desmos.expressions), Desmos.TimerModules.load("expressions.togglekeypad", Desmos.expressions, Desmos.keypadView), $(function () {
        Desmos.expressions.append()
    })
})();;

function ColorPicker() {
    var a, b, c = this;
    return this.__openedColor = null, this.__colorIndex = -1, this.__loaded = !1, this.disabler = $(document.createElement("div")).addClass("colorpicker_disabler"), this.picker = $(document.createElement("div")).addClass("colorpicker"), this.circle = $(document.createElement("div")).addClass("circle").append("<div class='graphic'></div>"), this.canvas = $("<canvas width='" + ColorPicker.WIDTH + "' height='" + ColorPicker.HEIGHT + "'></canvas>"), typeof G_vmlCanvasManager != "undefined" && G_vmlCanvasManager.initElement(this.canvas.get(0)), this.picker.append(this.canvas).append(this.circle), a = this.ctx = this.canvas.get(0).getContext("2d"), b = new Image, b.onload = function () {
        a.drawImage(b, 0, 0)
    }, b.src = ColorPicker.dataURL, $(document).mousemove(function (a) {
        ColorPicker.mouseX = a.pageX, ColorPicker.mouseY = a.pageY
    }), $("body").bind("touchmove", function (a) {
        a = a.originalEvent.touches[0], ColorPicker.mouseX = a.pageX, ColorPicker.mouseY = a.pageY
    }), this.disabler.mousedown(function (a) {
        c.onCloseEvent(a)
    }), this.picker.mousedown(function (a) {
        c.onCloseEvent(a)
    }), this.picker.bind("touchmove", function (a) {
        a.preventDefault(), c.setToMouse(a.originalEvent.touches[0])
    }), this.picker.mousemove(function (a) {
        c.setToMouse(a)
    }), $("body").append(this.disabler).append(this.picker), this.picker.hide(), this.disabler.hide(), this
}
ColorPicker.prototype.setToMouse = function (a) {
    var b, c, d = this.picker.offset();
    a && (ColorPicker.mouseX = a.pageX, ColorPicker.mouseY = a.pageY), b = ColorPicker.mouseX - d.left, c = ColorPicker.mouseY - d.top, b < 0 ? b = 0 : b > ColorPicker.WIDTH - 1 && (b = ColorPicker.WIDTH - 1), c < 0 ? c = 0 : c > ColorPicker.HEIGHT - 1 && (c = ColorPicker.HEIGHT - 1), this.setColorIndex(this.__getIndex(b, c), !0)
}, ColorPicker.prototype.close = function (a) {
    if (!this.picker.is(":visible")) return;
    a || $(this).trigger("setColor", this.__openedColor), a && (this.setToMouse(), $(this).trigger("commitColor", this.getIndexColor(this.__colorIndex))), $(document).append(this.picker), this.picker.hide(), this.disabler.hide(), $(this).trigger("close")
}, ColorPicker.prototype.onCloseEvent = function (a) {
    var b;
    a.preventDefault(), a.stopPropagation(), b = !1, a && (b = a.target == this.picker[0] || a.target == this.circle[0]), this.close(b)
}, ColorPicker.prototype.open = function (a) {
    var b, c;
    if (this.picker.is(":visible")) return;
    this.picker.show(), this.__openedColor = a, this.setColorIndex(ColorPicker.DEFAULT_COLOR_INDEX), b = $(document).find(":focus"), c = b.hasClass(".colorpicker-focus-enabled").length > 0 ? b : b.closest(".colorpicker-focus-enabled"), c.length == 0 && b.blur(), this.disabler.show()
}, ColorPicker.prototype.__getIndex = function (a, b) {
    return a + b * ColorPicker.WIDTH
}, ColorPicker.prototype.__getColorXY = function (a) {
    var b = a % ColorPicker.WIDTH,
        c = a / ColorPicker.WIDTH;
    return b < ColorPicker.WIDTH && c < ColorPicker.HEIGHT && b >= 0 && c >= 0 ? [b, c] : null
}, ColorPicker.prototype.getColorIndex = function () {
    return this.__colorIndex
}, ColorPicker.prototype.setColorIndex = function (a, b) {
    var c, d, e, f;
    a = Math.floor(a), c = this.__getColorXY(a);
    if (!c) return;
    if (a != this.__colorIndex || b) d = 7, e = c[0] - d / 2, f = c[1] - d / 2, this.circle.css("left", e + "px"), this.circle.css("top", f + "px"), this.__colorIndex = a, $(this).trigger("setColor", this.getIndexColor(a))
}, ColorPicker.prototype.getIndexColor = function (a) {
    var b, c = this.__getColorXY(a);
    return c ? (b = this.ctx.getImageData(c[0], c[1], 1, 1).data, "rgb(" + b[0] + "," + b[1] + "," + b[2] + ")") : "rgb(255,255,255)"
}, ColorPicker.WIDTH = 170, ColorPicker.HEIGHT = 140, ColorPicker.DEFAULT_COLOR_INDEX = ColorPicker.WIDTH * Math.floor(ColorPicker.HEIGHT / 2) + Math.floor(ColorPicker.WIDTH / 2), ColorPicker.dataURL = "/assets/grapher/img/color_display_side.png", ColorPicker.getInstance = function () {
    return ColorPicker.instance || (ColorPicker.instance = new ColorPicker), ColorPicker.instance
};;

function ColorThumbnail(a, b) {
    this.width = a, this.height = b, this.color = "#000000", this.thickness = 2, this.dotted = !1, this.fill = !1, this.pointplot = !1
}
ColorThumbnail.prototype.instantiate = function (a) {
    this.node = $('<canvas width="' + this.width + '" height="' + this.height + '"></canvas>'), a.append(this.node), typeof G_vmlCanvasManager != "undefined" && G_vmlCanvasManager.initElement(this.node.get(0)), this.ctx = this.node.get(0).getContext("2d"), this.redraw()
}, IS_IE8 ? ColorThumbnail.prototype.point = function (a, b) {
    var c = this.ctx;
    c.moveTo(a - .5, b - .5), c.lineTo(a - .5, b + .5), c.closePath(), c.lineTo(a + .5, b + .5), c.closePath(), c.lineTo(a + .5, b - .5), c.closePath()
} : ColorThumbnail.prototype.point = function (a, b) {
    var c = this.ctx;
    c.moveTo(a - .1, b - .1), c.lineTo(a - .1, b + .1), c.lineTo(a + .1, b + .1), c.lineTo(a + .1, b - .1), c.closePath()
}, ColorThumbnail.prototype.redraw = function () {
    var a, b;
    if (!this.node) return;
    a = this.ctx, a.clearRect(0, 0, this.width, this.height), a.lineWidth = this.thickness, a.strokeStyle = this.color, a.fillStyle = this.color, a.lineJoin = "round", this.pointplot ? (a.lineWidth = this.thickness * 3.5, a.globalAlpha = .9, a.beginPath(), this.point(this.width * .5, this.height * .5), a.stroke()) : (a.globalAlpha = .7, this.dotted ? (b = new DashedDrawer(a, this.width + this.height), b.start(0, this.height), b.next(this.width, 0), b.close()) : (a.beginPath(), a.moveTo(0, this.height), a.lineTo(this.width, 0), a.stroke()), this.fill && (a.globalAlpha = .4, a.beginPath(), a.moveTo(0, this.height), a.lineTo(this.width, 0), a.lineTo(this.width, this.height), a.closePath(), a.fill())), a.globalAlpha = 1
};;
(function () {
    var a = function (a, b) {
            var c = /([^=><]+[=><]* *)([^ ]+)( *)/;
            return a = a.split("\\space").join(" "), a = a.split("\\le").join("<=").split("\\ge").join(">="), a = a.replace(c, "$1" + b + "$3"), a = a.split(" ").join("\\space").split("<=").join("\\le"), a = a.split(">=").join("\\ge"), a
        };
    Desmos.SliderView = Ember.View.extend({
        tagName: "span",
        classNames: ["slider-container"],
        templateName: "slider_view",
        didInsertElement: function () {
            var a, b, c, d;
            if (this.get("min") === undefined || this.get("max") === undefined) this.onValueDidChange(), Ember.run.sync();
            a = this.$(".slider").position().left, b = this.$(".track"), c = b.position().left, d = c + b.width(), this.set("dimensions", {
                trackLeft: c,
                trackRight: d,
                sliderLeft: a
            })
        },
        onStartDragging: function (a) {
            var b, c, d, e, f, g, h, i, j, k, l, m, n, o;
            a.preventDefault(), a.handle(), b = this, c = this.get("dimensions");
            if (!c) return;
            d = c.trackLeft + c.sliderLeft, e = c.trackRight + c.sliderLeft, f = e - d, g = this.get("min"), h = this.get("max"), i = this.get("snap"), j = (h - g) / f, k = function (a) {
                a.originalEvent.touches ? coords = a.originalEvent.touches[0] : coords = {
                    pageX: a.pageX,
                    pageY: a.pageY
                };
                var b = (coords.pageX - d) / f;
                return Math.min(1, Math.max(0, b))
            }, b.set("thumbDown", !0), l = function (a) {
                var c = k(a),
                    d = g * (1 - c) + h * c;
                if (d <= g) d = g;
                else if (d >= h) d = h;
                else {
                    d = Math.bestRound(d, j);
                    if (i > 0 || i < 0) d = Math.round((d - g) / i) * i + g;
                    d = Number(d.toPrecision(9)), d < g ? d = g : d > h && (d = h)
                }
                b.set("value", d), b.commitSliderValue()
            }, m = null, n = function (a) {
                clearTimeout(m), m = setTimeout(function () {
                    l(a)
                }, 10)
            }, o = function (a) {
                $(document).off("mousemove touchmove", n), $(document).off("mouseup touchend", o), clearTimeout(m), l(a), b.set("thumbDown", !1)
            }, $(document).on("mousemove touchmove", n), $(document).on("mouseup touchend", o), l(a)
        },
        commitSliderValue: function () {
            var b, c = this.get("value"),
                d = this.getPath("expression.id"),
                e = this.getPath("expression.latex"),
                f = a(e, c);
            if (e === f) return;
            b = Desmos.Transaction.create({
                type: Desmos.Transaction.CAUSE_OF_CHANGE,
                compressWith: "<commit_slider_value>",
                undo: function () {
                    var a = Desmos.expressions.getItemById(d);
                    a.setPath("latex", e)
                },
                redo: function () {
                    var a = Desmos.expressions.getItemById(d);
                    a.setPath("latex", f)
                }
            }), Desmos.undoRedo.addTransaction(b)
        },
        onValueDidChange: function () {
            var a, b, c, d, e = this.get("value"),
                f = this.get("min"),
                g = this.get("max");
            f === undefined && (f = -10, this.setPath("expression.sliderMin", f), this.set("min", f)), g === undefined && (g = 10, this.setPath("expression.sliderMax", g), this.set("max", g)), a = null, b = "", e < f ? (b = "sliderMin", oldPropValue = f) : e > g && (b = "sliderMax", oldPropValue = g), b && (c = this.getPath("expression.id"), d = Desmos.Transaction.create({
                type: Desmos.Transaction.BATCHED_CHANGE,
                undo: function () {
                    var a = Desmos.expressions.getItemById(c);
                    a.set(b, oldPropValue)
                },
                redo: function () {
                    var a = Desmos.expressions.getItemById(c);
                    a.set(b, e)
                }
            }), Desmos.undoRedo.addTransaction(d))
        }.observes("value"),
        onPropWillChange: function (a, b, c) {
            this["__" + b] = c
        }.observesBefore("min", "max", "snap"),
        onSnapDidChange: function () {
            var a = this.__snap,
                b = this.get("snap"),
                c = this.getPath("expression.id"),
                d = Desmos.Transaction.create({
                    type: Desmos.Transaction.RESPONSE_TO_CHANGE,
                    undo: function () {
                        var b = Desmos.expressions.getItemById(c);
                        b.set("sliderInterval", a)
                    },
                    redo: function () {
                        var a = Desmos.expressions.getItemById(c);
                        a.set("sliderInterval", b)
                    }
                });
            Desmos.undoRedo.addTransaction(d)
        }.observes("snap"),
        onMinDidChange: function () {
            var b, c, d, e, f, g, h = this.__min;
            if (h === undefined) return;
            b = this.get("min"), c = this.get("value"), d = this.getPath("expression.latex"), e = b > c, f = this.getPath("expression.id"), g = Desmos.Transaction.create({
                type: Desmos.Transaction.CAUSE_OF_CHANGE,
                undo: function () {
                    var a = Desmos.expressions.getItemById(f);
                    a.set("sliderMin", h), e && a.set("latex", d)
                },
                redo: function () {
                    var c = Desmos.expressions.getItemById(f);
                    c.set("sliderMin", b), e && c.set("latex", a(d, b))
                }
            }), Desmos.undoRedo.addTransaction(g)
        }.observes("min"),
        onMaxDidChange: function () {
            var b, c, d, e, f, g, h = this.__max;
            if (h === undefined) return;
            b = this.get("max"), c = this.get("value"), d = this.getPath("expression.latex"), e = b < c, f = this.getPath("expression.id"), g = Desmos.Transaction.create({
                type: Desmos.Transaction.CAUSE_OF_CHANGE,
                undo: function () {
                    var a = Desmos.expressions.getItemById(f);
                    a.set("sliderMax", h), e && a.set("latex", d)
                },
                redo: function () {
                    var c = Desmos.expressions.getItemById(f);
                    c.set("sliderMax", b), e && c.set("latex", a(d, b))
                }
            }), Desmos.undoRedo.addTransaction(g)
        }.observes("max"),
        editingBinding: "expression.editingSlider",
        onEditMin: function (a) {
            this.set("editing", !0), Ember.run.currentRunLoop && Ember.run.currentRunLoop.flush(), a.preventDefault(), this.$(".slider_min").focus().select()
        },
        onEditMax: function (a) {
            this.set("editing", !0), Ember.run.currentRunLoop && Ember.run.currentRunLoop.flush(), a.preventDefault(), this.$(".slider_max").focus().select()
        },
        onEditableClick: function (a) {
            this.lastClickedTime = (new Date).getTime(), this.lastClicked = a.target
        },
        mouseDown: function (a) {
            $(a.target).hasClass("gm_btn") && ($(document.activeElement).blur(), clearTimeout(this.saveAfterBlurTimeout))
        },
        checkInvalid: function (a) {
            var b, c, d, e, f;
            a || (b = this, Ember.run.next(function () {
                b.checkInvalid(!0)
            })), c = parseFloat(this.$(".slider_min").attr("value")), d = parseFloat(this.$(".slider_max").attr("value")), e = this.$(".slider_interval").attr("value"), e = e === "" ? 0 : parseFloat(e), f = !isFinite(c) || !isFinite(d) || c >= d || e < 0, this.set("invalid", f)
        },
        keyDown: function (a) {
            a.which == 13 ? $(document.activeElement).blur() : this.checkInvalid()
        },
        focusIn: function () {
            clearTimeout(this.saveAfterBlurTimeout), this.checkInvalid()
        },
        focusOut: function (a) {
            var b = this;
            this.save(a.target), this.saveAfterBlurTimeout = setTimeout(function () {
                clearTimeout(b.saveAfterBlurTimeout), b.onClose()
            }, 1), this.checkInvalid()
        },
        save: function (a) {
            var b, c;
            a && (b = $(a), c = parseFloat(b.attr("value")), b.hasClass("slider_min") ? c < this.get("max") ? this.set("min", c) : b.attr("value", this.get("min")) : b.hasClass("slider_max") ? c > this.get("min") ? this.set("max", c) : b.attr("value", this.get("max")) : b.hasClass("slider_interval") && (c >= 0 ? this.set("snap", c) : (b.attr("value", ""), this.set("snap", ""))))
        },
        onClose: function () {
            this.set("editing", !1)
        },
        label2html: function (a) {
            var b, c = a,
                d = String(a).split("-").join("");
            return d.length > 4 || d.indexOf("e") != -1 ? (b = Math.floor(Math.log(Math.abs(a)) / Math.LN10), a /= Math.pow(10, b), a = Math.round(a), Math.abs(a) >= 10 && (b++, a < 0 ? a = -1 : a = 1), b >= -3 && b <= 3 ? (d = String(c), d.indexOf("0.") === 0 ? d = d.substr(1) : d.indexOf("-0.") === 0 && (d = "-" + d.substr(2)), d.substr(0, 5)) : a + "x10<span class='sup'>" + b + "</span> ") : String(a)
        },
        snapBinding: "expression.sliderInterval",
        minBinding: "expression.sliderMin",
        minLabel: function () {
            return this.label2html(this.get("min"))
        }.property("min"),
        maxBinding: "expression.sliderMax",
        maxLabel: function () {
            return this.label2html(this.get("max"))
        }.property("max"),
        valueBinding: "expression.sliderValue",
        thumbPosition: function () {
            var a, b, c, d, e, f = this.get("dimensions");
            return f ? (b = this.get("min"), c = this.get("max"), d = this.get("value"), d <= b ? a = f.trackLeft : d >= c ? a = f.trackRight : (e = (d - b) / (c - b), a = f.trackLeft * (1 - e) + f.trackRight * e), "left:" + a + "px") : ""
        }.property("value", "min", "max", "dimensions"),
        zeroPosition: function () {
            var a, b, c = this.get("dimensions");
            return c ? (a = (0 - this.get("min")) / (this.get("max") - this.get("min")), a >= 0 && a <= 1 ? (b = c.trackLeft * (1 - a) + c.trackRight * a, "left:" + b + "px") : "display:none") : ""
        }.property("min", "max", "dimensions"),
        tickMarkHTML: function () {
            var a, b, c = this.get("max"),
                d = this.get("min"),
                e = this.get("snap"),
                f = 100 * e / (c - d);
            f > 0 && f < 3 && (f = 3), a = "";
            if (f > 0 && f < 100) for (b = f; b < 100; b += f) a += '<div class="tick" style="left:' + b + '%"></div>';
            return a
        }.property("min", "max", "snap")
    }), Desmos.CreateSliderView = Ember.View.extend({
        templateName: "create_sliders",
        tagName: "span",
        showAll: function () {
            return this.get("sliderVars").length > 1
        }.property("sliderVars"),
        listedVars: function () {
            var a, b, c, d = this.get("sliderVars"),
                e = [];
            for (a = 0; a < 4 && a < d.length; a++) b = d[a], c = b.split("{").join("").split("}").join("").split("_"), c.length > 1 ? c = c[0] + "<sub>" + c[1] + "</sub>" : c = c[0], e.push({
                name: b,
                label: c
            });
            return e
        }.property("sliderVars"),
        sliderVars: function () {
            var a, b, c, d, e, f, g = this.getPath("expression.formula");
            if (!g) return [];
            if (g.assignment !== null && g.alias.length === 0 && g.variables.length <= 1) return [];
            a = g.expression;
            if (!a || a.type === pVARIABLE || a.type === pCONSTANT || g.is_parametric()) return [];
            b = [], c = {
                x: 1,
                y: 1,
                r: 1
            }, c[this.getPath("expression.dependent")] = 1, d = this.getPath("expression.variables");
            for (e = 0; e < d.length; e++) f = d[e], !(f.toLowerCase() in c) && f.indexOf("\\") === -1 && b.push(f);
            return b
        }.property("expression.formula"),
        onCreateSlider: function (a) {
            var b, c, d, e, f, g, h = $(a.target).closest(".slider_btn_container");
            if (!h.length) return;
            h.hasClass("all") ? b = this.get("sliderVars").slice() : b = [h.attr("var_name")];
            if (!b.length) return;
            c = [];
            for (d = 0; d < b.length; d++) c.push({
                latex: b[d] + "=1",
                sliderMin: -10,
                sliderMax: 10
            });
            e = this.getPath("expression.index"), f = e + 1, g = Desmos.Transaction.create({
                type: Desmos.Transaction.CAUSE_OF_CHANGE,
                undo: function () {
                    var a = Desmos.expressions.list;
                    for (var c = 0; c < b.length; c++) a.removeAt(f)
                },
                redo: function () {
                    var a = Desmos.expressions.list;
                    for (var b = c.length - 1; b >= 0; b--) {
                        var d = Desmos.ExpressionObject.create(c[b]);
                        c[b].id = d.get("id"), a.insertAt(f, d)
                    }
                }
            }), Desmos.undoRedo.addTransaction(g)
        }
    })
})();;
Desmos.DomainView = Ember.View.extend({
    templateName: "domain_view",
    classNames: ["do-blur"],
    editingBinding: "expression.editingDomain",
    invalidBinding: Ember.Binding.not("expression.isDomainValid"),
    startEditing: function () {
        var a;
        this.set("editing", !0), a = this, setTimeout(function () {
            a.$("input").first().focus().select()
        }, 0)
    },
    stopEditing: function () {
        this.set("editing", !1)
    },
    focusIn: function () {
        clearTimeout(this.stopEditingTimeout)
    },
    focusOut: function () {
        var a = this;
        this.stopEditingTimeout = setTimeout(function () {
            clearTimeout(a.stopEditingTimeout), a.stopEditing(), a.getPath("expression").revertToLastValidDomain()
        }, 1)
    },
    domainMinBinding: Ember.Binding.from("expression.domain.min").transform(Desmos.Transforms.asFloat),
    domainMaxBinding: Ember.Binding.from("expression.domain.max").transform(Desmos.Transforms.asFloat)
});;
/*var _gaq = _gaq || [];
_gaq.push(["_setAccount", "UA-22127755-1"]), _gaq.push(["_trackPageview"]), function () {
    var a, b = document.createElement("script");
    b.type = "text/javascript", b.async = !0, b.src = ("https:" == document.location.protocol ? "https://ssl" : "http://www") + ".google-analytics.com/ga.js", a = document.getElementsByTagName("script")[0], a.parentNode.insertBefore(b, a)
}(), window.onerror = function (a, b, c) {
    var d = "[" + b + " (" + c + ")] " + a;
    _gaq.push(["_trackEvent", "Exceptions", "Application", d, null, !0])
}, $("body").ajaxError(function (a, b, c) {
    var d = c.type + " " + window.location.protocol + "//" + window.location.host + c.url + " " + b.status + " (" + b.statusText + ")";
    _gaq.push(["_trackEvent", "Exceptions", "Ajax", d, null, !0])
});
if (!window.console || !console.log) window.console = {
    log: function () {}
};;*/
(function (a) {
    var b;
    a.graphSettings = Ember.Object.create({
        squareAxes: !0,
        showLabels: !0,
        showGrid: !0,
        showAxes: !0,
        xAxisPiLabels: !1,
        yAxisPiLabels: !1,
        degreeMode: !1,
        POIs: !1,
        projectorMode: !1,
        labelSize: function () {
            return this.get("projectorMode") ? 18 : 12
        }.property("projectorMode"),
        majorAxisOpacity: function () {
            return this.get("projectorMode") ? .5 : .2
        }.property("projectorMode"),
        minorAxisOpacity: function () {
            return this.get("projectorMode") ? .15 : .08
        }.property("projectorMode"),
        axisOpacity: function () {
            return this.get("projectorMode") ? .9 : .7
        }.property("projectorMode"),
        axisLineWidth: function () {
            return this.get("projectorMode") ? 2 : 1
        }.property("projectorMode"),
        axisLineOffset: function () {
            return this.get("projectorMode") ? 0 : .5
        }.property("projectorMode"),
        graphLineWidth: function () {
            return this.get("projectorMode") ? 6 : 2
        }.property("projectorMode"),
        pointLineWidth: function () {
            return this.get("projectorMode") ? 15 : 7
        }.property("projectorMode"),
        pixelsPerLabel: function () {
            return this.get("projectorMode") ? 100 : 70
        }.property("projectorMode"),
        labelHangingColor: "rgba(150,150,150,1)",
        labelNormalColor: "rgba(0,0,0,1)"
    }), a.graphSettings.addObserver("projectorMode", function () {
        grapher.inner.redrawAll(), $("body").toggleClass("projector-mode", a.getPath("graphSettings.projectorMode"))
    }), a.graphSettings.addObserver("POIs", function () {
        grapher.showAllPOI(a.getPath("graphSettings.POIs"))
    }), b = Ember.View.create({
        templateName: "graph_settings",
        graphSettingsBinding: "Desmos.graphSettings",
        elementId: "settings-container",
        classNames: ["scrollable"],
        isVisible: !1,
        xinvalidBinding: Ember.Binding.not("isViewportXValid"),
        yinvalidBinding: Ember.Binding.not("isViewportYValid"),
        invalidBinding: Ember.Binding.not("isViewportValid"),
        xMinBinding: Ember.Binding.from("viewport.minx").transform(a.Transforms.asFloat),
        xMaxBinding: Ember.Binding.from("viewport.maxx").transform(a.Transforms.asFloat),
        yMinBinding: Ember.Binding.from("viewport.miny").transform(a.Transforms.asFloat),
        yMaxBinding: Ember.Binding.from("viewport.maxy").transform(a.Transforms.asFloat),
        squareAxesBinding: "viewport.squareAxes",
        lastValidViewport: Ember.Object.create(),
        isViewportXValid: function () {
            return isFinite(this.getPath("viewport.minx")) ? isFinite(this.getPath("viewport.maxx")) ? this.getPath("viewport.minx") < this.getPath("viewport.maxx") : !1 : !1
        }.property("viewport.minx", "viewport.maxx"),
        isViewportYValid: function () {
            return isFinite(this.getPath("viewport.miny")) ? isFinite(this.getPath("viewport.maxy")) ? this.getPath("viewport.miny") < this.getPath("viewport.maxy") : !1 : !1
        }.property("viewport.miny", "viewport.maxy"),
        isViewportValid: function () {
            return this.get("isViewportXValid") && this.get("isViewportYValid")
        }.property("isViewportXValid", "isViewportYValid"),
        onViewportChange: function () {
            this.get("isViewportValid") && this.get("lastValidViewport").setProperties(this.get("viewport").getProperties("minx", "maxx", "miny", "maxy"))
        }.observes("viewport.minx", "viewport.miny", "viewport.maxx", "viewport.maxy"),
        revertToLastValidViewport: function () {
            this.get("viewport").setProperties(this.get("lastValidViewport"))
        },
        focusIn: function (a) {
            clearTimeout(this.stopEditingTimeout)
        },
        focusOut: function (a) {
            var b = this;
            this.stopEditingTimeout = setTimeout(function () {
                clearTimeout(b.stopEditingTimeout), b.revertToLastValidViewport()
            }, 1)
        }
    }), $(function () {
        b.set("viewport", grapher.viewport), b.append()
    }), a.SettingsView = b
})(Desmos);;
(function () {
    var a = Ember.View.create({
        templateName: "help",
        elementId: "help-container",
        isVisible: !1,
        faqs: [{
            q: "Where do I start?",
            a: "Just type an equation or calculation on the left. Looking for inspiration? Try the examples on the tab next to this one"
        }, {
            q: "Is this really free?",
            a: "Yup!"
        }, {
            q: "So how do you make money?",
            a: "Partnerships! Are you interested in incorporating this awesomeness into your digital content or educational app? Email us at <a href='mailto:partnerships@desmos.com'>partnerships@desmos.com</a>"
        }, {
            q: "How can I add a slider?",
            a: "Type an equation with variables in it, like y = mx+b and click the buttons to create slider equations: <br><img src='/assets/grapher/img/slider.png' width='182px' height='39px' />"
        }, {
            q: "How do I make a polar graph?",
            a: "Just use <i>r</i> and &theta; instead of <i>x</i> and <i>y</i>. Try, for examples, <i>r</i> = sin(4&theta;)"
        }, {
            q: "How do I plot a point?",
            a: "To plot a point, use [<i>x</i>,<i>y</i>] notation. For example, try [2,3], which will plot a point at <i>x</i>=2 and <i>y</i>=3"
        }, {
            q: "How do I graph a conic section?",
            a: "We support some implicit equations, including all of the conic sections. Try <i>x</i><sup>2</sup>+<i>y</i><sup>2</sup>=1"
        }, {
            q: "How do I graph a parametric curve?",
            a: "Use point notation [<i>x</i>,<i>y</i>], but instead of numbers, use functions of <i>t</i>. For example: [sin(<i>t</i>), cos(<i>t</i>)]"
        }, {
            q: "Can I graph a 3-d function?",
            a: 'Sort of, if you\'re really sneaky... look in the "experts only" examples to see one trick...'
        }, {
            q: "I want a feature that's not here!",
            a: "So do we :). Head on over to <a href='http://support.desmos.com/forums/118467-general' target='_blank'>our forum</a> and add a suggestion, or vote on other suggestions. We'll try to build it!"
        }],
        toggleFAQ: function (a) {
            var b = $(a.target);
            b.toggleClass("open"), b.hasClass("open") ? ($(".faq_a").slideUp("fast"), b.siblings(".open").removeClass("open"), b.next().slideDown("fast")) : b.next().slideUp("fast")
        },
        becameVisible: window.onResize,
        becameHidden: window.onResize
    });
    $(function () {
        a.append()
    }), Desmos.HelpView = a
})();;
Desmos.examples = [{
    category: "getting started",
    graphs: [{
        img: "basic_graphing",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-10%2C%22xmax%22%3A10%2C%22ymin%22%3A-8.158890290037832%2C%22ymax%22%3A8.158890290037832%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22y%3Dx+1%22%2C%22id%22%3A3%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22y%3Dx%5E2%22%2C%22id%22%3A1%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22y%3C%5C%5Csin%5C%5Cleft%28x%5C%5Cright%29%22%2C%22id%22%3A2%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%5D%7D%7D",
        title: "basic graphing",
        description: "A few equations and inequalities to get you started..."
    }, {
        img: "computation",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-11.75176775842884%2C%22xmax%22%3A11.75176775842884%2C%22ymin%22%3A-9.588138385502472%2C%22ymax%22%3A9.588138385502472%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22%5C%5Csqrt%7B3%5E2+4%5E2%7D%22%2C%22id%22%3A1%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22%5C%5Cfrac%7B2%5C%5Ccdot%5C%5Cleft%281+2%5C%5Cright%29-8%7D%7B5%7D%22%2C%22id%22%3A14%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%238064A2%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22a%3D%5C%5Cfrac%7B%5C%5Cpi%7D%7B3%7D%22%2C%22id%22%3A11%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22never%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22%5C%5Csin%5C%5Cleft%28a%5C%5Cright%29%22%2C%22id%22%3A12%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%5D%7D%7D",
        title: "calculations",
        description: "We also work like a scientific calculator &ndash; expand the keypad for ideas."
    }]
}, {
    category: "demos with sliders",
    graphs: [{
        img: "interference",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-10%2C%22xmax%22%3A10%2C%22ymin%22%3A-8.158890290037832%2C%22ymax%22%3A8.158890290037832%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22a%3D1%22%2C%22id%22%3A3%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22f%5C%5Cleft%28x%5C%5Cright%29%3D%5C%5Csin%5C%5Cleft%28x%5C%5Cright%29%22%2C%22id%22%3A1%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22g%5C%5Cleft%28x%5C%5Cright%29%3D%5C%5Csin%5C%5Cleft%28x+a%5C%5Cright%29%22%2C%22id%22%3A2%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22f%5C%5Cleft%28x%5C%5Cright%29+g%5C%5Cleft%28x%5C%5Cright%29%22%2C%22id%22%3A5%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%238064A2%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%5D%7D%7D",
        title: "Interference",
        description: 'Slide "a" to watch the sine waves interfere constructively and destructively'
    }, {
        img: "parabola",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-10.548532394772906%2C%22xmax%22%3A10.548532394772906%2C%22ymin%22%3A-8.606431852986217%2C%22ymax%22%3A8.606431852986217%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22a%3D1%22%2C%22id%22%3A3%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22b%5C%5Cspace%3D-1%22%2C%22id%22%3A8%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%238064A2%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22c%3D1%22%2C%22id%22%3A9%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22y%3Eax%5E2+bx+c%22%2C%22id%22%3A10%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22y%3Dbx+c%22%2C%22id%22%3A11%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%5D%7D%7D",
        title: "Surfing Parabola",
        description: 'Watch how the line & parabola change as you update "a", "b" and "c"'
    }, {
        img: "cycloid",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-10%2C%22xmax%22%3A10%2C%22ymin%22%3A-8.158890290037832%2C%22ymax%22%3A8.158890290037832%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22a%3D1%22%2C%22id%22%3A127%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5B%5C%5Csin%5C%5Cleft%28t%5C%5Cright%29+t%2C%5C%5Ccos%5C%5Cleft%28t%5C%5Cright%29+1%5C%5Cright%5D%22%2C%22id%22%3A3%2C%22domain%22%3A%7B%22min%22%3A-9.3%2C%22max%22%3A9.3%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-a%5C%5Cright%29%5E2+%5C%5Cleft%28y-1%5C%5Cright%29%5E2%3D1%22%2C%22id%22%3A126%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5B%5C%5Csin%5C%5Cleft%28a%5C%5Cright%29+a%2C%5C%5Ccos%5C%5Cleft%28a%5C%5Cright%29+1%5C%5Cright%5D%22%2C%22id%22%3A129%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%5D%7D%7D",
        title: "Cycloid",
        description: "A cycloid is the shape traced by a point on a rolling wheel. Create your own with just 4 equations."
    }, {
        img: "flower",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-2.8156320323097948%2C%22xmax%22%3A2.8583438718250394%2C%22ymin%22%3A-2.400091024538206%2C%22ymax%22%3A2.2292436664772266%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22a%3D5%22%2C%22id%22%3A125%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A1%2C%22sliderMax%22%3A10%2C%22sliderInterval%22%3A1%7D%2C%7B%22latex%22%3A%22b%3D6%22%2C%22id%22%3A124%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A1%2C%22sliderMax%22%3A6%2C%22sliderInterval%22%3A1%7D%2C%7B%22latex%22%3A%22r%5C%5Cle%5C%5Csin%5C%5Cleft%28%5C%5Cfrac%7Ba%7D%7Bb%7D%5C%5Ctheta%5C%5Cright%29%22%2C%22id%22%3A1%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%238064A2%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%5D%7D%7D",
        title: "Polar flowers",
        description: "No two snow-flowers are alike..."
    }]
}, {
    category: "math art made by other users",
    graphs: [{
        img: "batman",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-9.903753334299076%2C%22xmax%22%3A9.903753334299076%2C%22ymin%22%3A-8.080363691414252%2C%22ymax%22%3A8.080363691414252%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B%5C%5Cleft%7Cx%5C%5Cright%7C%3E3%3A3%5C%5Csqrt%7B-%5C%5Cleft%28%5C%5Cfrac%7Bx%7D%7B7%7D%5C%5Cright%29%5E2+1%7D%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A1%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B%5C%5Cleft%7Cx%5C%5Cright%7C%3E4%3A-3%5C%5Csqrt%7B-%5C%5Cleft%28%5C%5Cfrac%7Bx%7D%7B7%7D%5C%5Cright%29%5E2+1%7D%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A2%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%7C%5C%5Cfrac%7Bx%7D%7B2%7D%5C%5Cright%7C-%5C%5Cfrac%7B3%5C%5Csqrt%7B33%7D-7%7D%7B112%7Dx%5E2+%5C%5Csqrt%7B1-%5C%5Cleft%28%5C%5Cabs%5C%5Cleft%28%5C%5Cleft%7Cx%5C%5Cright%7C-2%5C%5Cright%29-1%5C%5Cright%29%5E2%7D-3%22%2C%22id%22%3A3%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B.75%3C%5C%5Cleft%7Cx%5C%5Cright%7C%3C1%5C%5Cspace%3A%5C%5Cspace9-8%5C%5Cleft%7Cx%5C%5Cright%7C%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A4%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B.5%3C%5C%5Cleft%7Cx%5C%5Cright%7C%3C.75%3A%5C%5Cspace3%5C%5Cleft%7Cx%5C%5Cright%7C+.75%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A5%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B%5C%5Cleft%7Cx%5C%5Cright%7C%3C.5%5C%5Cspace%3A%5C%5Cspace2.25%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A6%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B%5C%5Cleft%7Cx%5C%5Cright%7C%3E1%3A1.5-.5%5C%5Cleft%7Cx%5C%5Cright%7C-%5C%5Cfrac%7B6%5C%5Csqrt%7B10%7D%7D%7B14%7D%5C%5Cleft%28%5C%5Csqrt%7B3-x%5E2+2%5C%5Cleft%7Cx%5C%5Cright%7C%7D-2%5C%5Cright%29%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A9%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%5D%7D%7D",
        title: "caped crusader",
        description: "Bruce Wayne by day, piecewise functions by night"
    }, {
        img: "puppy",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-20.528582949884772%2C%22xmax%22%3A20.528582949884772%2C%22ymin%22%3A-16.749045609805105%2C%22ymax%22%3A16.749045609805105%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22%5C%5Cleft%28y+6%5C%5Cright%29%5E2+%5C%5Cleft%28x+2%5C%5Cright%29%5E2%3D2%5E2%22%2C%22id%22%3A15%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+6%5C%5Cright%29%5E2+%5C%5Cleft%28x+6%5C%5Cright%29%5E2%3D2%5E2%22%2C%22id%22%3A16%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+6%5C%5Cright%29%5E2+%5C%5Cleft%28x-2%5C%5Cright%29%5E2%3D2%5E2%22%2C%22id%22%3A88%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+6%5C%5Cright%29%5E2+%5C%5Cleft%28x-6%5C%5Cright%29%5E2%3D2%5E2%22%2C%22id%22%3A89%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22x%3E-1.134%3A%5C%5Cspace%20x%3C1.134%3A%5C%5Cspace%5C%5Ccsc%5C%5Cleft%28x+%5C%5Cleft%28%5C%5Cfrac%7B%5C%5Cpi%7D%7B2%7D%5C%5Cright%29%5C%5Cright%29-10.2%22%2C%22id%22%3A17%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-4.375%3A%5C%5Cspace%20x%3C4.375%3A%5C%5Cspace%5C%5Csec%5C%5Cleft%28%5C%5Cleft%28%5C%5Cfrac%7B1%7D%7B3%7D%5C%5Cright%29x-%5C%5Cpi%5C%5Cright%29+4%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A18%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E3.48%3A%5C%5Cspace%20x%3C6.2439%3A%5C%5Cleft%28%5C%5Cfrac%7B1%7D%7B5%7D%5C%5Cright%29%5C%5Ccot%5C%5Cleft%28x%5C%5Cright%29+1%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A19%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-6.2439%3A%5C%5Cspace%20x%3C-3.5%3A%5C%5Cleft%28%5C%5Cfrac%7B1%7D%7B5%7D%5C%5Cright%29%5C%5Ctan%5C%5Cleft%28x+%5C%5Cleft%28%5C%5Cfrac%7B%5C%5Cpi%7D%7B2%7D%5C%5Cright%29%5C%5Cright%29+1%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A20%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-4.24%3A%5C%5Cspace%20x%3C4.24%3A%5C%5Cspace%5C%5Cfrac%7B1%7D%7B2.6%7D%5C%5Cleft%28-x%5E2%5C%5Cright%29+8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A22%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-.27%3A%5C%5Cspace%20x%3C.27%3A-%5C%5Cabs%5C%5Cleft%286x%5C%5Cright%29+9.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A23%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E.8%3A%5C%5Cspace%20x%3C3.7%3A-3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A44%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E.78%3A%5C%5Cspace%20x%3C3.7%3A%5C%5Cspace2%5C%5Ccos%5C%5Cleft%281.6x-3.6%5C%5Cright%29-1.599%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A47%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-3.75%3A%5C%5Cspace%20x%3C-.79%3A-3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A48%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-3.7%3A%5C%5Cspace%20x%3C-.8%3A%5C%5Cspace2%5C%5Csin%5C%5Cleft%281.6x-1.1%5C%5Cright%29-1.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A49%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-3.1%3A%5C%5Cspace%20x%3C-1.4%3A%5C%5Cspace2%5C%5Csin%5C%5Cleft%281.6x-1.1%5C%5Cright%29-3.4%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A50%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E1.4%3A%5C%5Cspace%20x%3C3.1%3A%5C%5Cspace2%5C%5Ccos%5C%5Cleft%281.6x-3.6%5C%5Cright%29-3.4%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A51%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-5.39%3Ax%3C-4.8%3A%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Ctan%5C%5Cleft%283x-%5C%5Cleft%28%5C%5Cfrac%7B%5C%5Cpi%7D%7B4.2%7D%5C%5Cright%29%5C%5Cright%29-6.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A68%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-6.44%3Ax%3C-5.8%3A%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Ctan%5C%5Cleft%283x-%5C%5Cleft%28%5C%5Cfrac%7B%5C%5Cpi%7D%7B4.2%7D%5C%5Cright%29%5C%5Cright%29-6.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A69%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E-7.42%3Ax%3C-6.8%3A%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Ctan%5C%5Cleft%283x-%5C%5Cleft%28%5C%5Cfrac%7B%5C%5Cpi%7D%7B4.2%7D%5C%5Cright%29%5C%5Cright%29-6.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A70%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E4.98%3Ax%3C5.64%3A%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Ccot%5C%5Cleft%283x+%5C%5Cleft%28%5C%5Cfrac%7B%5C%5Cpi%7D%7B2%7D%5C%5Cright%29%5C%5Cright%29-6.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A71%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E6%3Ax%3C6.68%3A%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Ccot%5C%5Cleft%283x+%5C%5Cleft%28%5C%5Cfrac%7B%5C%5Cpi%7D%7B2%7D%5C%5Cright%29%5C%5Cright%29-6.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A72%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7Bx%3E7%3Ax%3C7.6%3A%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Ccot%5C%5Cleft%283x+%5C%5Cleft%28%5C%5Cfrac%7B%5C%5Cpi%7D%7B2%7D%5C%5Cright%29%5C%5Cright%29-6.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A73%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+4.5%5C%5Cright%29%5E2+%5C%5Cleft%28x-0%5C%5Cright%29%5E2%3D.5%5E2%22%2C%22id%22%3A66%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+5.5%5C%5Cright%29%5E2+%5C%5Cleft%28x-2.78%5C%5Cright%29%5E2%3D.3%5E2%22%2C%22id%22%3A76%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+5.5%5C%5Cright%29%5E2+%5C%5Cleft%28x-1.5%5C%5Cright%29%5E2%3D.3%5E2%22%2C%22id%22%3A78%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+6.7%5C%5Cright%29%5E2+%5C%5Cleft%28x-2%5C%5Cright%29%5E2%3D.3%5E2%22%2C%22id%22%3A80%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+6.7%5C%5Cright%29%5E2+%5C%5Cleft%28x+2%5C%5Cright%29%5E2%3D.3%5E2%22%2C%22id%22%3A82%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+5.5%5C%5Cright%29%5E2+%5C%5Cleft%28x+1.5%5C%5Cright%29%5E2%3D.3%5E2%22%2C%22id%22%3A84%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28y+5.5%5C%5Cright%29%5E2+%5C%5Cleft%28x+2.78%5C%5Cright%29%5E2%3D.3%5E2%22%2C%22id%22%3A86%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%5D%7D%7D",
        title: "puppy",
        description: "Awww, he has the cutest conic sections! Designed by Amy (11th grade)"
    }, {
        img: "heart",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-2.474757315303456%2C%22xmax%22%3A2.3915521785424914%2C%22ymin%22%3A-2.211179996938882%2C%22ymax%22%3A1.759188530826979%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B%5C%5Cleft%7Cx%5C%5Cright%7C%3C2%3A%5C%5Csqrt%7B%5C%5Ccos%20x%7D%5C%5Ccos%5C%5Cleft%28250x%5C%5Cright%29-.7+1%5C%5Csqrt%7B%5C%5Cleft%7Cx%5C%5Cright%7C%7D%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A18%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%5D%7D%7D",
        title: "heart",
        description: 'Nothing says "I love you" like a quickly oscillating cosine function'
    }, {
        img: "shuttle",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A3.11750076601266%2C%22xmax%22%3A38.673056321568275%2C%22ymin%22%3A0.3077430849803805%2C%22ymax%22%3A35.863298640536%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Afalse%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B24%5C%5Cle%20x%5C%5Cle28%3A%5C%5Cspace%5C%5Cfrac%7B1%7D%7B4%7Dx-3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A6%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B24%5C%5Cle%20x%5C%5Cle28%3A%5C%5Cspace%5C%5Cfrac%7B1%7D%7B4%7Dx-2%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A7%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B24%5C%5Cle%20x%5C%5Cle28%3A%5C%5Cspace%5C%5Cfrac%7B1%7D%7B4%7Dx-1%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A8%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B12%5C%5Cle%20x%5C%5Cle16%3A%5C%5Cspace%5C%5Cfrac%7B-1%7D%7B4%7Dx+7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A9%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B12%5C%5Cle%20x%5C%5Cle16%3A%5C%5Cspace%5C%5Cfrac%7B-1%7D%7B4%7Dx+8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A10%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B12%5C%5Cle%20x%5C%5Cle16%3A%5C%5Cspace%5C%5Cfrac%7B-1%7D%7B4%7Dx+9%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A11%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B16%5C%5Cle%20x%5C%5Cle24%3A%5C%5Cspace4%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A12%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B16%5C%5Cle%20x%5C%5Cle24%3A%5C%5Cspace5%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A13%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B12%5C%5Cle%20x%5C%5Cle28%3A%5C%5Cspace6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A15%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B12%5C%5Cle%20x%5C%5Cle16%3A%5C%5Cspace%5C%5Cfrac%7B1%7D%7B4%7Dx+3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A16%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B24%5C%5Cle%20x%5C%5Cle28%3A%5C%5Cspace%5C%5Cfrac%7B-1%7D%7B4%7Dx+13%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A17%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B16%5C%5Cle%20x%5C%5Cle17%3A%5C%5Cspace7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A18%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%5C%5Cle%20x%5C%5Cle24%3A%5C%5Cspace7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A19%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-38%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Cright%29%3D%5C%5Cleft%28y-15%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Cright%29%5E2%22%2C%22id%22%3A25%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-42%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Cright%29%3D-%5C%5Cleft%28y-15%5C%5Cfrac%7B1%7D%7B2%7D%5C%5Cright%29%5E2%22%2C%22id%22%3A27%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B4%3Cy%3C6%3A28%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A28%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B4%3Cy%3C6%3A12%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A29%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B3%3Cy%3C5%3A16%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A30%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B3%3Cy%3C5%3A24%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A31%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B17.05%3Cx%3C20%3A%5C%5Cln%5C%5Cleft%28x-17%5C%5Cright%29+9%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A33%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%2820%3Cx%3C22.95%3A%5C%5Cln%5C%5Cleft%2823-x%5C%5Cright%29+9%5C%5Cright%29%22%2C%22id%22%3A34%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B9%3Cy%3C23%3A18%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A35%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B9%3Cy%3C23%3A22%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A36%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B14%5C%5Cle%20x%5C%5Cle17.3%3A%5C%5Cspace8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A37%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.7%5C%5Cle%20x%5C%5Cle26%3A%5C%5Cspace8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A38%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B8%3Cy%3C9%3A14%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A39%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B8%3Cy%3C9%3A26%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A40%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-26%5C%5Cright%29%5E2%3D%5C%5Cfrac%7B3%5C%5Cleft%28y-9%5C%5Cright%29%7D%7B2%7D%22%2C%22id%22%3A41%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%2822%3Cx%3C26%3A%5C%5Cfrac%7B2%7D%7B3%7D%5C%5Cleft%28x-26%5C%5Cright%29%5E2+9%5C%5Cright%29%22%2C%22id%22%3A42%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-14%5C%5Cright%29%5E2%3D%5C%5Cfrac%7B3%5C%5Cleft%28y-9%5C%5Cright%29%7D%7B2%7D%22%2C%22id%22%3A43%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%2814%3Cx%3C18%3A%5C%5Cfrac%7B2%7D%7B3%7D%5C%5Cleft%28x-14%5C%5Cright%29%5E2+9%5C%5Cright%29%22%2C%22id%22%3A44%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B9.7%3Cy%3C26%3A15%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A45%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B9.7%3Cy%3C26%3A25%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A46%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B15%3Cy%3C26%3A17%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A47%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B15%3Cy%3C26%3A23%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A48%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B15%3Cy%3C28%3A17%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A49%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B15%3Cy%3C28%3A23%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A50%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B17%3Cx%3C23%3A%5C%5Cspace-%5C%5Cfrac%7B2%7D%7B3%7D%5C%5Cleft%28x-20%5C%5Cright%29%5E2+34%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A52%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B18%3Cx%3C22%3A%5C%5Cspace-%5C%5Cfrac%7B2%7D%7B3%7D%5C%5Cleft%28x-20%5C%5Cright%29%5E2+25.7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A53%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B15%3Cx%3C17%3A%5C%5Cspace-%5C%5Cfrac%7B9%7D%7B3%7D%5C%5Cleft%28x-16%5C%5Cright%29%5E2+29%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A54%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C25%3A%5C%5Cspace-%5C%5Cfrac%7B9%7D%7B3%7D%5C%5Cleft%28x-24%5C%5Cright%29%5E2+29%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A55%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-17%5C%5Cright%29%5E2+%5C%5Cleft%28y-10%5C%5Cright%29%5E2%3D.7%22%2C%22id%22%3A56%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B18.5%3Cx%3C21.5%3A%5C%5Cspace%5C%5Cfrac%7B1%7D%7B9%7D%5C%5Cleft%28x-20%5C%5Cright%29%5E2+24%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A57%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B20%3Cx%3C22.1%3A%5C%5Cspace-%5C%5Cfrac%7B15%7D%7B6%7D%5C%5Cleft%28x-20%5C%5Cright%29%5E2+34%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A58%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cfrac%7B30%5C%5Cleft%28x-20%5C%5Cright%29%5E2%7D%7B1%7D+%5C%5Cfrac%7B%5C%5Cleft%28y-8%5C%5Cright%29%5E2%7D%7B4%7D%3D1%22%2C%22id%22%3A59%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B18%3Cx%3C19.7%3A%5C%5Cspace8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A60%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B20.3%3Cx%3C22%3A%5C%5Cspace8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A61%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B6%3Cy%3C8%3A22%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A62%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B6%3Cy%3C8%3A18%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A63%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B18%3Cx%3C19.8%3A%5C%5Csqrt%7B0.066+%5C%5Cfrac%7B%5C%5Cleft%28x-19%5C%5Cright%29%5E2%7D%7B5%7D%7D+7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A68%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B18%3Cx%3C19.8%3A-%5C%5Csqrt%7B0.066+%5C%5Cfrac%7B%5C%5Cleft%28x-19%5C%5Cright%29%5E2%7D%7B5%7D%7D+7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A69%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B20.2%3Cx%3C22%3A%5C%5Csqrt%7B0.066+%5C%5Cfrac%7B%5C%5Cleft%28x-21%5C%5Cright%29%5E2%7D%7B5%7D%7D+7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A70%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B20.2%3Cx%3C22%3A-%5C%5Csqrt%7B0.066+%5C%5Cfrac%7B%5C%5Cleft%28x-21%5C%5Cright%29%5E2%7D%7B5%7D%7D+7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A71%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B9.5%3Cy%3C10.1%3A22.3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A72%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B9.5%3Cy%3C10.8%3A24.1%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A73%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C24.1%3A%5C%5Cspace9.5%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A74%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C23%3A%5C%5Cspace10.8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A75%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C23%3A%5C%5Cspace10.1%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A76%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B10.1%3Cy%3C10.8%3A22.3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A77%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B10.1%3Cy%3C10.8%3A23%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A78%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C24.1%3A%5C%5Cspace10.8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A79%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C24.1%3A%5C%5Cspace10.7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A80%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C24.1%3A%5C%5Cspace10.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A81%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C24.1%3A%5C%5Cspace10.5%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A82%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C24.1%3A%5C%5Cspace10.4%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A83%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C24.1%3A%5C%5Cspace10.3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A84%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C24.1%3A%5C%5Cspace10.2%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A85%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C24.1%3A%5C%5Cspace10.1%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A86%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C24.1%3A%5C%5Cspace10%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A87%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C24.1%3A%5C%5Cspace9.9%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A88%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C24.1%3A%5C%5Cspace9.8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A89%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C24.1%3A%5C%5Cspace9.7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A90%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C24.1%3A%5C%5Cspace9.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A91%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B10.1%3Cy%3C10.8%3A22.9%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A92%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B10.1%3Cy%3C10.8%3A22.8%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A93%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B10.1%3Cy%3C10.8%3A22.7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A94%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B10.1%3Cy%3C10.8%3A22.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A95%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B10.1%3Cy%3C10.8%3A22.5%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A96%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22x%3D%5C%5Cleft%5C%5C%7B10.1%3Cy%3C10.8%3A22.4%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A97%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C23%3A%5C%5Cspace10.2%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A98%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C23%3A%5C%5Cspace10.3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A99%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C23%3A%5C%5Cspace10.4%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A100%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C23%3A%5C%5Cspace10.5%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A101%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C23%3A%5C%5Cspace10.6%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A102%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B22.3%3Cx%3C23%3A%5C%5Cspace10.7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A103%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C25%3A%5C%5Cspace-%5C%5Cfrac%7B1%7D%7B10%7D%5C%5Cleft%28x-24%5C%5Cright%29%5E2+26%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A104%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B15%3Cx%3C17%3A%5C%5Cspace-%5C%5Cfrac%7B1%7D%7B10%7D%5C%5Cleft%28x-16%5C%5Cright%29%5E2+26%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A105%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B23%3Cx%3C25%3A%5C%5Cspace-%5C%5Cfrac%7B1%7D%7B10%7D%5C%5Cleft%28x-24%5C%5Cright%29%5E2+20%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A106%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B15%3Cx%3C17%3A%5C%5Cspace-%5C%5Cfrac%7B1%7D%7B10%7D%5C%5Cleft%28x-16%5C%5Cright%29%5E2+20%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A107%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B19%5C%5Cle%20x%3C21%3A%5C%5Cspace-%5C%5Cleft%28x-20%5C%5Cright%29%5E2+23%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A108%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B19%5C%5Cle%20x%3C21%3A%5C%5Cspace-%5C%5Cleft%28x-20%5C%5Cright%29%5E2+22.3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A109%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-19.5%5C%5Cright%29%5E2+%5C%5Cleft%28y-21.25%5C%5Cright%29%5E2%3D.035%22%2C%22id%22%3A110%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-20.5%5C%5Cright%29%5E2+%5C%5Cleft%28y-21.25%5C%5Cright%29%5E2%3D.035%22%2C%22id%22%3A111%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-19.7%5C%5Cright%29%5E2+%5C%5Cleft%28y-24.5%5C%5Cright%29%5E2%3D.035%22%2C%22id%22%3A113%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%28x-20.3%5C%5Cright%29%5E2+%5C%5Cleft%28y-24.5%5C%5Cright%29%5E2%3D.035%22%2C%22id%22%3A114%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cfrac%7B%5C%5Cleft%28x-20%5C%5Cright%29%5E2%7D%7B1%7D+%5C%5Cfrac%7B%5C%5Cleft%28y-7%5C%5Cright%29%5E2%7D%7B.1%7D%3D1%22%2C%22id%22%3A115%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B19%3Cx%3C19.81%3A%5C%5Csqrt%7B.1-.1%5C%5Cleft%28x-20%5C%5Cright%29%5E2%7D+7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A116%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B20.19%3Cx%3C21%3A%5C%5Csqrt%7B.1-.1%5C%5Cleft%28x-20%5C%5Cright%29%5E2%7D+7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A117%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B19%3Cx%3C19.84%3A-%5C%5Csqrt%7B.1-.1%5C%5Cleft%28x-20%5C%5Cright%29%5E2%7D+7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A118%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B20.16%3Cx%3C21%3A-%5C%5Csqrt%7B.1-.1%5C%5Cleft%28x-20%5C%5Cright%29%5E2%7D+7%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A119%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5C%5C%7B16%3Cx%3C24%3A3%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A120%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%5D%7D%7D",
        title: "space shuttle",
        description: "Houston: we have an amazing graph. Designed by Abhishek K (10th grade)"
    }]
}, {
    category: "pushing the limits (experts only!)",
    graphs: [{
        img: "taylor-series",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-20.272865295410163%2C%22xmax%22%3A20.272865295410163%2C%22ymin%22%3A-16.54040838099669%2C%22ymax%22%3A16.54040838099669%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22y%5C%5Cspace%3D%5C%5Cspace%20x%5C%5Ccdot%5C%5Ccos%5C%5Cleft%28x%5C%5Cright%29%22%2C%22id%22%3A1%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22y%5C%5Cspace%3D%5C%5Cspace%5C%5Csum_%7Bn%3D0%7D%5Ea%5C%5Cleft%28-1%5C%5Cright%29%5En%5C%5Cfrac%7Bx%5E%7B2n+1%7D%7D%7B%5C%5Cleft%282n%5C%5Cright%29%21%7D%22%2C%22id%22%3A2%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%238064A2%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22a%3D5%22%2C%22id%22%3A4%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A1%2C%22sliderMax%22%3A10%2C%22sliderInterval%22%3A1%7D%5D%7D%7D",
        title: "Taylor Series",
        description: "Now that's what I call an approximation"
    }, {
        img: "parametric-3d",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-11.31348620783023%2C%22xmax%22%3A13.007551341745334%2C%22ymin%22%3A-10.00799057215158%2C%22ymax%22%3A9.835277138536174%7D%2C%22showLabels%22%3Afalse%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Afalse%2C%22showAxes%22%3Afalse%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22f%5C%5Cleft%28x%2Cy%5C%5Cright%29%3D%5C%5Ccos%5C%5Cleft%28%5C%5Cleft%28x+y%5C%5Cright%29%5C%5Cright%29+%5C%5Cfrac%7Bx%5E2%7D%7B6%7D-%5C%5Cfrac%7By%5E2%7D%7B6%7D%22%2C%22id%22%3A47%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22n%3D45%22%2C%22id%22%3A1%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A45%7D%2C%7B%22latex%22%3A%22a%3D-2%22%2C%22id%22%3A33%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-3.1416%2C%22sliderMax%22%3A3.1416%2C%22sliderInterval%22%3A%22%22%7D%2C%7B%22latex%22%3A%22b%3D.8%22%2C%22id%22%3A44%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-3.1416%2C%22sliderMax%22%3A3.1416%7D%2C%7B%22latex%22%3A%22c%3D0%22%2C%22id%22%3A49%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-3.1416%2C%22sliderMax%22%3A3.1416%7D%2C%7B%22latex%22%3A%22generate%5C%5Cspace%20a%5C%5Cspace%20grid%3A%22%2C%22id%22%3A71%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22g%5C%5Cleft%28x%5C%5Cright%29%3D2s%5C%5Cleft%28%5C%5Cfrac%7B%5C%5Cfloor%5C%5Cleft%28x%5C%5Ccdot%5C%5Cleft%28n+1%5C%5Cright%29%5C%5Cright%29%7D%7Bn%7D-.5%5C%5Cright%29%22%2C%22id%22%3A29%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22h%5C%5Cleft%28x%5C%5Cright%29%3D2s%5C%5Cleft%28%5C%5Cmod%5C%5Cleft%28x%5C%5Ccdot%5C%5Cleft%28n+1%5C%5Cright%29%2C1%5C%5Cright%29-.5%5C%5Cright%29%22%2C%22id%22%3A30%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22run%5C%5Cspace%20some%5C%5Cspace%20transformations%3A%22%2C%22id%22%3A72%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22x_x%3D%5C%5Ccos%5C%5Cleft%28c%5C%5Cright%29%5C%5Ccos%5C%5Cleft%28a%5C%5Cright%29-%5C%5Csin%5C%5Cleft%28c%5C%5Cright%29%5C%5Csin%5C%5Cleft%28a%5C%5Cright%29%5C%5Csin%5C%5Cleft%28b%5C%5Cright%29%22%2C%22id%22%3A34%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22x_y%3D%5C%5Ccos%5C%5Cleft%28c%5C%5Cright%29%5C%5Csin%5C%5Cleft%28a%5C%5Cright%29%5C%5Csin%5C%5Cleft%28b%5C%5Cright%29+%5C%5Csin%5C%5Cleft%28c%5C%5Cright%29%5C%5Ccos%5C%5Cleft%28a%5C%5Cright%29%22%2C%22id%22%3A35%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22y_x%3D-%5C%5Ccos%5C%5Cleft%28c%5C%5Cright%29%5C%5Csin%5C%5Cleft%28a%5C%5Cright%29-%5C%5Csin%5C%5Cleft%28c%5C%5Cright%29%5C%5Ccos%5C%5Cleft%28a%5C%5Cright%29%5C%5Csin%5C%5Cleft%28b%5C%5Cright%29%22%2C%22id%22%3A38%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22y_y%3D%5C%5Ccos%5C%5Cleft%28c%5C%5Cright%29%5C%5Ccos%5C%5Cleft%28a%5C%5Cright%29%5C%5Csin%5C%5Cleft%28b%5C%5Cright%29-%5C%5Csin%5C%5Cleft%28c%5C%5Cright%29%5C%5Csin%5C%5Cleft%28a%5C%5Cright%29%22%2C%22id%22%3A39%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22z_x%3D-%5C%5Csin%5C%5Cleft%28c%5C%5Cright%29%5C%5Ccos%5C%5Cleft%28b%5C%5Cright%29%22%2C%22id%22%3A36%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22z_y%3D%5C%5Ccos%5C%5Cleft%28c%5C%5Cright%29%5C%5Ccos%5C%5Cleft%28b%5C%5Cright%29%22%2C%22id%22%3A37%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%238064A2%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22get%5C%5Cspace%20ready%5C%5Cspace%20to%5C%5Cspace%20draw%5C%5Cspace%20some%5C%5Cspace%20axes%3A%22%2C%22id%22%3A73%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22s%3D3.52%22%2C%22id%22%3A28%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%238064A2%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22l%3D0.906%22%2C%22id%22%3A66%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A0.5%2C%22sliderMax%22%3A1%7D%2C%7B%22latex%22%3A%22a_l%3D7.89%22%2C%22id%22%3A69%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A5%2C%22sliderMax%22%3A20%7D%2C%7B%22latex%22%3A%22x_%7Barr%7D%5C%5Cleft%28t%2Cx_s%2Cy_s%5C%5Cright%29%3D%5C%5Cleft%5C%5C%7B0%3Ct%3Cl%3Ax_st%2C%5C%5Cspace%20l%3Ct%3C%5C%5Cfrac%7Bl+1%7D%7B2%7D%3Alx_s+%5C%5Ccos%5C%5Cleft%28%5C%5Cfrac%7B5%5C%5Cpi%7D%7B6%7D%5C%5Cright%29x_s%5C%5Cleft%28t-l%5C%5Cright%29-%5C%5Csin%5C%5Cleft%28%5C%5Cfrac%7B5%5C%5Cpi%7D%7B6%7D%5C%5Cright%29y_s%5C%5Cleft%28t-l%5C%5Cright%29%2C%5C%5Cspace%5C%5Cfrac%7Bl+1%7D%7B2%7D%3Ct%3C1%3Alx_s+%5C%5Csin%5C%5Cleft%28%5C%5Cfrac%7B5%5C%5Cpi%7D%7B6%7D%5C%5Cright%29y_s%5C%5Cleft%28t-%5C%5Cfrac%7Bl+1%7D%7B2%7D%5C%5Cright%29+%5C%5Ccos%5C%5Cleft%28%5C%5Cfrac%7B5%5C%5Cpi%7D%7B6%7D%5C%5Cright%29x_s%5C%5Cleft%28t-%5C%5Cfrac%7Bl+1%7D%7B2%7D%5C%5Cright%29%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A61%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23C0504D%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22y_%7Barr%7D%5C%5Cleft%28t%2Cx_s%2Cy_s%5C%5Cright%29%3D%5C%5Cleft%5C%5C%7B0%3Ct%3Cl%3Ay_st%2C%5C%5Cspace%20l%3Ct%3C%5C%5Cfrac%7Bl+1%7D%7B2%7D%3Aly_s+%5C%5Ccos%5C%5Cleft%28%5C%5Cfrac%7B5%5C%5Cpi%7D%7B6%7D%5C%5Cright%29y_s%5C%5Cleft%28t-l%5C%5Cright%29+%5C%5Csin%5C%5Cleft%28%5C%5Cfrac%7B5%5C%5Cpi%7D%7B6%7D%5C%5Cright%29x_s%5C%5Cleft%28t-l%5C%5Cright%29%2C%5C%5Cspace%5C%5Cfrac%7Bl+1%7D%7B2%7D%3Ct%3C1%3Aly_s-%5C%5Csin%5C%5Cleft%28%5C%5Cfrac%7B5%5C%5Cpi%7D%7B6%7D%5C%5Cright%29x_s%5C%5Cleft%28t-%5C%5Cfrac%7Bl+1%7D%7B2%7D%5C%5Cright%29+%5C%5Ccos%5C%5Cleft%28%5C%5Cfrac%7B5%5C%5Cpi%7D%7B6%7D%5C%5Cright%29y_s%5C%5Cleft%28t-%5C%5Cfrac%7Bl+1%7D%7B2%7D%5C%5Cright%29%5C%5Cright%5C%5C%7D%22%2C%22id%22%3A64%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22draw%5C%5Cspace%20the%5C%5Cspace%20axes%22%2C%22id%22%3A74%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%238064A2%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5Bx_%7Barr%7D%5C%5Cleft%28t%2Ca_lx_x%2Ca_lx_y%5C%5Cright%29%2Cy_%7Barr%7D%5C%5Cleft%28t%2Ca_lx_x%2Ca_lx_y%5C%5Cright%29%5C%5Cright%5D%22%2C%22id%22%3A65%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A1%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5Bx_%7Barr%7D%5C%5Cleft%28t%2Ca_ly_x%2Ca_ly_y%5C%5Cright%29%2Cy_%7Barr%7D%5C%5Cleft%28t%2Ca_ly_x%2Ca_ly_y%5C%5Cright%29%5C%5Cright%5D%22%2C%22id%22%3A67%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A1%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5Bx_%7Barr%7D%5C%5Cleft%28t%2Ca_lz_x%2Ca_lz_y%5C%5Cright%29%2Cy_%7Barr%7D%5C%5Cleft%28t%2Ca_lz_x%2Ca_lz_y%5C%5Cright%29%5C%5Cright%5D%22%2C%22id%22%3A68%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A1%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22render%5C%5Cspace%20the%5C%5Cspace3-d%5C%5Cspace%20graph%3A%22%2C%22id%22%3A75%2C%22domain%22%3A%7B%22min%22%3A0%2C%22max%22%3A10%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5Bx_xg%5C%5Cleft%28t%5C%5Cright%29+y_xh%5C%5Cleft%28t%5C%5Cright%29+z_xf%5C%5Cleft%28g%5C%5Cleft%28t%5C%5Cright%29%2Ch%5C%5Cleft%28t%5C%5Cright%29%5C%5Cright%29%2Cx_yg%5C%5Cleft%28t%5C%5Cright%29+y_yh%5C%5Cleft%28t%5C%5Cright%29+z_yf%5C%5Cleft%28g%5C%5Cleft%28t%5C%5Cright%29%2Ch%5C%5Cleft%28t%5C%5Cright%29%5C%5Cright%29%5C%5Cright%5D%22%2C%22id%22%3A76%2C%22domain%22%3A%7B%22max%22%3A1%2C%22min%22%3A0%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22always%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5Bx_xh%5C%5Cleft%28t%5C%5Cright%29+y_xg%5C%5Cleft%28t%5C%5Cright%29+z_xf%5C%5Cleft%28h%5C%5Cleft%28t%5C%5Cright%29%2Cg%5C%5Cleft%28t%5C%5Cright%29%5C%5Cright%29%2Cx_yh%5C%5Cleft%28t%5C%5Cright%29+y_yg%5C%5Cleft%28t%5C%5Cright%29+z_yf%5C%5Cleft%28h%5C%5Cleft%28t%5C%5Cright%29%2Cg%5C%5Cleft%28t%5C%5Cright%29%5C%5Cright%29%5C%5Cright%5D%22%2C%22id%22%3A77%2C%22domain%22%3A%7B%22max%22%3A1%2C%22min%22%3A0%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%5D%7D%7D",
        title: "parametric &rArr; 3D",
        description: "Sample 3-d grapher using parametric equations. Not for the faint of heart!"
    }, {
        img: "occlusion",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-11.437208414654302%2C%22xmax%22%3A17.039354085345728%2C%22ymin%22%3A-7.531612931029066%2C%22ymax%22%3A15.7021019964615%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22g%5C%5Cleft%28x%5C%5Cright%29%3D%5C%5Csin%5C%5Cleft%28%5C%5Cfrac%7Bx%7D%7B2%7D%5C%5Cright%29+%5C%5Ccos%5C%5Cleft%28x+1%5C%5Cright%29%22%2C%22id%22%3A3%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22y%5C%5Cle%20g%5C%5Cleft%28x%5C%5Cright%29%22%2C%22id%22%3A11%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22a%3D3.8%22%2C%22id%22%3A10%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22b%3D1.74%22%2C%22id%22%3A12%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22x_s%3D%5C%5Ccos%5C%5Cleft%282%5C%5Cpi%20t%5C%5Cright%29%5C%5Ccdot%5C%5Csin%5C%5Cleft%28200t%5C%5Cright%29+a%22%2C%22id%22%3A5%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%234F81BD%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22y_s%3D%5C%5Csin%5C%5Cleft%282%5C%5Cpi%20t%5C%5Cright%29+b%22%2C%22id%22%3A6%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5Bx_s%2Cy_s%5C%5Ccdot%5C%5Cleft%28y_s%3Eg%5C%5Cleft%28x_s%5C%5Cright%29%5C%5Cright%29%5C%5Cright%5D%22%2C%22id%22%3A8%2C%22domain%22%3A%7B%22max%22%3A1%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%5D%7D%7D",
        title: "Sunrise, Sunset",
        description: "Note how the sun is occluded as it goes behind the hills"
    }, {
        img: "tangent",
        state: "%7B%22graph%22%3A%7B%22viewport%22%3A%7B%22xmin%22%3A-5.887620647902178%2C%22xmax%22%3A9.914848487900313%2C%22ymin%22%3A-6.6439986018342045%2C%22ymax%22%3A6.249062597237942%7D%2C%22showLabels%22%3Atrue%2C%22degreeMode%22%3Afalse%2C%22connectedMode%22%3Afalse%2C%22showGrid%22%3Atrue%2C%22showAxes%22%3Atrue%2C%22squareAxes%22%3Atrue%2C%22labelXMode%22%3A%22%22%2C%22labelYMode%22%3A%22%22%7D%2C%22expressions%22%3A%7B%22list%22%3A%5B%7B%22latex%22%3A%22f%5C%5Cleft%28x%5C%5Cright%29%3D%5C%5Csin%5C%5Cleft%28%5C%5Cfrac%7Bx%7D%7B2%7D%5C%5Cright%29%5C%5Ccdot%5C%5Ccos%5C%5Cleft%28x%5C%5Cright%29%22%2C%22id%22%3A1%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22a%3D0.52%22%2C%22id%22%3A2%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%238064A2%22%2C%22userRequestedGraphing%22%3A%22default%22%2C%22sliderMin%22%3A-10%2C%22sliderMax%22%3A10%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5Ba%2Cf%5C%5Cleft%28a%5C%5Cright%29%5C%5Cright%5D%22%2C%22id%22%3A3%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23F79646%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22d%5C%5Cleft%28x%5C%5Cright%29%3D%5C%5Cfrac%7Bd%7D%7Bdx%7Df%5C%5Cleft%28x%5C%5Cright%29%22%2C%22id%22%3A6%2C%22domain%22%3A%7B%22max%22%3A10%2C%22min%22%3A0%7D%2C%22color%22%3A%22%239BBB59%22%2C%22userRequestedGraphing%22%3A%22never%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5Ba+t%2Cf%5C%5Cleft%28a%5C%5Cright%29+td%5C%5Cleft%28a%5C%5Cright%29%5C%5Cright%5D%22%2C%22id%22%3A4%2C%22domain%22%3A%7B%22max%22%3A1%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%2C%7B%22latex%22%3A%22%5C%5Cleft%5Ba-%5C%5Cfrac%7Btd%5C%5Cleft%28a%5C%5Cright%29%7D%7B%5C%5Csqrt%7B1+d%5C%5Cleft%28a%5C%5Cright%29%5E2%7D%7D%2Cf%5C%5Cleft%28a%5C%5Cright%29+%5C%5Cfrac%7Bt%7D%7B%5C%5Csqrt%7B1+d%5C%5Cleft%28a%5C%5Cright%29%5E2%7D%7D%5C%5Cright%5D%22%2C%22id%22%3A8%2C%22domain%22%3A%7B%22max%22%3A1%2C%22min%22%3A0%7D%2C%22color%22%3A%22%23000000%22%2C%22userRequestedGraphing%22%3A%22default%22%7D%5D%7D%7D",
        title: "Tangent & Normal",
        description: "A little bit of calculus..."
    }]
}];;
(function () {
    var a = Ember.View.create({
        templateName: "examples",
        elementId: "examples-container",
        isVisible: !1,
        categories: Desmos.examples,
        setState: function (a) {
            setState(a.context.state, "escaped")
        },
        closeAllCategories: function () {
            this.$(".category").addClass("closed"), this.$(".examples-content").slideUp("fast")
        },
        openFirst: function () {
            el = $(this.$(".category").get(0)), el.removeClass("closed"), el.next().show()
        },
        toggleCategory: function (a) {
            var b = $(a.target),
                c = b.hasClass("closed");
            this.closeAllCategories(), c && (b.removeClass("closed"), b.next().slideDown("fast"))
        },
        didInsertElement: function () {
            this.openFirst(), this.$().tipsy({
                fade: "fast",
                title: "tooltip",
                wait: 500,
                live: !0,
                delegate: "a"
            })
        },
        becameVisible: window.onResize,
        becameHidden: window.onResize
    });
    $(function () {
        a.append()
    }), Desmos.ExamplesView = a
})();;
(function () {
    var a = Ember.View.create({
        templateName: "subheader",
        graphSettingsBinding: "Desmos.graphSettings",
        didInsertElement: function () {
            $(".tooltip").tipsy({
                fade: "fast",
                title: "tooltip",
                wait: 500
            }), $(".topbar-tooltip").tipsy({
                fade: "fast",
                title: "tooltip",
                wait: 500,
                offset: 10
            }), $(".tooltip-ne").tipsy({
                fade: "fast",
                title: "tooltip",
                wait: 500,
                gravity: "ne"
            }), $(".tooltip-nw").tipsy({
                fade: "fast",
                title: "tooltip",
                wait: 500,
                gravity: "nw"
            });
            var a = this;
            window.LOAD_DATA.notification && (this.set("notificationContents", window.LOAD_DATA.notification.contents), this.set("notificationUrl", window.LOAD_DATA.notification.url), setTimeout(function () {
                a.$(".notification-container").slideDown("fast")
            }, 1e3), logNotification(this.get("notificationContents"), "show"))
        },
        closeNotification: function () {
            this.$(".notification-container").slideUp("fast"), logNotification(this.get("notificationContents"), "close")
        },
        clickNotification: function () {
            this.$(".notification-container").hide(), logNotification(this.get("notificationContents"), "clicked")
        },
        save: function () {
            Desmos.AuthenticationStateManager.send("save")
        },
        myGraphs: function () {
            Desmos.AuthenticationStateManager.send("myGraphs")
        },
        undo: function () {
            logAction("undo"), Desmos.undoRedo.undo()
        },
        redo: function () {
            logAction("redo"), Desmos.undoRedo.redo()
        },
        POIs: function () {
            this.graphSettings.toggleProperty("POIs"), logAction(this.graphSettings.get("POIs") ? "POI on" : "POI off")
        },
        POITooltip: function () {
            return this.graphSettings.get("POIs") ? "Turn off points of interest" : "Highlight points of interest (max, min, intersection). You can then click a Point of Interest to see its value!"
        }.property("graphSettings.POIs"),
        projectorMode: function () {
            this.graphSettings.toggleProperty("projectorMode"), logAction(this.graphSettings.get("projectorMode") ? "PM on" : "PM off")
        },
        PMTooltip: function () {
            return this.graphSettings.get("projectorMode") ? "Turn off projector mode" : "Turn on Projector Mode for thicker, darker lines"
        }.property("graphSettings.projectorMode"),
        clearAll: function () {
            Desmos.AuthenticationStateManager.get("userController").clearGraph()
        },
        zoomIn: function () {
            logAction("Zoom In"), zoom("in")
        },
        zoomRestore: function () {
            logAction("Zoom Restore"), zoom("default")
        },
        zoomOut: function () {
            logAction("Zoom Out"), zoom("out")
        },
        settingsOpen: !1,
        settings: function () {
            this.menuPressed("settings")
        },
        settingsTooltip: function () {
            return (this.get("settingsOpen") ? "hide" : "show") + " settings menu"
        }.property("settingsOpen"),
        examplesOpen: !1,
        examples: function () {
            this.menuPressed("examples")
        },
        examplesTooltip: function () {
            return (this.get("examplesOpen") ? "hide" : "show") + " examples menu"
        }.property("examplesOpen"),
        helpOpen: !1,
        help: function () {
            this.menuPressed("help")
        },
        helpTooltip: function () {
            return (this.get("helpOpen") ? "hide" : "show") + " help menu"
        }.property("helpOpen"),
        rightSideOpen: function () {
            return this.get("helpOpen") || this.get("examplesOpen")
        }.property("helpOpen", "examplesOpen"),
        menuPressed: function (a) {
            var b = this.get(a + "Open");
            this.set("examplesOpen", !1), this.set("helpOpen", !1), this.set("settingsOpen", !1), this.set(a + "Open", !b)
        },
        widthChanged: function () {
            var a = $(window).width();
            this.set("showPOI", a > 650), this.set("showProj", a > 650), this.set("showZoom", a > 800), this.set("showUndoRedo", a > 450), this.set("showNotification", a > 650)
        },
        showZoom: !0,
        showUndoRedo: !0
    });
    a.addObserver("settingsOpen", function () {
        Desmos.SettingsView.set("isVisible", a.get("settingsOpen"))
    }), a.addObserver("examplesOpen", function () {
        Desmos.ExamplesView.set("isVisible", a.get("examplesOpen"))
    }), a.addObserver("helpOpen", function () {
        Desmos.HelpView.set("isVisible", a.get("helpOpen"))
    }), Desmos.SubheaderView = a, $(function () {
        a.replaceIn("#subheader"), a.set("graphSettings", Desmos.graphSettings)
    })
})();;

function setupUIListeners() {
    $(document).bind("keydown", function (a) {
        if (a.ctrlKey || a.metaKey) switch (a.which) {
        case 90:
            return $("#btn_undo").trigger(Browser.click()), !1;
        case 89:
            return $("#btn_redo").trigger(Browser.click()), !1
        }
    })
}
function getState(a) {
    var b, c = {
        graph: grapher.getState(),
        expressions: Desmos.expressions.getState()
    };
    return a == "escaped" ? (b = JSON.stringify(c), escape(b)) : c
}
function setState(a, b) {
    var c, d, e;
    Desmos.setPath("graphSettings.POIs", !1);
    if (!isFirstSetState && a === null && Desmos.expressions.isEmpty()) return;
    c = function (a, b) {
        a || (a = window.BLANK_STATE);
        if (b === "escaped" || typeof a == "string") try {
            a = JSON.parse(unescape(a))
        } catch (c) {
            alert("invalid state!");
            return
        }
        "graph" in a && ("degreeMode" in a.graph || (a.graph.degreeMode = !1), "connectedMode" in a.graph || (a.graph.connectedMode = !1), "expressions" in a ? (grapher.__allowRecompute = !1, grapher.setState(a.graph), grapher.__allowRecompute = !0) : grapher.setState(a.graph)), "expressions" in a && Desmos.expressions.setState(a.expressions), grapher.viewport.enforceSquareY(), Desmos.expressions.setSelected(0)
    }, isFirstSetState ? (isFirstSetState = !1, c(a, b)) : (d = getState(), e = Desmos.Transaction.create({
        type: Desmos.Transaction.CAUSE_OF_CHANGE,
        undo: function () {
            c(d)
        },
        redo: function () {
            c(a, b)
        },
        ensureChangeOccured: function () {
            var a = JSON.stringify(getState()),
                b = JSON.stringify(d);
            return b === a
        }
    }), Desmos.undoRedo.addTransaction(e))
}
function zoom(a, b) {
    var c, d, e, f, g, h, i = grapher.viewport.get("minx"),
        j = grapher.viewport.get("maxx"),
        k = grapher.viewport.get("miny"),
        l = grapher.viewport.get("maxy"),
        m = 2;
    switch (a) {
    case "in":
        grapher.inner.animateZoom(2);
        return;
    case "out":
        grapher.inner.animateZoom(.5);
        return;
    case "default":
        c = -10, d = 10, e = -10, f = 10;
        break;
    case "center":
        c = (i - j) / 2, d = -(i - j) / 2, e = (k - l) / 2, f = -(k - l) / 2;
        break;
    case "custom":
        if (b.xmin >= b.xmax || b.ymin >= b.ymax) g = grapher.viewport, b.xmin = g.minx, b.xmax = g.maxx, b.ymin = g.miny, b.ymax = g.maxy;
        c = b.xmin, d = b.xmax, e = b.ymin, f = b.ymax, b.xmin != i && j - b.xmin > MAX_VIEWPORT_DIM ? b.xmin = j - MAX_VIEWPORT_DIM : b.xmin != i && j - b.xmin < MIN_VIEWPORT_DIM, b.xmin = j - MIN_VIEWPORT_DIM, b.xmax != j && b.xmax - i > MAX_VIEWPORT_DIM ? b.xmax = i + MAX_VIEWPORT_DIM : b.xmax != j && b.xmax - i < MIN_VIEWPORT_DIM, b.xmax = i + MIN_VIEWPORT_DIM, b.ymin != k && l - b.ymin > MAX_VIEWPORT_DIM ? b.ymin = l - MAX_VIEWPORT_DIM : b.ymin != k && l - b.ymin < MIN_VIEWPORT_DIM, b.ymin = l - MIN_VIEWPORT_DIM, b.ymax != l && b.ymax - k > MAX_VIEWPORT_DIM ? b.ymax = k + MAX_VIEWPORT_DIM : b.ymax != l && b.ymax - k < MIN_VIEWPORT_DIM, b.ymax = k + MIN_VIEWPORT_DIM;
        break;
    default:
        c = i, d = j, e = k, f = l
    }
    d - c > MAX_VIEWPORT_DIM && (h = (d + c) * .5, d = h + MAX_VIEWPORT_DIM * .5, c = h - MAX_VIEWPORT_DIM * .5), f - e > MAX_VIEWPORT_DIM && (h = (f + e) * .5, f = h + MAX_VIEWPORT_DIM * .5, e = h - MAX_VIEWPORT_DIM * .5), d - c < MIN_VIEWPORT_DIM && (h = (d + c) * .5, d = h + MIN_VIEWPORT_DIM * .5, c = h - MIN_VIEWPORT_DIM * .5), f - e < MIN_VIEWPORT_DIM && (h = (f + e) * .5, f = h + MIN_VIEWPORT_DIM * .5, e = h - MIN_VIEWPORT_DIM * .5), grapher.setViewport({
        xmin: c,
        ymin: e,
        xmax: d,
        ymax: f
    })
}
function isNumber(a) {
    return !isNaN(parseFloat(a)) && isFinite(a)
}
function onResize() {
    var a, b, c, d = $("#exppanel-ember");
    if (!d.length) return;
    a = Desmos.SubheaderView.get("rightSideOpen"), $("#grapher").toggleClass("rightSideOpen", a), b = d.offset().top, c = $(window).height() - b - Desmos.keypadView.get("height"), d.css("height", c + "px");
    if (!grapher) return;
    grapher.inner.updateScreenSize(), grapher.viewport.enforceSquareY(), Desmos.SubheaderView.widthChanged()
}
function logHeartbeat() {
    var a = Desmos.get("pageload_timestamp");
    a || (a = new Date, Desmos.set("pageload_timestamp", a)), n = Math.round((new Date - a) / 6e4), _gaq.push(["_trackEvent", "Heartbeat", +n + " minutes"])
}
function logAction(a) {
    _gaq.push(["_trackEvent", "Event", a])
}
function logException(a) {
    _gaq.push(["_trackEvent", "Error", a.name, a.message])
}
function logSocial(a) {
    _gaq.push(["_trackEvent", "Social", a])
}
function getSubExpressions(a) {
    return evaluator.subExpressions(a)
}
function logNotification(a, b) {
    _gaq.push(["_trackEvent", "Notification", a, b])
}
function addHiddenExpression(a, b) {
    $(Desmos.expressions).trigger("add", [a, b])
}
function removeHiddenExpression(a) {
    $(Desmos.expressions).trigger("remove", a)
}
function getGraphedSegments(a) {
    return grapher.getSegments(a)
}
function getAllIds() {
    return Desmos.expressions.getAllIds()
}
function getSliderIds() {
    return Desmos.expressions.getSliderIds()
}
function getDependents(a) {
    return evaluator.getDependents(a)
}
var grapher, isFirstSetState;
MAX_EVAL_WORKERS = 1, "ontouchstart" in window ? document.documentElement.className += " touch" : document.documentElement.className += " no-touch", typeof window.LOAD_DATA.noworkers == "boolean" && window.LOAD_DATA.noworkers && (MAX_EVAL_WORKERS = 0), IS_OPERA_LT_12 && (MAX_EVAL_WORKERS = 0), IS_IE8 && $(window).bind("load", function () {
    $("body").toggle().toggle()
}), calc_width = 0, calc_height = 0, sidebar_showing = !1, grapher = null, expressions = null, evaluator = null, window.BLANK_STATE = {
    graph: {
        viewport: {
            xmin: -10,
            xmax: 10,
            ymin: -10,
            ymax: 10
        },
        showLabels: !0,
        showGrid: !0,
        showAxes: !0,
        squareAxes: !0,
        labelXMode: "",
        labelYMode: ""
    },
    expressions: {
        list: [{
            id: 1,
            latex: "",
            selected: !0,
            color: {
                index: 8678,
                value: "#C0504D"
            },
            slider: {
                min: -10,
                max: 10,
                snapAdd: null,
                snapMult: null
            }
        }]
    }
}, isFirstSetState = !0, function () {
    var a = $("body").data("worker-path");
    window.evaluator = new Evaluator(MAX_EVAL_WORKERS, a), window.grapher = new Grapher($("#grapher")), $(evaluator).bind("change", function (a, b) {
        Desmos.expressions.onChange(b)
    }), $(evaluator).bind("cancelled", function (a, b) {
        grapher.invalidate(b)
    }), $(evaluator).bind("graph", function (a, b, c, d) {
        grapher.onGraph(b, c, d)
    }), $(evaluator).bind("status", function (a, b, c) {
        Desmos.expressions.onStatus(b, c), grapher.onStatus(b, c)
    }), $(Desmos.expressions).bind("addExp", function (a, b) {
        evaluator.add(b), evaluator.update()
    }), $(Desmos.expressions).bind("removeExp", function (a, b) {
        evaluator.remove(b), evaluator.update(), grapher.remove(b)
    }), $(Desmos.expressions).bind("invalidate", function (a, b) {
        grapher.invalidate(b)
    }), $(Desmos.expressions).bind("graph", function (a, b, c) {
        grapher.add(b, c)
    }), $(Desmos.expressions).bind("ungraph", function (a, b) {
        grapher.remove(b), evaluator.cancelGraph(b)
    }), $(Desmos.expressions).bind("completeState", function (a, b) {
        grapher.clear(), evaluator.setCompleteState(b)
    }), $(grapher).bind("graph", function (a, b, c, d) {
        evaluator.graph(b, c, d, grapher.poiSettings())
    }), Desmos.graphSettings.addObserver("degreeMode", function () {
        evaluator.setDegreeMode(Desmos.graphSettings.get("degreeMode"))
    }), $(grapher).bind("dragStateUpdate", function () {
        evaluator.cancelAllGraphs()
    }), $(grapher).bind("traceDown", function (a, b) {
        var c = Desmos.expressions.getItemById(b);
        c && Desmos.expressions.setSelected(c)
    })
}(), $(document).ready(function () {
    var a, b;
    setInterval(logHeartbeat, 6e4), Browser.isTouch() ? ($(document.activeElement).blur().focusout(), $("#grapher").bind(Browser.isTouch() ? "touchstart" : "click", function () {
        $(document.activeElement).blur().focusout()
    }), a = function () {
        var b = $(document.activeElement);
        b.filter("input,textarea").length == 0 && $(window).scrollTop(0).scrollLeft(0), b.filter("input:hidden,textarea:hidden").length && $("body").append("<input id='temporary_focus_element' />").attr({
            readonly: "readonly",
            disabled: "true"
        }).focus().blur().remove();
        var c = window.innerWidth,
            d = window.innerHeight;
        c == window.lastWidth && d == window.lastHeight ? setTimeout(a, 100) : (window.lastWidth = c, window.lastHeight = d, onResize(), setTimeout(a, 100))
    }, setTimeout(a, 100)) : (b = function () {
        $(window).scrollTop(0).scrollLeft(0), setTimeout(b, 100)
    }, setTimeout(b, 100), onResize()), $(window).resize(function () {
        $(window).callLater(onResize, 100, !0)
    }), setupUIListeners()
}), Desmos.SubheaderView.addObserver("rightSideOpen", onResize);;
(function (a) {
    function h(a) {
        this.bauArc4 = new k(j(a))
    }
    function i(a) {
        return a & b - 1
    }
    function j(a) {
        var b, c = a + "",
            d = [],
            e = 0;
        for (b = 0; b < c.length; b++) d[i(b)] = i((e ^= d[i(b)] * 19) + c.charCodeAt(b));
        return d
    }
    function k(a) {
        var c, d, e = this,
            f = a.length,
            g = 0,
            h = e.i = e.j = e.m = 0;
        e.S = [], e.c = [], f || (a = [f++]);
        while (g < b) e.S[g] = g++;
        for (g = 0; g < b; g++) c = e.S[g], h = i(h + c + a[g % f]), d = e.S[h], e.S[g] = d, e.S[h] = c;
        e.g = function (a) {
            var c, d = e.S,
                f = i(e.i + 1),
                g = d[f],
                h = i(e.j + g),
                j = d[h];
            d[f] = j, d[h] = g, c = d[i(g + j)];
            while (--a) f = i(f + 1), g = d[f], h = i(h + g), j = d[h], d[f] = j, d[h] = g, c = c * b + d[i(g + j)];
            return e.i = f, e.j = h, c
        }, e.g(b)
    }
    var b, c, d, e, f, g;
    h.prototype.g = function (a) {
        var b;
        digits = Array(a);
        for (b = 0; b < a; b++) digits[b] = this.bauArc4.g(1);
        return digits
    }, b = 256, c = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789", d = c.toLowerCase(), e = 62, f = 10, g = function (a) {
        if (!a) throw "You must supply a seed to RandomHashFactory. It should have at least 128 bits of entropy.";
        var b = new h(a);
        this.next = function () {
            chars = Array(f);
            var a = 0,
                c;
            while (a < f) c = b.g(1)[0] >> 2, c < e && (chars[a] = d[c], a++);
            return chars.join("")
        }, this.nextSeed = function () {
            var a = 16,
                c = b.g(a);
            hexCodes = Array(a);
            for (var d = 0; d < a; d++) hexCodes[d] = c[d].toString(16), hexCodes[d].length === 1 && (hexCodes[d] = "0" + hexCodes[d]);
            return hexCodes.join("")
        }
    }, a.RandomHashFactory = g
})(Desmos);