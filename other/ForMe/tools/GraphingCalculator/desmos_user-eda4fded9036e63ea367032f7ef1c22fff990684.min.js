var last_saved_graph, last_saved_hash, URL_PREFIX;
typeof Function.prototype.bind != "function" && (Function.prototype.bind = function (a) {
    var b = this;
    return function () {
        return b.apply(a, arguments)
    }
}), URL_PREFIX = window.location.pathname.split("/calculator")[0] + "/calculator", window.location.protocol === "file:" && (URL_PREFIX = "/calculator"), function (a, b, c) {
    function F() {
        i.ready(), t.append(), q.append(), s.append(), w.append(), v.append(), u.append(), x.append(), y.append(), z.append(), r.append(), p.append(), E.isSupported() && f()
    }
    function G(a, b, c) {
        if (!window.history.pushState) return;
        window.history.pushState(a, b, c)
    }
    function H(b, c, d) {
        b = a(b), b.on(g, c, function () {
            return b.find(d).toggle(), a(c).toggleClass("drop_down"), !1
        }), a(document).on(g, function () {
            b.find(d).hide(), a(c).removeClass("drop_down")
        })
    }
    function I() {
        var a = window.LOAD_DATA.user;
        return a ? h.create({
            email: a.email,
            name: a.name,
            seed: a.seed,
            isDriveUser: a.isDriveUser,
            isEdmodoUser: a.isEdmodoUser
        }) : null
    }
    function J() {
        var a = window.LOAD_DATA.graph;
        return a ? k.fromAjax(a) : null
    }
    function K() {
        var b;
        a(".edmodo-animated-thumb").remove(), b = a('<img src="/assets/grapher/img/check-48.png" class="edmodo-animated-thumb btn" width="48px" height="48px" />'), a("body").append(b), setTimeout(function () {
            a(".edmodo-animated-thumb").fadeOut("slow")
        }, 500)
    }
    var d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E = window._offline = new c.Offline;
    (function () {
        var b;
        E.isSupported() && (b = {}, b.statusCode = {
            401: function () {
                var a = c.get("AuthenticationStateManager");
                a.send("logout")
            }
        }, a.ajaxSetup(b))
    })(), d = function (b, d) {
        if (!E.isSupported()) return a.post(b, d);
        var e = c.getPath("AuthenticationStateManager.userController.currentUser");
        return e ? (E.addAjaxToQueue(e, b, d), a.Deferred().resolve()) : a.Deferred().reject()
    }, f = function () {
        clearTimeout(e);
        var a = c.getPath("AuthenticationStateManager.userController.currentUser");
        E.isOutOfSync(a) && l.syncGraphs(), e = setTimeout(f, 5e3)
    }, a(document).ready(F), g = Browser.click(), h = c.User = b.Object.extend({
        init: function () {
            var a = this,
                b = new c.RandomHashFactory(a.get("seed"));
            a.set("graphs", n.create()), a.nextHash = function () {
                return a.set("seed", b.nextSeed()), E.setLoggedInUser(a, !E.didLogoutFail()), b.next()
            }
        },
        name: undefined,
        email: undefined,
        graphs: undefined,
        isDriveUser: undefined,
        isEdmodoUser: undefined,
        seed: undefined
    }), i = function (a) {
        function d() {
            b = a("#modal"), c = a("#modal_background"), b.find(".close-modal").add(c).bind(g, e)
        }
        function e() {
            B.send("close")
        }
        function f() {
            c.show(), b.show()
        }
        function h() {
            c.hide(), b.hide()
        }
        function i(b) {
            a(b).show().siblings(".modal_section").hide(), f()
        }
        var b, c;
        return {
            ready: d,
            show: f,
            hide: h,
            popup: i,
            $: function () {
                return b
            }
        }
    }(jQuery), j = b.View.extend({
        classNames: ["modal_section"],
        controllerBinding: "Desmos.AuthenticationStateManager.userController",
        stateManagerBinding: "controller.stateManager",
        errors: [],
        append: function () {
            return this.appendTo(i.$())
        },
        popup: function () {
            i.popup(this.$()), this.$("input:visible, textarea:visible").first().focus(), a.placeholder && a.placeholder.shim()
        },
        hide: function () {
            this.set("errors", []), a(document.activeElement).blur(), this.$("input[type='password']").attr("value", ""), i.hide()
        },
        processJSONErrors: function (a) {
            var b;
            try {
                b = JSON.parse(a.responseText).errors
            } catch (c) {
                b = [{
                    message: "Internal Server Error."
                }]
            }
            this.set("errors", b)
        },
        startProcessingForm: function () {
            var a = this;
            b.run(function () {
                a.set("spinning", !0), a.set("errors", [])
            })
        },
        stopProcessingForm: function () {
            this.set("spinning", !1)
        }
    }), k = c.Graph = b.Object.extend({
        title: undefined,
        description: undefined,
        thumbData: undefined,
        thumbURL: undefined,
        thumbURI: b.computed(function () {
            return this.get("thumbURL") || this.get("thumbData")
        }).property("thumbData", "thumbURL"),
        screenshotData: undefined,
        hash: undefined,
        graphData: undefined,
        access: "all",
        copy: function () {
            return k.copy(this)
        },
        updateData: function () {
            var b = c.getPath("AuthenticationStateManager.userController.currentUser"),
                d = this,
                e = a.Deferred(),
                f = a.Deferred(),
                g = a.Deferred();
            return this.set("graphData", window.getState("escaped")), this.set("hash", b.nextHash()), setTimeout(function () {
                grapher.screenshot(200, 200, !0, !1, function (a) {
                    d.set("thumbData", a), e.resolve()
                }), grapher.screenshot(grapher.screen.width, grapher.screen.height, !0, !0, function (a) {
                    d.set("screenshotData", a), f.resolve()
                })
            }), screenshotsDone = a.when(e, f), setTimeout(function () {
                f.reject(), e.reject()
            }, 2e3), screenshotsDone
        },
        accessAllChecked: b.computed(function () {
            return this.get("access") === "all"
        }).property("access"),
        accessLinkChecked: b.computed(function () {
            return this.get("access") === "link"
        }).property("access"),
        accessMeChecked: b.computed(function () {
            return this.get("access") === "me"
        }).property("access"),
        displayTitle: b.computed(function () {
            return this.get("title") || "(untitled graph)"
        }).property("title"),
        path: b.computed(function () {
            var a = this.get("hash");
            return a ? URL_PREFIX + "/" + a : null
        }).property("hash"),
        permalink: b.computed(function () {
            var a = this.get("path");
            return a ? window.location.protocol === "file:" ? E.url + a : window.location.protocol + "//" + window.location.host + a : null
        }).property("path"),
        facebookURL: b.computed(function () {
            var a = this.get("permalink");
            return a ? "http://www.facebook.com/sharer/sharer.php?u=" + escape(a) : null
        }).property("permalink"),
        twitterURL: b.computed(function () {
            var a = this.get("permalink");
            if (!a) return null;
            var b = '"' + this.get("displayTitle") + '" designed with desmos.com';
            return "https://twitter.com/intent/tweet?url=" + escape(a) + "&text=" + escape(b) + "&via=desmos"
        }).property("permalink")
    }), k.copy = function (a) {
        var b = k.create(a.getProperties(["title", "description", "thumbData", "thumbURL", "screenshotData", "hash", "graphData", "access"]));
        return b
    }, k.fromAjax = function (a) {
        return k.create({
            title: a.title,
            description: a.description,
            thumbURL: a.thumbUrl,
            graphData: JSON.stringify(a.state),
            hash: a.hash,
            access: a.access
        })
    }, k.updateFromSync = function (a, b) {
        a.setProperties({
            title: b.title,
            description: b.description,
            hash: b.hash,
            thumbURL: b.thumbUrl
        })
    }, l = b.Object.create({
        apiPath: function (a) {
            return [E.url, "api/v1/calculator", a].join("/")
        },
        saveGraph: function (b) {
            var e = a('input[name="push_to_drive"]').attr("checked") ? "push_to_drive" : undefined,
                f = a('input[name="access"]').attr("checked") ? "all" : "link",
                g = {
                    parent_hash: b.get("parentHash"),
                    thumb_data: b.get("thumbData"),
                    calc_state: b.get("graphData"),
                    graph_hash: b.get("hash"),
                    access: f,
                    description: b.get("description") || undefined,
                    title: b.get("title") || undefined,
                    push_to_drive: e
                };
            return d(this.apiPath("save"), g).pipe(function (a) {
                return c.Offline.didResponseReachServer(a) || (a = {
                    title: g.title ? g.title : null,
                    description: g.description ? g.description : null,
                    hash: g.graph_hash,
                    thumbUrl: g.thumb_data
                }), k.updateFromSync(b, a), b
            })
        },
        getGraphs: function () {
            return a.getJSON(this.apiPath("my_graphs")).pipe(function (a) {
                if (a.myGraphs) return b.A(a.myGraphs).map(k.fromAjax)
            })
        },
        removeGraph: function (a) {
            return d(this.apiPath("my_graphs/remove"), {
                hash: a.get("hash")
            })
        },
        undoRemoveGraph: function (a) {
            return d(this.apiPath("my_graphs/undo_remove"), {
                hash: a.get("hash")
            })
        },
        postLogin: function (b) {
            z.set("spinning", !0), E.setLoggedInUser(b, !0);
            var d = this,
                e = a.Deferred();
            return d.syncGraphs().done(function () {
                d.getGraphs().done(function (a) {
                    b.setPath("graphs.content", a), e.resolve()
                }).fail(function (a) {
                    e.reject(a)
                })
            }).fail(function (a) {
                e.reject(a)
            }), e.fail(function (a) {
                c.Offline.didResponseReachServer(a) || b.setPath("graphs.content", E.getSavedGraphs(b))
            }).always(function () {
                z.set("spinning", !1)
            })
        },
        syncGraphs: function () {
            if (this.deferredSync) return this.deferredSync;
            var b = this,
                d = this.deferredSync = a.Deferred(),
                e = function () {
                    b.deferredSync.reject(), b.deferredSync = null
                },
                f = function () {
                    b.deferredSync.resolve(), b.deferredSync = null
                };
            if (E.didLogoutFail()) return desmosBackend.logout().done(function (a) {
                E.setLoggedInUser(null, !0)
            }), e(), d;
            var g = function () {
                    var b = c.getPath("AuthenticationStateManager.userController.currentUser"),
                        d = E.peekFirstQueuedAjax(b);
                    if (!d) {
                        f();
                        return
                    }
                    a.post(d.url, d.data).done(function (a) {
                        E.shiftFirstQueuedAjax(b), g()
                    }).fail(e)
                };
            return g(), d
        }
    }), m = b.Object.create({
        logout: function () {
            return a.post(E.url + "/account/logout_xhr")
        },
        fetchUser: function (b) {
            var c = this,
                d = function () {
                    return a.ajax({
                        url: E.url + "/account/login_xhr",
                        data: b,
                        type: "post",
                        dataType: "json"
                    }).pipe(function (a) {
                        return c.getUserInfo()
                    })
                };
            return c.logout().pipe(d, d)
        },
        getUserInfo: function () {
            return a.getJSON(E.url + "/account/user_info").pipe(function (a) {
                return h.create({
                    email: a.email,
                    name: a.name,
                    seed: a.seed,
                    isDriveUser: a.isDriveUser,
                    isEdmodoUser: a.isEdmodoUser
                })
            })
        },
        registerUser: function (b) {
            var c = this;
            return a.post(E.url + "/account/register_xhr", b).pipe(function () {
                return c.getUserInfo()
            })
        },
        editAccount: function (b) {
            var c = this;
            return a.post(E.url + "/account/edit_account_xhr", b).pipe(function () {
                return c.getUserInfo()
            })
        },
        recoverPassword: function (b) {
            return a.post(E.url + "/account/recover_xhr", b)
        }
    }), n = b.ArrayController.extend({
        content: b.required(),
        removeObject: function (a) {
            this._super(a), this.set("lastRemoved", a)
        },
        undoRemove: function () {
            var a = this,
                b = a.get("lastRemoved");
            l.undoRemoveGraph(b).done(function () {
                a.unshiftObject(b), a.set("lastRemoved", undefined)
            })
        }
    }), o = b.Object.extend({
        currentUser: null,
        currentGraph: k.create(),
        isDriveUser: !1,
        isEdmodoUser: !1,
        clearGraph: function () {
            this.set("currentGraph", k.create()), window.location.pathname !== window.URL_PREFIX && G(null, null, window.URL_PREFIX)
        },
        currentGraphsDidChange: function () {
            currentUser = this.get("currentUser"), this.__lastCurrentUserGraphChange === currentUser ? E.saveGraphs(currentUser) : this.__lastCurrentUserGraphChange = currentUser
        }.observes("currentUser.graphs.@each"),
        currentGraphDidChange: function () {
            window.setState(this.getPath("currentGraph.graphData"))
        }.observes("currentGraph"),
        currentGraphHashDidChange: b.observer(function () {
            var a = this.get("currentGraph"),
                b = a.get("path");
            b && b !== window.location.pathname && G(a, a.get("title"), b)
        }).observes("currentGraph.path")
    }), a(window).on("popstate", function (a) {
        var b = a.originalEvent.state;
        if (!b) return;
        B.setPath("userController.currentGraph", k.create(b))
    }), p = b.View.create({
        elementId: "top_identity",
        templateName: "top_identity",
        controllerBinding: "Desmos.AuthenticationStateManager.userController",
        didInsertElement: function () {
            H(this.$(), "#top_logout", "#logout_options")
        }
    }), q = j.create({
        elementId: "save-and-share",
        templateName: "save_and_share"
    }), r = j.create({
        elementId: "unsupported-browser",
        templateName: "unsupported_browser",
        is_ie: IS_IE,
        didInsertElement: function () {
            CAPABLE_BROWSER || B.goToState("unsupportedBrowser")
        }
    }), s = j.create({
        elementId: "share-dialog",
        templateName: "share_dialog"
    }), t = j.create({
        elementId: "login-dialog",
        templateName: "login_dialog"
    }), u = j.create({
        elementId: "must-login-dialog",
        templateName: "must_login_dialog"
    }), v = j.create({
        elementId: "register-options-dialog",
        templateName: "register_options_dialog"
    }), w = j.create({
        elementId: "desmos-register-dialog",
        templateName: "desmos_register_dialog"
    }), x = j.create({
        elementId: "edit-account-dialog",
        templateName: "edit_account_dialog"
    }), y = j.create({
        elementId: "recover-password-dialog",
        templateName: "recover_password_dialog"
    }), z = j.create({
        templateName: "my_graphs",
        elementId: "my-graphs-dialog",
        didInsertElement: function () {
            this.$().tipsy({
                fade: "fast",
                title: "tooltip",
                wait: 500,
                live: !0,
                delegate: ".remove_link"
            })
        }
    }), A = b.State.extend({
        enter: function () {
            this.get("view").popup()
        },
        exit: function () {
            this.get("view").hide()
        },
        closeState: b.computed(function () {
            return this.getPath("parentState.name")
        }),
        close: function (a) {
            this.get("view").hide(), a.goToState(this.get("closeState"))
        }
    }), B = b.StateManager.create({
        enableLogging: window.LOAD_DATA.dev,
        initialState: "loggedOut",
        loggedOut: b.State.create({
            mustLogin: A.create({
                view: u,
                enter: function (a) {
                    this._super()
                },
                close: function (a) {
                    a.set("nextStateOnLogin", null), this._super(a)
                },
                driveLogin: function (a, b) {
                    a.goToState("inDriveDialog")
                }
            }),
            inDriveDialog: b.State.create({
                enter: function () {
                    var a = c.openPage(E.url + "/drive_api/calculator/login", "drive_window", "width=650, height=530");
                    a || alert("Login window blocked. Please allow popups from desmos.com to log in with google.")
                },
                driveCallback: function (a) {
                    m.getUserInfo().done(function (b) {
                        a.send("completeLogin", {
                            user: b
                        })
                    }).fail(function (b) {
                        a.gotToState("loggedOut")
                    })
                }
            }),
            loggingIn: A.create({
                view: t,
                driveLogin: function (a, b) {
                    a.goToState("inDriveDialog")
                },
                desmosLogin: function (b, c) {
                    c.preventDefault();
                    var d = a(c.target).serialize(),
                        e = this.get("view");
                    e.startProcessingForm(), m.fetchUser(d).done(function (a) {
                        b.send("completeLogin", {
                            user: a
                        })
                    }).fail(e.processJSONErrors.bind(e)).always(function () {
                        e.stopProcessingForm()
                    })
                }
            }),
            registering: b.State.create({
                initialState: "registerOptionsState",
                registerOptionsState: A.create({
                    view: v,
                    closeState: "loggedOut",
                    driveLogin: function (a, b) {
                        a.goToState("inDriveDialog")
                    },
                    selectDesmos: function (a) {
                        a.goToState("desmosRegisterState")
                    }
                }),
                desmosRegisterState: A.create({
                    view: w,
                    submitRegister: function (b, c) {
                        c.preventDefault();
                        var d = a(c.target).serialize(),
                            e = this.get("view");
                        return e.startProcessingForm(), m.registerUser(d).done(function (a) {
                            b.send("completeLogin", {
                                user: a
                            })
                        }).fail(e.processJSONErrors.bind(e)).always(function () {
                            e.stopProcessingForm()
                        })
                    },
                    closeState: "loggedOut"
                })
            }),
            recoveringPassword: A.create({
                view: y,
                submitRecover: function (b, c) {
                    c.preventDefault();
                    var d = a(c.target).serialize(),
                        e = this.get("view");
                    e.startProcessingForm(), m.recoverPassword(d).done(function () {
                        e.set("sentMessage", !0)
                    }).fail(e.processJSONErrors.bind(e)).always(function () {
                        e.stopProcessingForm()
                    })
                }
            }),
            unsupportedBrowser: A.create({
                view: r
            }),
            save: function (a) {
                a.set("nextStateOnLogin", "loggedIn.saving"), a.goToState("mustLogin")
            },
            myGraphs: function (a) {
                a.set("nextStateOnLogin", "loggedIn.viewingGraphs"), a.goToState("mustLogin")
            },
            completeLogin: function (a, b) {
                a.setPath("userController.currentUser", b.user);
                var c = a.get("nextStateOnLogin") || "loggedIn";
                a.goToState(c)
            },
            login: function (a) {
                a.goToState("loggingIn")
            },
            logout: function () {},
            register: function (a) {
                a.goToState("registering")
            },
            recoverPassword: function (a) {
                a.goToState("recoveringPassword")
            }
        }),
        loggedIn: b.State.create({
            enter: function (a) {
                var b = a.getPath("userController.currentUser");
                l.postLogin(b), a.set("nextStateOnLogin", null)
            },
            exit: function (a) {
                a.setPath("userController.currentUser", null)
            },
            viewingGraphs: b.State.create({
                start: A.create({
                    view: z,
                    close: function (a) {
                        a.goToState("loggedIn")
                    }
                })
            }),
            saving: A.create({
                view: q,
                saveGraph: function (a, b) {
                    b.preventDefault();
                    var c = this.get("view"),
                        d = a.get("userController"),
                        e = d.get("currentGraph");
                    c.startProcessingForm(), e.updateData().always(function () {
                        l.saveGraph(e).done(function (b) {
                            b = b.copy(), d.getPath("currentUser.graphs").unshiftObject(b), d.getPath("currentUser.isEdmodoUser") ? (K(), a.send("close")) : E.isSupported() ? a.send("close") : a.goToState("sharing")
                        }).fail(function (b) {
                            c.processJSONErrors.call(c, b);
                            try {
                                msg = JSON.parse(b.responseText), msg.errors && msg.errors[0].key === "not_logged_in" && a.goToState("loggedOut.mustLogin")
                            } catch (d) {}
                        }).always(function () {
                            c.stopProcessingForm()
                        })
                    })
                },
                updateAccess: function (a, b) {
                    var c = this.view.$("input[name=access]:checked").attr("value");
                    c && a.setPath("userController.currentGraph.access", c)
                },
                editAccount: function (a, b) {
                    var c = a.getPath("currentState.name");
                    a.set("nextStateAfterEdit", c), a.goToState("editingAccount")
                }
            }),
            editingAccount: A.create({
                view: x,
                submitEdit: function (b, c) {
                    c.preventDefault();
                    var d = a(c.target),
                        e = d.serialize(),
                        f = this.get("view"),
                        g = b.getPath("userController.currentUser");
                    f.startProcessingForm(), m.editAccount(e).done(function (a) {
                        g.set("name", a.get("name")), g.set("email", a.get("email"));
                        var c = b.get("nextStateAfterEdit") || "loggedIn";
                        b.set("nextStateAfterEdit", null), b.goToState(c)
                    }).fail(f.processJSONErrors.bind(f)).always(function () {
                        f.stopProcessingForm()
                    })
                }
            }),
            sharing: A.create({
                view: s,
                togglePermalink: function () {
                    var b = a("#permalink").toggle();
                    Browser.isTouch() || b.filter(":visible").focus().select()
                }
            }),
            unsupportedBrowser: A.create({
                view: r
            }),
            save: function (a) {
                a.goToState("saving")
            },
            myGraphs: function (a) {
                a.goToState("viewingGraphs")
            },
            editAccount: function (a) {
                a.goToState("editingAccount")
            },
            logout: function (a) {
                m.logout().done(function () {
                    a.goToState("loggedOut"), E.setLoggedInUser(null, !0)
                }).fail(function () {
                    if (!E.isSupported()) return;
                    a.goToState("loggedOut"), E.setLoggedInUser(null, !1)
                })
            },
            undoRemoveGraph: function (a) {
                a.getPath("userController.currentUser.graphs").undoRemove()
            },
            removeGraph: function (a, b) {
                var c = b.context,
                    d = a.getPath("userController.currentUser.graphs");
                l.removeGraph(c), b.stopPropagation(), d.removeObject(c)
            },
            selectGraph: function (a, b) {
                var c = b.context;
                a.setPath("userController.currentGraph", c.copy()), a.goToState("loggedIn")
            }
        })
    }), c.set("AuthenticationStateManager", B), c.set("UserController", o), c.initialize(B), C = I(), C ? B.send("completeLogin", {
        user: C
    }) : (C = E.getLoggedInUser(), C && B.send("completeLogin", {
        user: C
    })), D = J(), D ? B.setPath("userController.currentGraph", D) : B.get("userController").clearGraph()
}(jQuery, Ember, Desmos);