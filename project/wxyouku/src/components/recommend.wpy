<style lang = 'less' src = '../style/recommend.less'></style>
<template>
  <view class = 'recommend-container border-bottom' wx:if = '{{recommendList}}'>
    <view class='recommend-layer clearfix'>
      <!-- title -->
      <view class="recommend-title" >
        <text class="module-name fl">{{title}}</text>
      </view>
      <!-- 每个一行-->
      <view class="vertical-list" wx:if='{{isVertical}}'>
        <repeat for="{{recommendList}}" item="item">
          <view class="vertical-list-item" @tap="onRecommend({{item}})" >
            <view class="vertical-item-picwrap">
              <image src="{{item.img}}" class="vertical-item-pic"></image>
            </view>
            <view class="vertical-item-desc">
              <view class="vertical-item-title">{{item.title}}</view>
              <view class="vertical-item-dec" >{{item.subtitle}}</view>
              <view class="vertical-item-dec" >{{item.totalVv + '次播放'}}</view>
            </view>
          </view>
        </repeat>
      </view>
      <!-- 三个一行 -->
      <view class="horizontal-list" wx:if='{{!isVertical}}'>
        <repeat for="{{recommendList}}" item="item">
          <view class="horizontal-list-item" @tap="onRecommend({{item}})">
            <view class="horizontal-item-picwrap">
              <image src="{{item.img}}" class="horizontal-item-pic"></image>
              <text class="horizontal-item-score">{{item.firstScore}}</text>
              <text class="horizontal-item-score score-small">{{'.' + item.secondScore}}</text>
            </view>
            <view class="horizontal-item-title">{{item.title}}</view>
            <view class="horizontal-item-dec" >{{item.subtitle}}</view>
          </view>
        </repeat>
      </view>
      <!-- 换一换 -->
      <update></update>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
import update from './update';
// import recommend from '../config/recommend';
import { playPageComment } from '../API/index';
// import { changeHttps } from '../utils/util';

export default class Recommend extends wepy.component {
  data = {
    name: 'recommend',
    title: '相关推荐',
    isVertical: true, // 是否是竖屏显示，即海报模式
    items: null, // 接口返回的总数据
    num: 6, // mt获取的显示个数
    totalNum: 0, // 返回数据总个数
    recommendList: null, // 当前要渲染的数据，根据mt配置获取个数决定他的length
    page: 0, // 一共多少页
    nowPage: 1 // 当前页数
  };
  props = {
    vid: String,
    playPageData: Object,
    pageConfig: Object
  };
  methods = {
    onRecommend(recommend) {
      const vid = recommend.action.extra.value;
      this.$emit('PLAY_NEW_VIDEO', vid);
    }
  };
  watch = {
    playPageData(newValue, oldValue) {
      this.getRecommendData();
    },
    vid(newValue, oldValue) {
      if (newValue === oldValue) return;
      this.resetData();
    }
  };
  components = {
    update: update
  };
  events = {
    'UPDATE_COMPONENT': ($event, ...args) => {
      this.changePage();
    }
  };
  /**
   * 切换视频时数据重置
   */
  resetData() {
    // this.items = null;
    // this.num = 6;
    // this.totalNum = 0;
    // this.recommendList = null;
    // this.page = 0;
    // this.nowPage = 1;
    // this.$apply();
  }
  // methods = {
    // 换一换
  changePage() {
    this.nowPage ++;
    let start;
    let end;
    const data = [];
    if (this.nowPage < this.page) {
      start = ((this.nowPage - 1) * this.num);
      end = this.nowPage * this.num - 1;
    } else if (this.nowPage === this.page) {
      start = ((this.nowPage - 1) * this.num);
      end = this.totalNum - 1;
    } else {
      this.nowPage = 1;
      start = 0;
      end = this.num - 1;
    }
    for (let i = start; i <= end; i++) {
      if (this.items[i]) {
        data.push(this.items[i]);
      }
    }
    this.recommendList = data;
    this.$apply();
  }
  // };
  // 加载完成
  onLoad() {
    this.getRecommendData();
  }
  // 开始获取数据信息
  getRecommendData() {
    if (!this.pageConfig || !this.playPageData) return false;

    let tag = this.pageConfig[this.name].tag;
    let recommendInfo = null;
    this.recommendList = [];
    const tags = tag.split(',');
    for (let i = 0; i < tags.length; i++) {
      if (this.playPageData.playerModules.has(tags[i])) {
        if (i === 0) {
          this.isVertical = true;
        } else {
          this.isVertical = false;
        }
        recommendInfo = this.playPageData.playerModules.get(tags[i]);
      }
    }
    if (!recommendInfo) return;
    this.getrecommendComment(recommendInfo, (data) => {
      const tempData = [];
      // 重构数据
      for (let key in data) {
        const itemData = data[key];
        if (itemData.reputation) {
          itemData.reputation = itemData.reputation.toFixed(1);
          const scoreArray = itemData.reputation.toString().split('.');
          itemData.firstScore = scoreArray[0];
          if (scoreArray.length === 1) {
            itemData.secondScore = 0;
          } else {
            itemData.secondScore = scoreArray[1];
          }
        }
        tempData.push(itemData);
      }
      this.totalNum = tempData.length;
      this.page = Math.ceil(this.totalNum / parseInt(this.num));
      if (this.page < 1 || this.page === 1) {
        this.recommendList = tempData;
      } else {
        for (let i = 0; i < this.num; i++) {
          this.recommendList.push(tempData[i]);
        }
      }
      this.items = tempData;
      this.$apply();
    });
  }
  // 异步时 获取视频及订阅详细信息
  getrecommendComment(data, callback) {
    let asyncLoad = data.asyncLoad;
    const args = {};

    if (asyncLoad) {
      args.componentId = data.componentId;
      args.vid = this.vid;
      playPageComment(args, (res) => {
        if (res.isSuccess && res.result && res.result.data) {
          const resData = res.result.data;
          callback(resData.data.data.itemResult ? resData.data.data.itemResult.item : null);
        } else {
          callback(data.itemResult ? data.itemResult.item : null);
        }
      });
    } else {
      return callback(data.itemResult ? data.itemResult.item : null);
    }
  }
}
</script>
