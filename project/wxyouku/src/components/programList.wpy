<style lang="less" src="../style/program-list.less"></style>
<template>
  <view class = 'program-container border-bottom' wx:if = '{{programList}}'>
    <view class='program-layer clearfix'>
      <!-- title -->
      <view class="program-title">
       <text class="module-name fl">{{title}}</text>
      </view>
      <!-- 剧集 -->
      <view class='program-tv' wx:if="{{videoType === 'tv'}}">
        <scroll-view scroll-x style="white-space: nowrap;" scroll-left="{{currectScrollX}}">
          <repeat for="{{programList}}" item="item" index="index">
            <view class="program-item-tv" @tap="onProgramHandler({{item}}, {{index}})">
              <text wx:if="{{currectIndex === index}}" class="item-tv-title active">{{item.stage}}</text>
              <text wx:else class="item-tv-title">{{item.stage}}</text>
              <text class="iconEn payIconEn" wx:if="{{item.mark && item.mark.type== 'PAY'}}">VIP</text>
              <text class="iconEn trailerIconEn" wx:elif="{{item.mark && item.mark.type== 'TRAILER'}}">预</text>
              <text class="iconEn newIconEn" wx:elif="{{item.mark && item.mark.type== 'NEW'}}">新</text>
              <text class="iconTV" wx:else></text>
            </view>
          </repeat>
        </scroll-view>
      </view>
      <!-- 电影 -->
      <view class='program-movie' wx:if="{{videoType === 'movie'}}">
        <scroll-view scroll-x style=" white-space: nowrap;" scroll-left="{{currectScrollX}}">
          <repeat for="{{programList}}" item="item">
            <view class="program-item-movie" @tap="onProgramHandler({{item}}, {{index}})">
              <image class="program-movie-image" src = "{{item.img}}"></image>
              <text class="iconEn payIconEn" wx:if="{{item.mark && item.mark.type== 'PAY'}}">VIP</text>
              <text class="iconEn trailerIconEn" wx:elif="{{item.mark && item.mark.type== 'TRAILER'}}">预</text>
              <text class="iconEn newIconEn" wx:elif="{{item.mark && item.mark.type== 'NEW'}}">新</text>
              <text class="iconTV" wx:else></text>
              <view class="waist active" wx:if="{{currectIndex === index}}">
                <text class="item-movie-title">{{item.title}}</text>
                <view>
                  <view class="yuan"></view>
                  <text class="v-num">正在播放</text>
                </view>
              </view>
              <view  class="waist" wx:else>
                <text class="item-movie-title">{{item.title}}</text>
                <view>
                  <image class="item-movie-playicon" src="https://img.alicdn.com/tfs/TB1e9R_antYBeNjy1XdXXXXyVXa-23-23.png"></image>
                  <text class="v-num" wx:if="{{item.subtitle}}">{{item.subtitle}}</text>
                </view>
              </view>
            </view>
          </repeat>
        </scroll-view>
      </view>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy';
// import programList from '../config/programList';
import { playPageComment } from '../API/index';
export default class ProgramList extends wepy.component {
  data = {
    name: 'programlist',
    title: '选集',
    programList: null,
    videoType: 'tv',
    currectIndex: 0,
    currectScrollX: 0,
    itemWidth: 0
  };
  props = {
    vid: String,
    playPageData: Object,
    pageConfig: Object
  };
  methods = {
    onProgramHandler(program, index) {
      const vid = program.action.extra.value;
      if (this.vid === vid) return;
      this.currectIndex = index;
      this.currectScrollX = this.currectIndex * this.itemWidth;
      this.$apply();
      this.$emit('PLAY_NEW_VIDEO', vid);
    }
  };
  watch = {
    playPageData(newValue, oldValue) {
      this.getProgramData();
    },
    vid(newValue, oldValue) {
      if (newValue === oldValue) return;
      this.resetData();
    }
  };
  /**
   * 切换视频时数据重置
   */
  resetData() {
    // this.programList = null;
    // this.currectIndex = 0;
    // this.currectScrollX = 0;
    // this.itemWidth = 0;
    // this.$apply();
  }
  /**
   * 加载完成
   */
  onLoad() {
    this.getProgramData();
  }
  /**
   * 开始获取数据信息
   */
  getProgramData() {
    if (!this.pageConfig || !this.playPageData) return false;

    let tag = this.pageConfig[this.name].tag;
    let programInfo = null;
    const tags = tag.split(',');
    for (let i = 0; i < tags.length; i++) {
      if (this.playPageData.playerModules.has(tags[i])) {
        if (i === 0) {
          this.videoType = 'tv';
          this.itemWidth = 61;
        } else {
          this.videoType = 'movie';
          this.itemWidth = 135;
        }
        programInfo = this.playPageData.playerModules.get(tags[i]);
      }
    }
    if (!programInfo) return;
    this.getProgramComment(programInfo, (data) => {
      this.currectIndex = 0;
      const tempData = [];
      for (let key in data) {
        const itemData = data[key];
        const isVid = this.vid.indexOf(itemData.action.extra.value) !== -1;
        if (isVid) {
          this.currectIndex = parseInt(key) - 1;
        }
        tempData.push(itemData);
      }
      this.currectScrollX = this.currectIndex * this.itemWidth;

      this.programList = tempData;
      this.$apply();
    });
  }
  /**
   * 异步获取视频及订阅详细信息
   */
  getProgramComment(data, callback) {
    if (!data) return;
    let asyncLoad = data.asyncLoad;
    const args = {};

    if (asyncLoad) {
      args.componentId = data.componentId;
      args.vid = this.vid;
      playPageComment(args, (res) => {
        if (res.isSuccess && res.result && res.result.data) {
          const resData = res.result.data;
          if (resData.data && resData.data.data) {
            callback(resData.data.data.itemResult ? resData.data.data.itemResult.item : null);
          } else {
            callback(data.itemResult ? data.itemResult.item : null);
          }
        } else {
          callback(data.itemResult ? data.itemResult.item : null);
        }
      });
    } else {
      return callback(data.itemResult ? data.itemResult.item : null);
    }
  }
}
</script>
