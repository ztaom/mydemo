<style lang = 'less' src = '../style/video-details.less'></style>
<template>
  <view wx:if='{{videoDetails}}' class='introduce-container border-bottom'>
    <view class='introduce-layer clearfix' @tap = 'showHideIntroduce()'>
      <!-- 标题 -->
      <view class='introduce-header module-name'>
        <view class='introduce-title'>
          <text wx:if='{{videoDetails.mark}}' class='introduce-mark'>{{videoDetails.mark.text}}</text>
          <text class='introduce-videotitle'>{{videoDetails.title}}</text>
        </view>
        <view class = 'introduce-more'>
          <image src = 'https://img.alicdn.com/tfs/TB1YB8zXQyWBuNjy0FpXXassXXa-24-24.png' class="{{isShowIntroduce ? 'introduce-more-icon active' : 'introduce-more-icon'}}"></image>
          <text class = 'introduce-more-text'>简介</text>
        </view>
      </view>
      <!-- 评分 播放次数 -->
      <view class='introduce-score'>
        <!-- 评分 -->
        <text class='video-score' wx:if='{{videoDetails.youkuRate}}'>{{videoDetails.youkuRate}}</text>
        <text class='video-point'>·</text>
        <!-- 播放次数 -->
        <text class='video-num' wx:if='{{videoDetails.totalVv}}'>{{videoDetails.totalVv}}</text>
      </view>
    </view>
    <!-- 简介 -->
    <view wx:if='{{isShowIntroduce}}' class='introduce-details'>
      <!-- 导演 主演 -->
      <view class='celebrity-group clearfix'  wx:if='{{videoDetails.directors || videoDetails.performers}}'>
        <view wx:if='{{videoDetails.directors}}' class='celebrity-type'>{{'导演：' + videoDetails.directors}}</view>
        <view wx:if='{{videoDetails.performers}}' class='celebrity-list'>{{'主演：' + videoDetails.performers}}</view>
      </view>
      <!-- 上传用户信息 -->
      <view wx:if='{{subscribeInfo}}' class='uploader-layer clearfix'>
        <image class='uploader-header' src= '{{subscribeInfo.img}}' ></image>
        <view class='uploader-describe'>
          <text class='uploader-name' >{{videoDetails.uploader}}</text>
          <text>{{fansInfo.sumCount + '粉丝'}}</text>
        </view>
      </view>
      <!-- 详细简介 -->
      <text class='introduce-desc'>{{videoDetails.desc}}</text>
    </view>
    <!-- 清晰度 分享 -->
    <view class = 'introduce-qualitys'>
      <view class='quality-layer'>
        <view class='currect-quality'>
          <text>高清</text>
        </view>
        <view class='quality-list'></view>
      </view>
      <button class='share-layer' id='share-layer' open-type='share' hover-class='none'>
        <image class='share-image' src='https://img.alicdn.com/tfs/TB1CJSJXQCWBuNjy0FaXXXUlXXa-48-48.png'></image>
      </button>
    </view>
  </view>
</template>

<script>
import wepy from 'wepy';

// import Data from '../data/data';
import { playPageComment, getFans } from '../API/index';
import { changeHttps, formatNumber } from '../utils/util';

export default class VideoDetils extends wepy.component {
  props = {
    vid: String,
    playPageData: Object,
    pageConfig: Object
  };

  data = {
    name: 'videodetails',
    fansInfo: {
      sumCount: 0
    },
    subscribeInfo: {
      'img': 'https://img.alicdn.com/tfs/TB1efwpX1uSBuNjy1XcXXcYjFXa-100-100.png'
    },
    videoDetails: {
      'title': '优酷视频',
      'youkuRate': '9.2',
      'totalVv': '212345',
      'uploader': '优酷视频',
      'directors': '',
      'performers': '',
      'desc': ''
    }, // 视频详细信息
    qualityList: [], // 清晰度列表
    quality: '320p', // 当前清晰度
    isShowIntroduce: false // 是否显示简介
  };
  watch = {
    playPageData(newValue, oldValue) {
      this.getVideoData();
    },
    vid(newValue, oldValue) {
      if (newValue === oldValue) return;
      this.resetData();
    }
  };
  methods = {
    // 显示隐藏简介
    showHideIntroduce() {
      this.isShowIntroduce = !this.isShowIntroduce;
    }
  };
  /**
   * 切换视频时数据重置
   */
  resetData() {
    this.subscribeInfo = {
      'img': 'https://img.alicdn.com/tfs/TB1efwpX1uSBuNjy1XcXXcYjFXa-100-100.png'
    };
    this.videoDetails = {
      'title': '优酷视频',
      'youkuRate': '9.2',
      'totalVv': '',
      'uploader': '优酷视频',
      'directors': '',
      'performers': '',
      'desc': ''
    };
    this.isShowIntroduce = false;
    this.$apply();
  }
  // 加载完成
  onLoad() {
    this.getVideoData();
  }
  // 开始获取数据信息
  getVideoData() {
    this.isShowIntroduce = false;
    if (!this.pageConfig || !this.playPageData) return false;
    let detailInfo = null;
    let subscribe = null;

    let tag = this.pageConfig[this.name].tag;
    const tags = tag.split(',');
    if (this.playPageData.playerModules.has(tags[0])) {
      detailInfo = this.playPageData.playerModules.get(tags[0]);
    }
    if (this.playPageData.playerModules.has(tags[1])) {
      subscribe = this.playPageData.playerModules.get(tags[1]);
    }

    if (!detailInfo) return;
    this.getDetailsComment(detailInfo, (data) => {
      this.videoDetails = data;
      if (this.videoDetails) {
        if (this.videoDetails.directors && this.videoDetails.directors instanceof Array) {
          this.videoDetails.directors = this.videoDetails.directors.join(',');
        }
        if (this.videoDetails.performers && this.videoDetails.performers instanceof Array) {
          this.videoDetails.performers = this.videoDetails.performers.join(',');
        }
        this.getFansInfo(this.videoDetails.uploaderId);
        this.$apply();
      }
    });

    if (!subscribe) return;
    this.getDetailsComment(subscribe, (data) => {
      this.subscribeInfo = data;
      this.subscribeInfo.img = changeHttps(this.subscribeInfo.img);
      this.$apply();
    });
  }
  // 异步时 获取视频及订阅详细信息
  getDetailsComment(data, callback) {
    let asyncLoad = data.asyncLoad;
    const args = {};

    if (asyncLoad) {
      args.componentId = data.componentId;
      args.vid = this.vid;
      playPageComment(args, (res) => {
        if (res.isSuccess && res.result && res.result.data) {
          const resData = res.result.data;
          callback(resData.data.data.itemResult ? resData.data.data.itemResult.item[1] : null);
        } else {
          callback(data.itemResult ? data.itemResult.item[1] : null);
        }
      });
    } else {
      return callback(data.itemResult ? data.itemResult.item[1] : null);
    }
  }
  // 获取粉丝数
  getFansInfo(data) {
    const args = {};
    args.friend = data;
    args.deviceid = '3';
    args.addtion = '3_1t';

    getFans(args, (data) => {
      const _fansData = data.result.data;
      if (_fansData.data && _fansData.data.follow) {
        this.fansInfo = _fansData.data.follow;
        this.fansInfo.sumCount = formatNumber(this.fansInfo.sumCount);
        this.$apply();
      }
    });
  }
}
</script>
