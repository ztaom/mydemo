<style lang='less'  src='../../style/public.less'></style>

<template>
  <view class='container'>
    <!-- 播放器 -->
    <youkuplayer :vid.sync='vid' :coverURL.sync='coverURL'></youkuplayer>
    <scroll-view scroll-y style ="height: {{scrollHeight}}rpx">
      <!-- 送会员点击领取 -->
      <banner :pageConfig.sync='pageConfig'></banner>
      <!-- 视频详情 -->
      <videodetails :vid.sync='vid' :playPageData.sync='playPageData' :pageConfig.sync='pageConfig'></videodetails>
      <!-- 选集 -->
      <programlist :vid.sync='vid' :playPageData.sync='playPageData' :pageConfig.sync='pageConfig'></programlist>
      <!-- 相关推荐 -->
      <recommend :vid.sync='vid' :playPageData.sync='playPageData' :pageConfig.sync='pageConfig'></recommend>
      <!-- 评论 -->
      <!-- 底部 -->
      <footer></footer>
    </scroll-view>
  </view>
</template>
<script>
import wepy from 'wepy';
import {playPageDetail, playPageConfig} from '../../API/index';
import DEFAULT_DATA from '../../config/default-data';
import YoukuPlayer from '../../components/player/youkuPlayer';
import Banner from '../../components/banner';
import VideoDetails from '../../components/videoDetails';
import ProgramList from '../../components/programList';
import Recommend from '../../components/recommend';
import Footer from '../../components/footer';
export default class Play extends wepy.page {
  config = {
    navigationBarTitleText: '优酷视频'
  };

  data = {
    vid: '',
    playPageData: null,
    retryCount: 0,
    pageConfig: null,
    coverURL: '',
    scrollHeight: 784
  };
  watch = {
    vid(newValue, oldValue) {
      if (newValue === oldValue) return;
      this.resetData();
      this.requestPageData();
    }
  };
  components = {
    youkuplayer: YoukuPlayer,
    banner: Banner,
    videodetails: VideoDetails,
    programlist: ProgramList,
    recommend: Recommend,
    footer: Footer
  };
  events = {
    'PLAY_NEW_VIDEO': (args) => {
      this.vid = args;
      this.$apply();
    },
    'UPDATE_COVER_URL': (args) => {
      this.coverURL = args;
      this.$apply();
    }
  };
  /**
   * 请求播放页渲染数据
   */
  requestPageData() {
    playPageDetail(
      {'vid': this.vid}, (res) => {
        if (res.isSuccess && res.result && res.result.data) {
          this.playPageData = this.translatePageData(res.result.data);
          this.$apply();
        } else {
          this.retryCount++;
          if (this.retryCount <= 1) {
            this.retryCount++;
            this.requestPageData();
            return false;
          }
          // retry 3 error
        }
      }
    );
  }
  /**
   * 切换视频时数据重置
   */
  resetData() {
    this.playPageData = null;
    this.retryCount = 0;
    this.coverURL = '';
    this.$apply();
  }
  /**
   * 转换播放页详情数据
   * @param {Object} res 返回数据资源
   */
  translatePageData(res) {
    let result = null;

    let tags = []; // 看是否在mt配置tag中

    for (let item in this.pageConfig) {
      let itemtag = this.pageConfig[item].tag;
      if (itemtag) {
        let arr = itemtag.split(',');
        tags = tags.concat(arr);
      }
    }
    if (res && res.data && res.data.data) {
      try {
        const moduleResult = res.data.data.moduleResult;
        const modules = moduleResult.modules;
        const tempobj = new Map();
        for (let i = 0; i < modules.length; i++) {
          const components = modules[i].components || [];
          const componentItem = components[0] || {};
          const template = componentItem.template || {};
          const tag = template.priorityTag || template.tag;
          const isIn = tags.find((value) => value === tag);
          if (isIn) {
            tempobj.set(tag, componentItem)
          }
        }
        result = {};
        result.playerModules = tempobj;
        result.originData = res.data.data;
      } catch (e) {
      }
    }
    return result;
  }
  onLoad(params) {
    this.vid = params.videoId + '==';
    this.coverURL = params.image;

    this.retryCount = 0;
    wepy.getSystemInfo({
      success: function (res) {
        // 计算主体部分高度,单位为px
        this.scrollHeight = (res.windowHeight - 211) * 2;
      }
    });
    // 请求播放页配置接口
    playPageConfig((res) => {
      if (res.isSuccess && res.result.data) {
        this.pageConfig = res.result.data;
      } else {
        this.pageConfig = DEFAULT_DATA.PAGE_CONFIG;
      }
      this.$apply();
      // 请求播放页详情接口
      this.requestPageData();
    });
  }
  // 分享
  onShareAppMessage() {
    const data = this.playPageData.originData.extra;
    const title = data.shareText ? data.shareText : '优酷视频';
    const shareImage = this.coverURL ? this.coverURL : null;
    const desc = data.showSubtitle ? data.showSubtitle : '该视频来自「优酷」中国领先的视频网站,为您提供高清,流畅的视频体验';

    return {
      title: title,
      desc: desc,
      imageUrl: shareImage
    };
  }
}
</script>
